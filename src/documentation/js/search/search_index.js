var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/classes/AsyncEvent.html",[0,0.203,1,1.169]],["body/classes/AsyncEvent.html",[0,0.213,1,2.211,2,1.498,3,0.539,4,0.539,5,0.419,6,0.524,7,3.14,8,1.862,9,0.675,10,1.645,11,3.238,12,2.009,13,3.232,14,2.497,15,1.645,16,3.238,17,0.079,18,4.191,19,2.735,20,0.419,21,1.112,22,1.272,23,3.903,24,1.112,25,2.267,26,1.255,27,1.091,28,2.414,29,2.414,30,3.903,31,3.011,32,1.341,33,3.903,34,3.238,35,3.011,36,3.903,37,3.011,38,3.238,39,3.238,40,3.238,41,3.238,42,1.398,43,1.112,44,2.414,45,2.414,46,2.414,47,3.903,48,2.497,49,2.497,50,3.238,51,0.539,52,1.528,53,0.829,54,0.539,55,0.905,56,2.414,57,0.829,58,1.862,59,0.675,60,2.414,61,2.414,62,3.238,63,2.414,64,2.414,65,2.414,66,0.039,67,0.053,68,0.039]],["title/directives/MenuItemDirective.html",[69,0.514,70,0.399]],["body/directives/MenuItemDirective.html",[0,0.191,3,0.485,4,0.485,5,0.377,6,0.523,9,0.607,15,1.994,17,0.079,20,0.377,21,1.035,22,1.186,26,1.035,27,1.096,32,1.395,42,1.035,43,1.035,51,0.485,54,0.485,55,0.842,59,0.607,66,0.035,67,0.049,68,0.035,69,0.673,70,0.705,71,0.909,72,2.52,73,1.676,74,2.324,75,3.528,76,1.87,77,2.116,78,1.531,79,1.898,80,2.063,81,1.87,82,2.324,83,2.324,84,2.324,85,1.104,86,1.26,87,3.013,88,3.459,89,2.52,90,2.324,91,2.668,92,2.324,93,3.459,94,2.173,95,2.52,96,2.147,97,2.318,98,3.013,99,1.035,100,1.035,101,0.842,102,1.035,103,1.87,104,1.994,105,1.758,106,1.563,107,2.173,108,1.531,109,1.898,110,1.87,111,1.035,112,2.173,113,3.211,114,2.173,115,1.87,116,4.244,117,1.531,118,2.324,119,2.116,120,3.013,121,3.735,122,3.013,123,2.173,124,3.013,125,1.87,126,2.324,127,2.324,128,0.607,129,1.676,130,2.173,131,2.881,132,2.173,133,3.013,134,2.173,135,2.173]],["title/directives/MenuToggleDirective.html",[69,0.514,136,0.79]],["body/directives/MenuToggleDirective.html",[0,0.288,3,0.438,4,0.438,5,0.34,6,0.521,9,0.548,17,0.079,19,1.74,20,0.34,21,0.963,22,1.208,24,0.963,26,0.963,27,1.098,32,0.963,42,1.226,43,0.963,49,2.162,51,0.798,52,1.368,53,0.674,54,0.438,55,1.13,57,0.674,59,0.998,66,0.032,67,0.046,68,0.032,69,0.626,71,0.82,72,2.51,74,2.162,80,2.282,85,0.996,86,1.173,92,2.162,95,2.216,96,2.031,97,2.216,99,0.963,100,0.963,101,0.548,102,0.963,103,2.031,104,1.424,105,1.424,106,1.493,109,1.814,111,0.963,113,2.162,115,1.74,117,1.424,118,2.162,119,1.814,126,1.512,128,0.548,129,1.512,131,2.162,136,0.963,137,1.512,138,2.216,139,1.74,140,3.57,141,2.216,142,2.803,143,1.424,144,2.031,145,1.662,146,2.162,147,2.803,148,3.03,149,2.803,150,3.272,151,3.119,152,1.512,153,0.798,154,2.803,155,1.74,156,1.74,157,3.57,158,2.753,159,1.961,160,2.344,161,3.272,162,2.803,163,1.961,164,3.272,165,2.803,166,2.803,167,2.913,168,1.961,169,1.961,170,2.803,171,1.961,172,1.961,173,2.803,174,2.803,175,2.162,176,1.961,177,0.996,178,1.217,179,1.217,180,1.217,181,1.961,182,1.512,183,1.512,184,1.961,185,1.217,186,1.512,187,1.961,188,1.961,189,1.961,190,1.961,191,1.961,192,1.961,193,1.217,194,1.512,195,1.512,196,1.961,197,2.803,198,1.512,199,1.961,200,1.961,201,1.961,202,1.961,203,2.803,204,2.803,205,1.217,206,2.162,207,2.803,208,1.217,209,1.512,210,1.512,211,1.961,212,1.961,213,1.961,214,1.961,215,1.512]],["title/directives/OverflowContentDirective.html",[69,0.514,216,0.79]],["body/directives/OverflowContentDirective.html",[0,0.173,1,2.056,3,0.439,4,0.439,5,0.341,6,0.521,9,0.549,10,1.816,12,2.734,13,2.166,14,2.756,15,1.816,17,0.079,19,2.033,20,0.341,22,1.131,24,0.965,25,2.218,26,0.965,27,1.099,32,0.965,35,2.166,37,2.756,51,0.878,52,1.37,53,0.675,54,0.439,55,1.056,57,1.39,59,0.549,66,0.032,67,0.046,68,0.032,69,0.627,70,0.569,71,0.822,77,0.999,78,2.171,85,0.999,86,1.175,89,1.22,99,0.675,100,0.675,101,1.056,102,0.675,111,1.525,119,1.427,125,1.22,128,0.549,143,1.427,145,1.665,153,0.798,155,2.033,156,1.743,177,0.999,178,1.22,179,1.22,180,1.22,182,1.516,185,1.22,193,1.22,194,1.516,195,1.516,215,1.516,216,0.965,217,1.516,218,2.808,219,1.427,220,1.743,221,3.276,222,1.743,223,1.427,224,2.166,225,3.574,226,3.574,227,3.574,228,3.574,229,2.915,230,1.966,231,3.78,232,1.966,233,2.808,234,1.966,235,2.568,236,3.249,237,4.138,238,2.218,239,1.966,240,3.574,241,1.966,242,3.574,243,1.966,244,1.966,245,1.966,246,2.915,247,1.516,248,0.822,249,1.966,250,1.966,251,1.966,252,1.966,253,1.966,254,1.966,255,1.966,256,1.966,257,1.516,258,0.999,259,2.808,260,1.966,261,1.966,262,1.966,263,2.808,264,2.808,265,1.966,266,1.966,267,1.966,268,1.966,269,2.808,270,2.808,271,1.966,272,1.966,273,1.966,274,1.966,275,1.966,276,1.966]],["title/injectables/OverflowControl.html",[153,0.514,277,1.169]],["body/injectables/OverflowControl.html",[0,0.305,3,0.356,4,0.356,5,0.276,6,0.524,9,0.445,10,1.222,17,0.079,20,0.276,21,0.826,22,1.23,24,0.826,26,0.996,27,1.115,32,0.826,42,1.469,43,1.109,51,0.721,52,1.45,53,0.547,54,0.775,55,0.969,57,0.996,59,0.902,66,0.026,67,0.039,68,0.026,70,0.276,76,1.493,77,1.222,78,1.641,79,1.641,86,1.351,99,0.547,100,0.547,101,0.445,102,0.547,104,1.222,106,1.525,108,1.924,109,1.641,110,1.799,111,1.588,128,0.445,139,1.493,141,2.476,143,1.641,144,2.004,145,1.641,148,2.812,153,0.908,160,1.493,198,1.855,209,1.855,210,2.812,219,1.853,220,2.004,223,1.222,235,1.493,238,0.988,248,0.666,258,0.809,277,1.222,278,1.592,279,1.228,280,1.855,281,3.136,282,2.405,283,2.405,284,3.229,285,2.405,286,2.491,287,2.405,288,2.405,289,2.405,290,2.405,291,1.855,292,1.855,293,2.405,294,1.855,295,2.405,296,2.405,297,1.63,298,3.229,299,2.405,300,2.491,301,2.405,302,2.491,303,2.405,304,3.229,305,2.405,306,2.491,307,2.405,308,2.405,309,2.405,310,2.405,311,3.229,312,2.812,313,1.855,314,3.646,315,1.592,316,1.592,317,1.592,318,2.405,319,2.263,320,1.592,321,1.592,322,2.405,323,2.674,324,1.228,325,1.592,326,2.405,327,2.405,328,2.235,329,2.405,330,1.592,331,1.592,332,3.229,333,2.491,334,2.405,335,3.467,336,1.592,337,1.592,338,1.592,339,1.592,340,2.898,341,1.853,342,1.592,343,0.809,344,2.898,345,2.405,346,1.592,347,1.228,348,2.898,349,1.592,350,1.592,351,2.405,352,3.646,353,2.405,354,1.592,355,2.405,356,1.592]],["title/classes/OverflowModel.html",[0,0.203,341,1.169]],["body/classes/OverflowModel.html",[0,0.25,2,1.764,3,0.635,4,0.635,5,0.493,6,0.535,9,0.794,17,0.078,20,0.493,21,1.237,22,1.198,24,1.237,27,1.105,42,1.473,43,0.976,48,2.778,51,0.635,54,0.635,55,0.794,59,1.006,66,0.046,67,0.059,68,0.046,70,0.745,79,2.112,99,0.976,100,0.976,101,0.794,102,0.976,106,1.507,108,2.009,111,1.562,219,2.327,248,1.189,258,1.444,280,2.778,319,1.764,341,1.83,343,1.444,357,2.192,358,3.601,359,3.601,360,3.206,361,2.842,362,3.601,363,2.842,364,2.842,365,2.842,366,2.842,367,2.842,368,2.192,369,2.842,370,2.778,371,2.842]],["title/components/ResponsiveMenuComponent.html",[297,0.962,372,0.962]],["body/components/ResponsiveMenuComponent.html",[0,0.176,3,0.204,4,0.204,5,0.159,6,0.482,9,0.256,10,1.016,12,1.457,15,0.784,17,0.079,20,0.347,21,0.53,22,1.116,24,0.53,25,0.957,26,0.53,27,1.063,31,0.706,32,1.039,42,0.807,43,0.807,51,0.635,52,0.837,53,0.314,54,0.345,55,1.127,57,0.53,58,0.706,59,0.733,66,0.015,67,0.025,68,0.025,69,0.204,70,0.594,71,0.383,75,2.451,76,2.122,77,1.681,78,1.869,79,2.03,80,2.251,81,1.457,84,1.19,85,0.465,86,1.189,89,1.457,90,1.19,91,1.811,95,1.972,96,1.241,97,1.457,99,0.901,100,1.092,101,1.046,102,0.901,103,0.957,104,1.787,105,1.193,106,1.566,108,1.681,109,1.681,110,1.457,111,1.358,115,1.457,117,0.784,119,1.193,125,0.568,127,2.193,128,0.256,136,1.136,138,2.122,139,0.957,141,1.241,143,0.784,144,1.241,145,1.016,146,2.451,151,1.811,152,0.706,153,0.525,155,0.957,156,0.568,158,2.193,160,1.241,167,0.706,175,2.193,177,0.465,178,0.568,179,0.568,180,0.568,183,0.706,185,0.568,186,1.543,193,0.568,205,1.457,206,0.706,208,1.457,216,0.314,219,2.03,220,0.957,222,1.457,223,1.193,224,1.19,229,1.543,235,1.972,236,2.333,238,0.568,246,1.19,247,0.706,248,0.383,257,1.19,258,1.193,281,0.706,286,1.19,291,1.19,292,1.19,294,1.19,297,1.189,300,1.19,302,1.19,306,1.543,312,1.811,313,1.811,319,1.764,323,1.543,324,0.706,328,1.543,333,1.19,343,0.784,347,0.706,360,1.543,368,1.543,370,1.19,372,0.982,373,0.915,374,0.915,375,2.843,376,2.324,377,0.568,378,1.543,379,1.543,380,1.543,381,1.543,382,3.745,383,2,384,1.543,385,1.543,386,2,387,2,388,2,389,2,390,2,391,2,392,2,393,2,394,2,395,2,396,2.348,397,0.915,398,1.543,399,1.543,400,0.915,401,1.543,402,1.811,403,1.543,404,1.543,405,0.915,406,3.419,407,0.957,408,1.543,409,0.915,410,1.543,411,1.543,412,3.308,413,0.915,414,1.543,415,1.543,416,0.915,417,2.843,418,1.543,419,0.915,420,1.543,421,2.348,422,3.025,423,0.915,424,0.915,425,2.348,426,2,427,3.025,428,0.915,429,1.543,430,0.915,431,1.543,432,1.543,433,0.915,434,0.915,435,2.843,436,2.348,437,2.348,438,2.348,439,2.348,440,1.543,441,2.622,442,1.543,443,0.915,444,0.915,445,1.543,446,2,447,0.915,448,2,449,0.915,450,0.706,451,0.706,452,0.915,453,1.543,454,1.543,455,0.915,456,0.915,457,2.348,458,1.543,459,2,460,0.915,461,1.543,462,2.348,463,0.915,464,0.915,465,0.915,466,0.915,467,1.543,468,0.915,469,0.915,470,0.915,471,0.915,472,0.915,473,2,474,0.915,475,0.915,476,0.915,477,0.915,478,0.915,479,1.543,480,0.915,481,0.915,482,0.915,483,2,484,0.915,485,0.915,486,0.915,487,0.915,488,0.915,489,0.915,490,1.543,491,0.915,492,0.915,493,0.915,494,0.915,495,0.915,496,1.543,497,0.915,498,0.915,499,0.915,500,1.543,501,0.915,502,2,503,0.915,504,1.543,505,0.915,506,0.915,507,0.915,508,0.915,509,0.915,510,0.915,511,0.915,512,0.915,513,0.915,514,0.915,515,0.915,516,0.915,517,0.915,518,0.915,519,0.915,520,0.915,521,0.915,522,0.915,523,0.915,524,1.543,525,1.543,526,0.915,527,1.543,528,0.915,529,1.543,530,0.915,531,0.915,532,0.915,533,1.543,534,0.915,535,0.915,536,0.915,537,0.915,538,0.915,539,0.568,540,0.915,541,0.915,542,2,543,0.915,544,0.915,545,0.915,546,0.915,547,0.915,548,0.915,549,0.915,550,0.915,551,0.915,552,0.915,553,0.915,554,0.915,555,0.915,556,0.915,557,0.915,558,1.543,559,0.915,560,0.915,561,0.915,562,0.915,563,1.543,564,0.915,565,0.915,566,3.419,567,2,568,0.915,569,1.543,570,0.915,571,0.915,572,1.543,573,0.915,574,0.915,575,0.915,576,0.915,577,1.543,578,0.915,579,0.915,580,0.915,581,0.568,582,1.543,583,2.348,584,0.915,585,0.915,586,0.915,587,0.915]],["title/modules/ResponsiveMenuModule.html",[588,1.428,589,1.169]],["body/modules/ResponsiveMenuModule.html",[0,0.242,3,0.614,4,0.614,5,0.477,6,0.354,17,0.078,51,0.987,54,0.614,66,0.045,67,0.057,68,0.045,70,0.8,128,0.768,136,1.584,153,0.97,177,1.396,216,1.584,248,1.149,343,1.791,372,1.929,407,1.705,450,2.119,539,1.705,581,1.705,588,1.705,589,2.392,590,1.705,591,1.396,592,3.001,593,3.001,594,3.001,595,2.119,596,2.119,597,2.119,598,2.119,599,2.718,600,2.119,601,2.748,602,2.748,603,3.525,604,2.748,605,2.748,606,3.525,607,2.119,608,2.748,609,2.748]],["title/coverage.html",[610,2.417]],["body/coverage.html",[0,0.346,1,1.662,5,0.568,6,0.591,7,2.523,8,2.523,17,0.076,57,1.123,66,0.053,67,0.064,68,0.053,69,0.94,70,0.568,72,2.437,73,2.523,101,0.914,136,1.123,137,2.523,153,0.731,216,1.123,217,2.523,277,1.662,279,2.523,297,1.368,341,1.662,357,2.523,372,1.368,376,2.03,377,2.03,610,2.523,611,3.27,612,3.27,613,3.27,614,3.27,615,3.27,616,3.27,617,3.27,618,3.27,619,3.27,620,3.927,621,3.927,622,3.27,623,3.27,624,3.27,625,3.27,626,3.27,627,3.27]],["title/dependencies.html",[591,1.405,628,1.924]],["body/dependencies.html",[17,0.078,53,1.097,66,0.052,67,0.063,68,0.052,117,1.623,128,0.893,222,2.403,223,1.967,591,1.623,607,2.464,629,3.195,630,4.663,631,3.195,632,3.195,633,3.195,634,3.195,635,3.872,636,2.986,637,3.195,638,3.195,639,3.195,640,3.195,641,3.195,642,3.195,643,3.195,644,3.195,645,3.195,646,3.195,647,3.195,648,3.195,649,3.195,650,3.195,651,3.195,652,3.195,653,3.195,654,3.195,655,3.195,656,3.195,657,3.195,658,3.195,659,3.195,660,3.195,661,3.195]],["title/miscellaneous/enumerations.html",[662,1.484,663,2.133]],["body/miscellaneous/enumerations.html",[6,0.458,17,0.073,20,0.617,66,0.058,67,0.067,68,0.058,80,1.805,105,2.095,138,2.205,205,2.559,208,2.559,376,2.205,377,2.559,398,3.18,402,2.74,451,2.74,662,2.74,663,2.74,664,3.552]],["title/index.html",[20,0.399,665,1.775]],["body/index.html",[2,1.952,17,0.076,66,0.051,67,0.062,68,0.051,70,0.79,71,1.316,81,2.569,82,2.426,83,2.426,136,1.563,153,0.925,216,1.563,277,1.599,297,1.316,372,1.903,407,1.952,539,1.952,581,1.952,588,2.381,589,2.412,591,1.599,592,2.426,593,2.426,594,2.426,595,2.426,596,2.426,597,2.426,598,2.426,599,2.959,600,2.426,665,2.426]],["title/modules.html",[590,1.945]],["body/modules.html",[17,0.069,66,0.06,67,0.069,68,0.06,589,1.869,590,2.283,636,2.837,666,3.679,667,3.679,668,3.679]]],"invertedIndex":[["",{"_index":17,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{}}}],["0",{"_index":258,"title":{},"body":{"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["0.9.1",{"_index":661,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":81,"title":{},"body":{"directives/MenuItemDirective.html":{},"components/ResponsiveMenuComponent.html":{},"index.html":{}}}],["1.1.9",{"_index":640,"title":{},"body":{"dependencies.html":{}}}],["1.9.0",{"_index":659,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":206,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["10/11",{"_index":615,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":622,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":82,"title":{},"body":{"directives/MenuItemDirective.html":{},"index.html":{}}}],["2/2",{"_index":623,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":83,"title":{},"body":{"directives/MenuItemDirective.html":{},"index.html":{}}}],["3.0.3",{"_index":655,"title":{},"body":{"dependencies.html":{}}}],["3.1.3",{"_index":648,"title":{},"body":{"dependencies.html":{}}}],["3.2.4",{"_index":643,"title":{},"body":{"dependencies.html":{}}}],["3.5.5",{"_index":645,"title":{},"body":{"dependencies.html":{}}}],["3/4",{"_index":625,"title":{},"body":{"coverage.html":{}}}],["4.7.0",{"_index":651,"title":{},"body":{"dependencies.html":{}}}],["4/5",{"_index":619,"title":{},"body":{"coverage.html":{}}}],["4/6",{"_index":617,"title":{},"body":{"coverage.html":{}}}],["5/6",{"_index":621,"title":{},"body":{"coverage.html":{}}}],["6.5.2",{"_index":657,"title":{},"body":{"dependencies.html":{}}}],["66",{"_index":616,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":624,"title":{},"body":{"coverage.html":{}}}],["8.0.0",{"_index":630,"title":{},"body":{"dependencies.html":{}}}],["80",{"_index":618,"title":{},"body":{"coverage.html":{}}}],["83",{"_index":620,"title":{},"body":{"coverage.html":{}}}],["9.15.8",{"_index":653,"title":{},"body":{"dependencies.html":{}}}],["90",{"_index":614,"title":{},"body":{"coverage.html":{}}}],["accessors",{"_index":24,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["actual_component",{"_index":587,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["add",{"_index":115,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["added",{"_index":426,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["addto",{"_index":88,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["addto(parent",{"_index":112,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["affect",{"_index":295,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["aftercontentinit",{"_index":306,"title":{},"body":{"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["afterremove",{"_index":225,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["afterrender",{"_index":226,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["afterviewinit",{"_index":144,"title":{},"body":{"directives/MenuToggleDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["alignments",{"_index":451,"title":{},"body":{"components/ResponsiveMenuComponent.html":{},"miscellaneous/enumerations.html":{}}}],["aligntoggle",{"_index":388,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["allways",{"_index":110,"title":{},"body":{"directives/MenuItemDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["amount",{"_index":415,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["angular",{"_index":641,"title":{},"body":{"dependencies.html":{}}}],["angular/animations",{"_index":629,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":631,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":607,"title":{},"body":{"modules/ResponsiveMenuModule.html":{},"dependencies.html":{}}}],["angular/compiler",{"_index":632,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":128,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":633,"title":{},"body":{"dependencies.html":{}}}],["angular/material",{"_index":634,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":635,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":638,"title":{},"body":{"dependencies.html":{}}}],["anymore",{"_index":425,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["app",{"_index":298,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["applied",{"_index":240,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["array",{"_index":549,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["async",{"_index":13,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/OverflowContentDirective.html":{}}}],["asyncevent",{"_index":1,"title":{"classes/AsyncEvent.html":{}},"body":{"classes/AsyncEvent.html":{},"directives/OverflowContentDirective.html":{},"coverage.html":{}}}],["automatically",{"_index":139,"title":{},"body":{"directives/MenuToggleDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["avoid",{"_index":464,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["await",{"_index":35,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/OverflowContentDirective.html":{}}}],["awesome",{"_index":650,"title":{},"body":{"dependencies.html":{}}}],["bar",{"_index":473,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["before",{"_index":15,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["beforeremove",{"_index":227,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["beforerender",{"_index":228,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["bluebird",{"_index":644,"title":{},"body":{"dependencies.html":{}}}],["boolean",{"_index":319,"title":{},"body":{"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["bootstrap",{"_index":407,"title":{},"body":{"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"index.html":{}}}],["both",{"_index":293,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["browse",{"_index":668,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":636,"title":{},"body":{"dependencies.html":{},"modules.html":{}}}],["btn",{"_index":382,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["btnalign",{"_index":398,"title":{},"body":{"components/ResponsiveMenuComponent.html":{},"miscellaneous/enumerations.html":{}}}],["btnalign.left",{"_index":557,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["btnalign.right",{"_index":399,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["button",{"_index":80,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{},"miscellaneous/enumerations.html":{}}}],["buttonpane",{"_index":462,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["buttons",{"_index":422,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["buttonwrapper",{"_index":571,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["called",{"_index":30,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["calls",{"_index":264,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["cancel",{"_index":18,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["case",{"_index":292,"title":{},"body":{"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["catch",{"_index":38,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["center",{"_index":570,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["change",{"_index":438,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["changedetector",{"_index":395,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["changedetectorref",{"_index":396,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["changes",{"_index":432,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["check",{"_index":445,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["children",{"_index":124,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["class",{"_index":0,"title":{"classes/AsyncEvent.html":{},"classes/OverflowModel.html":{}},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"coverage.html":{}}}],["class.more",{"_index":149,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["class.responsive",{"_index":93,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["classbtnpane",{"_index":389,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AsyncEvent.html":{},"classes/OverflowModel.html":{},"index.html":{}}}],["classname",{"_index":129,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{}}}],["clean",{"_index":496,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["clearview",{"_index":497,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["click",{"_index":140,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["close",{"_index":281,"title":{},"body":{"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["cluster_responsivemenumodule",{"_index":595,"title":{},"body":{"modules/ResponsiveMenuModule.html":{},"index.html":{}}}],["cluster_responsivemenumodule_declarations",{"_index":596,"title":{},"body":{"modules/ResponsiveMenuModule.html":{},"index.html":{}}}],["cluster_responsivemenumodule_exports",{"_index":597,"title":{},"body":{"modules/ResponsiveMenuModule.html":{},"index.html":{}}}],["cluster_responsivemenumodule_providers",{"_index":598,"title":{},"body":{"modules/ResponsiveMenuModule.html":{},"index.html":{}}}],["column",{"_index":568,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["commonmodule",{"_index":606,"title":{},"body":{"modules/ResponsiveMenuModule.html":{}}}],["complete",{"_index":64,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["completed",{"_index":25,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["compodoc/compodoc",{"_index":639,"title":{},"body":{"dependencies.html":{}}}],["component",{"_index":297,"title":{"components/ResponsiveMenuComponent.html":{}},"body":{"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{},"coverage.html":{},"index.html":{}}}],["component_template",{"_index":584,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["components",{"_index":286,"title":{},"body":{"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["components/responsive",{"_index":604,"title":{},"body":{"modules/ResponsiveMenuModule.html":{}}}],["conainer",{"_index":327,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["const",{"_index":119,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["constructor",{"_index":26,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["constructor(el",{"_index":94,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["constructor(overflowctrl",{"_index":152,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["constructor(viewref",{"_index":230,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["container",{"_index":235,"title":{},"body":{"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["content",{"_index":78,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["contentchild",{"_index":449,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["contentchild(menutoggledirective",{"_index":460,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["contentchildren",{"_index":447,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["contentchildren(menuitemdirective",{"_index":429,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["contents",{"_index":420,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["continue",{"_index":31,"title":{},"body":{"classes/AsyncEvent.html":{},"components/ResponsiveMenuComponent.html":{}}}],["control",{"_index":280,"title":{},"body":{"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{}}}],["core",{"_index":646,"title":{},"body":{"dependencies.html":{}}}],["count",{"_index":502,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["coverage",{"_index":610,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["css",{"_index":157,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["current",{"_index":49,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuToggleDirective.html":{}}}],["custom",{"_index":146,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["customoverflow",{"_index":390,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["customtogglebutton",{"_index":393,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["data",{"_index":314,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["declarations",{"_index":592,"title":{},"body":{"modules/ResponsiveMenuModule.html":{},"index.html":{}}}],["decorators",{"_index":428,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["deep",{"_index":579,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["default",{"_index":104,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["defaulttogglebtn",{"_index":392,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["defined",{"_index":27,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["dependcy",{"_index":289,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["dependencies",{"_index":591,"title":{"dependencies.html":{}},"body":{"modules/ResponsiveMenuModule.html":{},"dependencies.html":{},"index.html":{}}}],["description",{"_index":9,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["destroyed",{"_index":471,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["destroys",{"_index":192,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["detection",{"_index":439,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["dimensions",{"_index":520,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["direction",{"_index":567,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["directive",{"_index":69,"title":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{}},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{},"coverage.html":{}}}],["directives",{"_index":71,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{},"index.html":{}}}],["directives/menu",{"_index":343,"title":{},"body":{"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{}}}],["directives/overflow.directive",{"_index":608,"title":{},"body":{"modules/ResponsiveMenuModule.html":{}}}],["directly",{"_index":505,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["display",{"_index":160,"title":{},"body":{"directives/MenuToggleDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["documentation",{"_index":611,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":375,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["done",{"_index":23,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["dont",{"_index":294,"title":{},"body":{"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["dynamic",{"_index":637,"title":{},"body":{"dependencies.html":{}}}],["each",{"_index":296,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["el",{"_index":103,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["element",{"_index":117,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{},"dependencies.html":{}}}],["elementref",{"_index":95,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["elements",{"_index":521,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["emits",{"_index":10,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["empty",{"_index":362,"title":{},"body":{"classes/OverflowModel.html":{}}}],["enable",{"_index":531,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["end",{"_index":573,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["ensure",{"_index":495,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["enum",{"_index":452,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["enumerations",{"_index":663,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":40,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["errors",{"_index":466,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["even",{"_index":328,"title":{},"body":{"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["event",{"_index":19,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{}}}],["event.cancel",{"_index":41,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["event.completed",{"_index":269,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["event.done",{"_index":37,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/OverflowContentDirective.html":{}}}],["event.ts",{"_index":8,"title":{},"body":{"classes/AsyncEvent.html":{},"coverage.html":{}}}],["event.ts:11",{"_index":28,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["event.ts:21",{"_index":46,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["event.ts:35",{"_index":44,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["event.ts:54",{"_index":29,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["eventemitter",{"_index":12,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["example",{"_index":32,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["exists",{"_index":220,"title":{},"body":{"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["exits",{"_index":329,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["export",{"_index":54,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{}}}],["exports",{"_index":594,"title":{},"body":{"modules/ResponsiveMenuModule.html":{},"index.html":{}}}],["false",{"_index":109,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["fatalerror",{"_index":39,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"coverage.html":{}}}],["file:dist/ngx",{"_index":656,"title":{},"body":{"dependencies.html":{}}}],["filter",{"_index":247,"title":{},"body":{"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["filter((items",{"_index":256,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["finalize",{"_index":547,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["finalizemenuitems",{"_index":551,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["finalizerenderprocess",{"_index":532,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["finialize",{"_index":530,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["finished",{"_index":441,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["fits",{"_index":412,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["flex",{"_index":566,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["font",{"_index":649,"title":{},"body":{"dependencies.html":{}}}],["force",{"_index":326,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["forced",{"_index":323,"title":{},"body":{"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["forceoverflow",{"_index":313,"title":{},"body":{"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["forceoverflow(forced",{"_index":347,"title":{},"body":{"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["fromevent",{"_index":176,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["fromevent(this.el.nativeelement",{"_index":184,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["getcompleted",{"_index":45,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["getcomputedstyle",{"_index":202,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["getdata",{"_index":338,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["gethide",{"_index":336,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["getitems",{"_index":363,"title":{},"body":{"classes/OverflowModel.html":{}}}],["getnativeelement",{"_index":168,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["gets",{"_index":470,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["getshow",{"_index":330,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["getview",{"_index":244,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["getwidth",{"_index":171,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["given",{"_index":442,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["group",{"_index":408,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["hidden",{"_index":167,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["hide",{"_index":148,"title":{},"body":{"directives/MenuToggleDirective.html":{},"injectables/OverflowControl.html":{}}}],["highlight.js",{"_index":652,"title":{},"body":{"dependencies.html":{}}}],["highlightjs",{"_index":654,"title":{},"body":{"dependencies.html":{}}}],["hold",{"_index":367,"title":{},"body":{"classes/OverflowModel.html":{}}}],["holds",{"_index":48,"title":{},"body":{"classes/AsyncEvent.html":{},"classes/OverflowModel.html":{}}}],["hook",{"_index":237,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["hooks",{"_index":265,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["host",{"_index":156,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["hostbinding",{"_index":126,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{}}}],["hostbinding(\"class.more",{"_index":181,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["hostbindings",{"_index":92,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{}}}],["hostel",{"_index":394,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["html",{"_index":582,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["htmlelement",{"_index":113,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{}}}],["identifier",{"_index":612,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":143,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["import",{"_index":51,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{}}}],["important",{"_index":580,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["imports",{"_index":609,"title":{},"body":{"modules/ResponsiveMenuModule.html":{}}}],["included",{"_index":468,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["includes",{"_index":173,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["index",{"_index":20,"title":{"index.html":{}},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"miscellaneous/enumerations.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{}}}],["informations",{"_index":358,"title":{},"body":{"classes/OverflowModel.html":{}}}],["inheritdoc",{"_index":483,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["initialize",{"_index":517,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["initrenderprocess",{"_index":522,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["injectable",{"_index":277,"title":{"injectables/OverflowControl.html":{}},"body":{"injectables/OverflowControl.html":{},"coverage.html":{},"index.html":{}}}],["injectables",{"_index":278,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["injection",{"_index":290,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["inline",{"_index":574,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["input",{"_index":127,"title":{},"body":{"directives/MenuItemDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["inputs",{"_index":90,"title":{},"body":{"directives/MenuItemDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["internal",{"_index":58,"title":{},"body":{"classes/AsyncEvent.html":{},"components/ResponsiveMenuComponent.html":{}}}],["iscustombutton",{"_index":386,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["isdestroyed",{"_index":180,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["isforcedoverflow",{"_index":469,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["isopen",{"_index":311,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["isoverflow",{"_index":360,"title":{},"body":{"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["item",{"_index":75,"title":{},"body":{"directives/MenuItemDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["item.addto(this.buttonpane.nativeelement",{"_index":558,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["item.addto(this.el.nativeelement",{"_index":122,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["item.addto(this.tmpbuttonpane.nativeelement",{"_index":513,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["item.addto(this.viewref.element.nativeelement",{"_index":271,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["item.directive",{"_index":248,"title":{},"body":{"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{}}}],["item.directive.ts",{"_index":73,"title":{},"body":{"directives/MenuItemDirective.html":{},"coverage.html":{}}}],["item.directive.ts:26",{"_index":107,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["item.directive.ts:29",{"_index":98,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["item.directive.ts:45",{"_index":114,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["item.directive.ts:61",{"_index":123,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["item.remove",{"_index":125,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["itemcollection",{"_index":546,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["itemcollection.push",{"_index":544,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["items",{"_index":219,"title":{},"body":{"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["items(items",{"_index":369,"title":{},"body":{"classes/OverflowModel.html":{}}}],["items.indexof(item",{"_index":555,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["items.length",{"_index":257,"title":{},"body":{"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["js",{"_index":647,"title":{},"body":{"dependencies.html":{}}}],["justify",{"_index":569,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["label",{"_index":453,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["last",{"_index":475,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["left",{"_index":205,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{},"miscellaneous/enumerations.html":{}}}],["legend",{"_index":581,"title":{},"body":{"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"index.html":{}}}],["lib/.../responsive",{"_index":664,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lib/ngx",{"_index":6,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["ln",{"_index":511,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["longer",{"_index":410,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["loop",{"_index":440,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["margin",{"_index":174,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["marginleft",{"_index":203,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["marginright",{"_index":207,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["mark",{"_index":477,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["matching",{"_index":67,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{}}}],["max",{"_index":479,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["maximal",{"_index":414,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["maxwidth",{"_index":480,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu",{"_index":77,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["menu.component",{"_index":605,"title":{},"body":{"modules/ResponsiveMenuModule.html":{}}}],["menu.component.html",{"_index":384,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu.component.scss",{"_index":383,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu.component.ts",{"_index":377,"title":{},"body":{"components/ResponsiveMenuComponent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["menu.component.ts:100",{"_index":411,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu.component.ts:115",{"_index":405,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu.component.ts:121",{"_index":400,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu.component.ts:127",{"_index":416,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu.component.ts:135",{"_index":434,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu.component.ts:145",{"_index":444,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu.component.ts:197",{"_index":397,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu.component.ts:231",{"_index":419,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu.component.ts:60",{"_index":424,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu.component.ts:68",{"_index":430,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu.component.ts:75",{"_index":413,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu.component.ts:93",{"_index":409,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menubar",{"_index":501,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menuitem",{"_index":542,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menuitem.remove",{"_index":499,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menuitem.visible",{"_index":543,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menuitemdirective",{"_index":70,"title":{"directives/MenuItemDirective.html":{}},"body":{"directives/MenuItemDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"coverage.html":{},"index.html":{}}}],["menuitems",{"_index":387,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menutoggledirective",{"_index":136,"title":{"directives/MenuToggleDirective.html":{}},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"coverage.html":{},"index.html":{}}}],["metadata",{"_index":85,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["methods",{"_index":21,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["miscellaneous",{"_index":662,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["model",{"_index":340,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["model/overflow.model",{"_index":342,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["module",{"_index":588,"title":{"modules/ResponsiveMenuModule.html":{}},"body":{"modules/ResponsiveMenuModule.html":{},"index.html":{}}}],["modules",{"_index":590,"title":{"modules.html":{}},"body":{"modules/ResponsiveMenuModule.html":{},"modules.html":{}}}],["more",{"_index":158,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["multiple",{"_index":285,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["name",{"_index":100,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["native",{"_index":170,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["nativeelement",{"_index":150,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["need",{"_index":446,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["never",{"_index":381,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["new",{"_index":57,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{},"coverage.html":{}}}],["next",{"_index":474,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["ng",{"_index":578,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["ngaftercontentinit",{"_index":485,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["ngafterviewinit",{"_index":183,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["ngmodule",{"_index":603,"title":{},"body":{"modules/ResponsiveMenuModule.html":{}}}],["ngondestroy",{"_index":193,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["ngoninit",{"_index":251,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["ngx",{"_index":222,"title":{},"body":{"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{},"dependencies.html":{}}}],["ngxresponsivemenuitem",{"_index":87,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["ngxresponsivemenuitem]'},{'name",{"_index":585,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["ngxresponsivemenutoggle",{"_index":147,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["ngxresponsivemenutoggle]'},{'name",{"_index":586,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["nodes",{"_index":263,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["nodes.foreach((item",{"_index":270,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["none",{"_index":161,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["notfied",{"_index":242,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["notified",{"_index":333,"title":{},"body":{"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["notify",{"_index":344,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["nowrap",{"_index":576,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["null",{"_index":118,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{}}}],["number",{"_index":175,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["oberservable",{"_index":332,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["oberservers",{"_index":346,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["observable",{"_index":335,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["observers",{"_index":345,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["old",{"_index":494,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["onasynchook(event",{"_index":33,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["ondestroy",{"_index":145,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["oninit",{"_index":221,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["open",{"_index":210,"title":{},"body":{"directives/MenuToggleDirective.html":{},"injectables/OverflowControl.html":{}}}],["openoverflow",{"_index":212,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["operations",{"_index":14,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/OverflowContentDirective.html":{}}}],["optional",{"_index":102,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["others",{"_index":550,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["out",{"_index":539,"title":{},"body":{"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"index.html":{}}}],["output",{"_index":246,"title":{},"body":{"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["outputs",{"_index":224,"title":{},"body":{"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["overflow",{"_index":111,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["overflowcontentdirective",{"_index":216,"title":{"directives/OverflowContentDirective.html":{}},"body":{"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"coverage.html":{},"index.html":{}}}],["overflowcontrol",{"_index":153,"title":{"injectables/OverflowControl.html":{}},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"coverage.html":{},"index.html":{}}}],["overflowctrl",{"_index":155,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["overflowdata",{"_index":533,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["overflowdata.length",{"_index":535,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["overflowitems",{"_index":368,"title":{},"body":{"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["overflowitems.push(item",{"_index":560,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["overflowmodel",{"_index":341,"title":{"classes/OverflowModel.html":{}},"body":{"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"coverage.html":{}}}],["overlay",{"_index":211,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["overview",{"_index":665,"title":{"index.html":{}},"body":{"index.html":{}}}],["package",{"_index":628,"title":{"dependencies.html":{}},"body":{}}],["pane",{"_index":406,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["parameters",{"_index":99,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["parent",{"_index":116,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["parseint(style.getpropertyvalue(\"margin",{"_index":204,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["parseint(this.tmpbuttonpane.nativeelement.offsetwidth",{"_index":564,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["pass",{"_index":16,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["passed",{"_index":378,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["pipe",{"_index":254,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["pipe(takeuntil(this.isdestroyed",{"_index":185,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["position",{"_index":401,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["possible",{"_index":402,"title":{},"body":{"components/ResponsiveMenuComponent.html":{},"miscellaneous/enumerations.html":{}}}],["possibleoverflowitems",{"_index":478,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["prepare",{"_index":538,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["preparemenuitems",{"_index":540,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["private",{"_index":55,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["process",{"_index":417,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["promise",{"_index":47,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["properties",{"_index":385,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["property",{"_index":165,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["protected",{"_index":458,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["provide",{"_index":288,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["provider/async",{"_index":249,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["provider/overflow.control",{"_index":177,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{}}}],["providers",{"_index":593,"title":{},"body":{"modules/ResponsiveMenuModule.html":{},"index.html":{}}}],["public",{"_index":22,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["push",{"_index":559,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["pushed",{"_index":548,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["put",{"_index":504,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["querylist",{"_index":427,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["reached",{"_index":503,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["read",{"_index":457,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["registers",{"_index":74,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{}}}],["remove",{"_index":89,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["removecontent(nodes",{"_index":273,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["removed",{"_index":238,"title":{},"body":{"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["render",{"_index":236,"title":{},"body":{"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["render(width",{"_index":506,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["rendercontent(nodes",{"_index":266,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["rendered",{"_index":79,"title":{},"body":{"directives/MenuItemDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["renderer",{"_index":96,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["renderer2",{"_index":97,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["rendering",{"_index":84,"title":{},"body":{"directives/MenuItemDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["renders",{"_index":218,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["required",{"_index":142,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["rerender",{"_index":421,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["reserved",{"_index":481,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["reservedwidth",{"_index":482,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["reset",{"_index":600,"title":{},"body":{"modules/ResponsiveMenuModule.html":{},"index.html":{}}}],["resizable",{"_index":642,"title":{},"body":{"dependencies.html":{}}}],["responsive",{"_index":76,"title":{},"body":{"directives/MenuItemDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["responsivemenu",{"_index":223,"title":{},"body":{"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{},"dependencies.html":{}}}],["responsivemenu.module.ts",{"_index":602,"title":{},"body":{"modules/ResponsiveMenuModule.html":{}}}],["responsivemenu/components/responsive",{"_index":376,"title":{},"body":{"components/ResponsiveMenuComponent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["responsivemenu/directives/menu",{"_index":72,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"coverage.html":{}}}],["responsivemenu/directives/overflow.directive.ts",{"_index":217,"title":{},"body":{"directives/OverflowContentDirective.html":{},"coverage.html":{}}}],["responsivemenu/directives/overflow.directive.ts:36",{"_index":243,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["responsivemenu/directives/overflow.directive.ts:42",{"_index":239,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["responsivemenu/directives/overflow.directive.ts:50",{"_index":241,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["responsivemenu/directives/overflow.directive.ts:56",{"_index":234,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["responsivemenu/directives/overflow.directive.ts:58",{"_index":232,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["responsivemenu/directives/overflow.directive.ts:67",{"_index":245,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["responsivemenu/model/overflow.model.ts",{"_index":357,"title":{},"body":{"classes/OverflowModel.html":{},"coverage.html":{}}}],["responsivemenu/model/overflow.model.ts:16",{"_index":366,"title":{},"body":{"classes/OverflowModel.html":{}}}],["responsivemenu/model/overflow.model.ts:23",{"_index":364,"title":{},"body":{"classes/OverflowModel.html":{}}}],["responsivemenu/model/overflow.model.ts:30",{"_index":361,"title":{},"body":{"classes/OverflowModel.html":{}}}],["responsivemenu/ngx",{"_index":601,"title":{},"body":{"modules/ResponsiveMenuModule.html":{}}}],["responsivemenu/provider/async",{"_index":7,"title":{},"body":{"classes/AsyncEvent.html":{},"coverage.html":{}}}],["responsivemenu/provider/overflow.control.ts",{"_index":279,"title":{},"body":{"injectables/OverflowControl.html":{},"coverage.html":{}}}],["responsivemenu/provider/overflow.control.ts:100",{"_index":317,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["responsivemenu/provider/overflow.control.ts:108",{"_index":321,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["responsivemenu/provider/overflow.control.ts:119",{"_index":320,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["responsivemenu/provider/overflow.control.ts:129",{"_index":316,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["responsivemenu/provider/overflow.control.ts:68",{"_index":325,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["responsivemenu/provider/overflow.control.ts:75",{"_index":331,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["responsivemenu/provider/overflow.control.ts:82",{"_index":337,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["responsivemenu/provider/overflow.control.ts:84",{"_index":315,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["responsivemenu/provider/overflow.control.ts:93",{"_index":339,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["responsivemenucomponent",{"_index":372,"title":{"components/ResponsiveMenuComponent.html":{}},"body":{"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"coverage.html":{},"index.html":{}}}],["responsivemenuitem",{"_index":379,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["responsivemenumodule",{"_index":589,"title":{"modules/ResponsiveMenuModule.html":{}},"body":{"modules/ResponsiveMenuModule.html":{},"index.html":{},"modules.html":{}}}],["responsivemenutoggle",{"_index":380,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["result",{"_index":66,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{}}}],["results",{"_index":68,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{}}}],["return",{"_index":59,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["returns",{"_index":42,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["retursn",{"_index":318,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["right",{"_index":208,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{},"miscellaneous/enumerations.html":{}}}],["root",{"_index":133,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["row",{"_index":572,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["rxjs",{"_index":53,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":179,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["selector",{"_index":86,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["service",{"_index":284,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["set",{"_index":108,"title":{},"body":{"directives/MenuItemDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["setcustomtogglebutton(btn",{"_index":443,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["setdefaulttogglebtn(btn",{"_index":433,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["setdisplay(hidden",{"_index":199,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["setforceoverflow(forced",{"_index":324,"title":{},"body":{"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["setitems(items",{"_index":365,"title":{},"body":{"classes/OverflowModel.html":{}}}],["setvisible(hidden",{"_index":196,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["shared",{"_index":283,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["show",{"_index":141,"title":{},"body":{"directives/MenuToggleDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["show(soft",{"_index":162,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["showmax",{"_index":391,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["shown",{"_index":334,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["shrink",{"_index":577,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["smaller",{"_index":476,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["soft",{"_index":164,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["something",{"_index":431,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{}}}],["state",{"_index":50,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["statements",{"_index":613,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":435,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["string",{"_index":404,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["style",{"_index":201,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["styles",{"_index":374,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["styleurls",{"_index":302,"title":{},"body":{"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["sub1",{"_index":299,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["sub2",{"_index":307,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["sub_1.component.html",{"_index":301,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["sub_1.component.scss",{"_index":303,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["sub_2.component.html",{"_index":308,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["sub_2.component.scss",{"_index":309,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["subcomponent1",{"_index":305,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["subcomponent2",{"_index":310,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["subject",{"_index":52,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["subscribe",{"_index":186,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["subscribe((items",{"_index":259,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["support",{"_index":666,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":667,"title":{},"body":{"modules.html":{}}}],["table",{"_index":627,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":626,"title":{},"body":{"coverage.html":{}}}],["takeuntil",{"_index":178,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["takeuntil(this.isdestroyed",{"_index":255,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["template",{"_index":373,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["templateurl",{"_index":300,"title":{},"body":{"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["temporary",{"_index":463,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.afterremove.emit",{"_index":276,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["this.afterrender.emit",{"_index":272,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["this.aligntoggle",{"_index":556,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.beforeremove.emit(event",{"_index":275,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["this.beforeremove.observers.length",{"_index":274,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["this.beforerender.emit(event",{"_index":268,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["this.beforerender.observers.length",{"_index":267,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["this.buttonpane.nativeelement",{"_index":489,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.calchostwidth",{"_index":509,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.changedetector.detectchanges",{"_index":500,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.clearview",{"_index":523,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.close",{"_index":354,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["this.complete",{"_index":62,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["this.doasyncoperation",{"_index":36,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["this.el",{"_index":120,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["this.el.nativeelement",{"_index":131,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{}}}],["this.el.nativeelement.getboundingclientrect().width",{"_index":200,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["this.event",{"_index":56,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["this.event$.complete",{"_index":65,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["this.event$.next(false",{"_index":63,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["this.event$.next(true",{"_index":61,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["this.event$.topromise",{"_index":60,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["this.finalizemenuitems",{"_index":534,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.finalizerenderprocess",{"_index":516,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.forced",{"_index":348,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["this.hide$.asobservable",{"_index":350,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["this.hide$.next(this.overflowmodel.items",{"_index":356,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["this.initrenderprocess",{"_index":507,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.iscustombutton",{"_index":461,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.isdestroyed",{"_index":182,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{}}}],["this.isdestroyed$.next",{"_index":484,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.isdestroyed.complete",{"_index":195,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{}}}],["this.isdestroyed.next(true",{"_index":194,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{}}}],["this.isforcedoverflow",{"_index":454,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.items.length",{"_index":371,"title":{},"body":{"classes/OverflowModel.html":{}}}],["this.maxwidth",{"_index":508,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.menuitem",{"_index":121,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["this.menuitems.changes",{"_index":486,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.menuitems.foreach((menuitem",{"_index":498,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.menuitems.reduce((itemcollection",{"_index":541,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.menuitems.toarray().reduce((overflowitems",{"_index":554,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.openoverflow",{"_index":187,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["this.overflowctrl.close",{"_index":214,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["this.overflowctrl.data.items",{"_index":525,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.overflowctrl.forceoverflow",{"_index":455,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.overflowctrl.hide",{"_index":261,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["this.overflowctrl.isopen",{"_index":213,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["this.overflowctrl.open",{"_index":215,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{}}}],["this.overflowctrl.show",{"_index":253,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["this.overflowctrl.update",{"_index":493,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.overflowitems",{"_index":370,"title":{},"body":{"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["this.overflowitems.length",{"_index":552,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.overflowitems.push",{"_index":545,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.overflowitems.push(item",{"_index":515,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.overflowmodel",{"_index":351,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["this.overflowmodel.items.length",{"_index":353,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["this.possibleoverflowitems",{"_index":524,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.possibleoverflowitems.concat(this.overflowitems",{"_index":553,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.preparemenuitems",{"_index":510,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.removecontent(items",{"_index":262,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["this.render",{"_index":491,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.render(width",{"_index":492,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.rendercontent(items",{"_index":260,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["this.rendercontent(this.overflowctrl.data.items",{"_index":252,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["this.rendered",{"_index":352,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["this.rendered.emit",{"_index":537,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.renderer.appendchild",{"_index":488,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.renderer.appendchild(parent",{"_index":132,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["this.renderer.insertbefore(parent",{"_index":130,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["this.renderer.parentnode",{"_index":134,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["this.renderer.removechild",{"_index":135,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["this.renderer.setstyle(this.el.nativeelement",{"_index":197,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["this.reservedwidth",{"_index":527,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.setdisplay",{"_index":189,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["this.setdisplay(true",{"_index":191,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["this.setvisible",{"_index":190,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["this.setvisible(soft",{"_index":188,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["this.show$.asobservable",{"_index":349,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["this.show$.next(this.overflowmodel.items",{"_index":355,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["this.showmax",{"_index":512,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.togglebtn",{"_index":459,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.togglebtn.hide",{"_index":529,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.togglebtn.nativeelement",{"_index":490,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.togglebtn.show",{"_index":536,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.togglebtn.show(true",{"_index":526,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.togglebtn.width",{"_index":528,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.update",{"_index":487,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.validatesize(item",{"_index":514,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.viewref",{"_index":250,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["through",{"_index":11,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["tmpbuttonpane",{"_index":467,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["together",{"_index":565,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["toggle",{"_index":138,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{},"miscellaneous/enumerations.html":{}}}],["toggle.directive",{"_index":450,"title":{},"body":{"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{}}}],["toggle.directive.ts",{"_index":137,"title":{},"body":{"directives/MenuToggleDirective.html":{},"coverage.html":{}}}],["toggle.directive.ts:27",{"_index":154,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["toggle.directive.ts:46",{"_index":169,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["toggle.directive.ts:53",{"_index":163,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["toggle.directive.ts:61",{"_index":159,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["toggle.directive.ts:85",{"_index":172,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["togglebtn",{"_index":472,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["tree",{"_index":291,"title":{},"body":{"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["true",{"_index":106,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["try",{"_index":34,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["tslib",{"_index":658,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":101,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"coverage.html":{}}}],["u",{"_index":287,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["unless",{"_index":322,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["until",{"_index":437,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["up",{"_index":518,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["update",{"_index":312,"title":{},"body":{"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["update(width",{"_index":418,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["use",{"_index":282,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["used",{"_index":359,"title":{},"body":{"classes/OverflowModel.html":{}}}],["usedsize",{"_index":563,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["validate",{"_index":561,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["validatesize",{"_index":562,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["value",{"_index":105,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{},"miscellaneous/enumerations.html":{}}}],["values",{"_index":403,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["var",{"_index":583,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["view",{"_index":229,"title":{},"body":{"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["viewchild",{"_index":448,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["viewchild(menutoggledirective",{"_index":456,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["viewcontainerref",{"_index":231,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["viewproviders",{"_index":304,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["viewref",{"_index":233,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["views",{"_index":519,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["visibility",{"_index":198,"title":{},"body":{"directives/MenuToggleDirective.html":{},"injectables/OverflowControl.html":{}}}],["visibilty",{"_index":166,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["visible",{"_index":91,"title":{},"body":{"directives/MenuItemDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["visualization",{"_index":465,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["void",{"_index":43,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["wait",{"_index":436,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["want",{"_index":209,"title":{},"body":{"directives/MenuToggleDirective.html":{},"injectables/OverflowControl.html":{}}}],["width",{"_index":151,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["wrap",{"_index":575,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["yes",{"_index":423,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["zone.js",{"_index":660,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":599,"title":{},"body":{"modules/ResponsiveMenuModule.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AsyncEvent.html":{"url":"classes/AsyncEvent.html","title":"class - AsyncEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AsyncEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-responsivemenu/provider/async-event.ts\n        \n\n            \n                Description\n            \n            \n                AsyncEvent which will emits through EventEmitter\nso we can do some (async) operations before we\nlet pass / cancel the event.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cancel\n                            \n                            \n                                    Public\n                                done\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    completed\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-responsivemenu/provider/async-event.ts:11\n                            \n                        \n\n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            cancel\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    cancel()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-responsivemenu/provider/async-event.ts:54\n                \n            \n\n\n            \n                \n                    should be called to continue event\n\n\n                    \n                        Example :\n                        \n                            public async onAsyncHook(event: AsyncEvent) {\n     try {\n         await this.doAsyncOperation();\n         event.done();\n     } catch (fatalError: Error) {\n         event.cancel();\n     }\n}\n                        \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            done\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    done()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-responsivemenu/provider/async-event.ts:35\n                \n            \n\n\n            \n                \n                    should be called to continue event\n\n\n                    \n                        Example :\n                        \n                            public async onAsyncHook(event: AsyncEvent) {\n     await this.doAsyncOperation();\n     event.done();\n}\n                        \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        completed\n                    \n                \n\n                \n                    \n                        getcompleted()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/provider/async-event.ts:21\n                                \n                            \n                    \n                        \n                                returns promise which holds current state from event\n\n\n                                \n                                \n                                \n                                    Returns :     Promise\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Subject } from \"rxjs\";\n\n/**\n * AsyncEvent which will emits through EventEmitter\n * so we can do some (async) operations before we\n * let pass / cancel the event.\n *\n */\nexport class AsyncEvent {\n\n    private event$: Subject;\n\n    public constructor() {\n        this.event$ = new Subject();\n    }\n\n    /**\n     * returns promise which holds current state from event\n     * @internal\n     */\n    public get completed(): Promise {\n        return this.event$.toPromise();\n    }\n\n    /**\n     * should be called to continue event\n     *\n     * @example\n     *\n     * public async onAsyncHook(event: AsyncEvent) {\n     *     await this.doAsyncOperation();\n     *     event.done();\n     * }\n     */\n    public done() {\n        this.event$.next(true);\n        this.complete();\n    }\n\n    /**\n     * should be called to continue event\n     *\n     * @example\n     *\n     * public async onAsyncHook(event: AsyncEvent) {\n     *     try {\n     *         await this.doAsyncOperation();\n     *         event.done();\n     *     } catch (fatalError: Error) {\n     *         event.cancel();\n     *     }\n     * }\n     */\n    public cancel() {\n        this.event$.next(false);\n        this.complete();\n    }\n\n    private complete() {\n        this.event$.complete();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/MenuItemDirective.html":{"url":"directives/MenuItemDirective.html","title":"directive - MenuItemDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  MenuItemDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-responsivemenu/directives/menu-item.directive.ts\n        \n\n            \n                Description\n            \n            \n                registers item as responsive menu item, all other content will not rendered\n\n            \n\n\n            \n                Example\n            \n            \n                        \n                            \n     Button 1\n     Button 2\n     Button 3\n     \n     Not rendering\n\n                        \n            \n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxResponsiveMenuItem]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addTo\n                            \n                            \n                                    Public\n                                remove\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                visible\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                class.responsive-menu--item\n                            \n                        \n                    \n                \n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(el: ElementRef, renderer: Renderer2)\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-responsivemenu/directives/menu-item.directive.ts:29\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        el\n                                                  \n                                                        \n                                                                        ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                        Renderer2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        visible\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/directives/menu-item.directive.ts:26\n                            \n                        \n                \n                    \n                        if set to false menu item will allways rendered to overflow\ndefault false\n\n                    \n                \n            \n        \n\n\n            \n    HostBindings        \n            \n                \n                    \n                        \n                        \n                            \n                            class.responsive-menu--item\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/directives/menu-item.directive.ts:29\n                            \n                        \n\n\n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addTo\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addTo(parent: HTMLElement, before: HTMLElement)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-responsivemenu/directives/menu-item.directive.ts:45\n                \n            \n\n\n            \n                \n                    add item to parent element\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    parent\n                                    \n                                            HTMLElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    before\n                                    \n                                            HTMLElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        null\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            const parent: ElementRef = this.el;\nconst item: MenuItemDirective = this.menuItem;\nitem.addTo(this.el.nativeElement);\n                        \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-responsivemenu/directives/menu-item.directive.ts:61\n                \n            \n\n\n            \n                \n                    remove item from parent children\n\n\n                    \n                        Example :\n                        \n                            const item: MenuItemDirective = this.menuItem;\nitem.remove();\n                        \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, ElementRef, HostBinding, Input, Renderer2 } from \"@angular/core\";\n\n/**\n * registers item as responsive menu item, all other content will not rendered\n *\n * @example\n *\n * \n *     Button 1\n *     Button 2\n *     Button 3\n *     \n *     Not rendering\n * \n */\n@Directive( {\n    selector: \"[ngxResponsiveMenuItem]\"\n} )\nexport class MenuItemDirective  {\n\n    /**\n     * if set to false menu item will allways rendered to overflow\n     * default false\n     */\n    @Input()\n    public visible = true;\n\n    @HostBinding( \"class.responsive-menu--item\" )\n    public className = true;\n\n    constructor(\n        private el: ElementRef,\n        private renderer: Renderer2\n    ) { }\n\n    /**\n     * add item to parent element\n     *\n     * @example\n     *\n     * const parent: ElementRef = this.el;\n     * const item: MenuItemDirective = this.menuItem;\n     * item.addTo(this.el.nativeElement);\n     */\n    public addTo( parent: HTMLElement, before: HTMLElement = null ) {\n        if (before) {\n            this.renderer.insertBefore(parent, this.el.nativeElement, before);\n            return;\n        }\n        this.renderer.appendChild(parent, this.el.nativeElement);\n    }\n\n    /**\n     * remove item from parent children\n     *\n     * @example\n     *\n     * const item: MenuItemDirective = this.menuItem;\n     * item.remove();\n     */\n    public remove() {\n        const root: HTMLElement = this.renderer.parentNode( this.el.nativeElement );\n        this.renderer.removeChild( root, this.el.nativeElement );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/MenuToggleDirective.html":{"url":"directives/MenuToggleDirective.html","title":"directive - MenuToggleDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  MenuToggleDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-responsivemenu/directives/menu-toggle.directive.ts\n        \n\n            \n                Description\n            \n            \n                toggle button which automatically registers on click event an show overflow if required\n\n            \n\n            \n                Implements\n            \n            \n                            AfterViewInit\n                            OnDestroy\n            \n\n            \n                Example\n            \n            \n                        \n                            \n     ...\n     Custom Toggle Button\n\n                        \n            \n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxResponsiveMenuToggle]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                hide\n                            \n                            \n                                    Public\n                                show\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                class.more\n                            \n                        \n                    \n                \n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    nativeElement\n                                \n                                \n                                    width\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(overflowCtrl: OverflowControl, renderer: Renderer2, el: ElementRef)\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-responsivemenu/directives/menu-toggle.directive.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        overflowCtrl\n                                                  \n                                                        \n                                                                        OverflowControl\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                        Renderer2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        el\n                                                  \n                                                        \n                                                                        ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n            \n    HostBindings        \n            \n                \n                    \n                        \n                        \n                            \n                            class.more\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/directives/menu-toggle.directive.ts:27\n                            \n                        \n\n                \n                    \n                        add host css class more\n\n                    \n                \n\n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            hide\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hide()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-responsivemenu/directives/menu-toggle.directive.ts:61\n                \n            \n\n\n            \n                \n                    hide button (display none)\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            show\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    show(soft)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-responsivemenu/directives/menu-toggle.directive.ts:53\n                \n            \n\n\n            \n                \n                    display button if soft is true button has css property visibilty: hidden\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    soft\n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        nativeElement\n                    \n                \n\n                \n                    \n                        getnativeElement()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/directives/menu-toggle.directive.ts:46\n                                \n                            \n                    \n                        \n                                return native element from more button\n\n\n                                \n                                    Returns :     HTMLElement\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        width\n                    \n                \n\n                \n                    \n                        getwidth()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/directives/menu-toggle.directive.ts:85\n                                \n                            \n                    \n                        \n                                get current width of button includes margin\n\n\n                                \n                                    Returns :         number\n\n                                \n                        \n                    \n\n            \n        \n\n\n    \n\n\n    \n        import { Directive, ElementRef, AfterViewInit, OnDestroy, Renderer2, HostBinding } from \"@angular/core\";\nimport { fromEvent, Subject } from \"rxjs\";\nimport { OverflowControl } from \"../provider/overflow.control\";\nimport { takeUntil } from \"rxjs/operators\";\n\n/**\n * toggle button which automatically registers on click event an show overflow if required\n *\n * @example\n *\n * \n *     ...\n *     Custom Toggle Button\n * \n */\n@Directive( {\n    selector: \"[ngxResponsiveMenuToggle]\"\n} )\nexport class MenuToggleDirective implements AfterViewInit, OnDestroy {\n\n    private isDestroyed: Subject;\n\n    /**\n     * add host css class more\n     */\n    @HostBinding(\"class.more\")\n    public className = true;\n\n    constructor(\n        private overflowCtrl: OverflowControl,\n        private renderer: Renderer2,\n        private el: ElementRef,\n    ) {\n        this.isDestroyed = new Subject();\n    }\n\n    public ngAfterViewInit() {\n        fromEvent(this.el.nativeElement, \"click\")\n            .pipe(takeUntil(this.isDestroyed))\n            .subscribe(() => this.openOverflow());\n    }\n\n    /**\n     * return native element from more button\n     */\n    public get nativeElement(): HTMLElement {\n        return this.el.nativeElement;\n    }\n\n    /**\n     * display button if soft is true button has css property visibilty: hidden\n     */\n    public show(soft = false) {\n        this.setVisible(soft);\n        this.setDisplay();\n    }\n\n    /**\n     * hide button (display none)\n     */\n    public hide() {\n        this.setVisible();\n        this.setDisplay(true);\n    }\n\n    /**\n     * destroys button\n     */\n    public ngOnDestroy() {\n        this.isDestroyed.next(true);\n        this.isDestroyed.complete();\n    }\n\n    private setVisible(hidden = false) {\n        this.renderer.setStyle(this.el.nativeElement, \"visibility\", hidden ? \"hidden\" : null);\n    }\n\n    private setDisplay(hidden = false) {\n        this.renderer.setStyle(this.el.nativeElement, \"display\", hidden ? \"none\" : null);\n    }\n\n    /**\n     * get current width of button includes margin\n     */\n    public get width(): number {\n\n        const width = this.el.nativeElement.getBoundingClientRect().width;\n        const style = getComputedStyle( this.el.nativeElement );\n\n        const marginLeft  = parseInt(style.getPropertyValue(\"margin-left\") , 10);\n        const marginRight = parseInt(style.getPropertyValue(\"margin-right\"), 10);\n\n        return width + marginLeft + marginRight;\n    }\n\n    /**\n     * if we click on the button we want to open the overlay\n     */\n    private openOverflow() {\n        this.overflowCtrl.isOpen() ? this.overflowCtrl.close() : this.overflowCtrl.open();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/OverflowContentDirective.html":{"url":"directives/OverflowContentDirective.html","title":"directive - OverflowContentDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  OverflowContentDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-responsivemenu/directives/overflow.directive.ts\n        \n\n            \n                Description\n            \n            \n                renders overflow content if overflow items exists\n\n            \n\n            \n                Implements\n            \n            \n                            OnInit\n                            OnDestroy\n            \n\n            \n                Example\n            \n            \n                        \n                            \n   \n   \n     \n   \n\n\n\n   \n   \n\n                        \n            \n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        ngx-responsivemenu-overflow\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n\n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                afterRemove\n                            \n                            \n                                afterRender\n                            \n                            \n                                beforeRemove\n                            \n                            \n                                beforeRender\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    view\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(viewRef: ViewContainerRef, overflowCtrl: OverflowControl)\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-responsivemenu/directives/overflow.directive.ts:58\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        viewRef\n                                                  \n                                                        \n                                                                        ViewContainerRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        overflowCtrl\n                                                  \n                                                        \n                                                                        OverflowControl\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    Outputs\n        \n            \n                \n                    \n                        \n                        afterRemove\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/directives/overflow.directive.ts:56\n                            \n                        \n                \n                    \n                        overflow container render hook after content has been removed.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        afterRender\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/directives/overflow.directive.ts:42\n                            \n                        \n                \n                    \n                        overflow container render hook after content has been applied.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        beforeRemove\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/directives/overflow.directive.ts:50\n                            \n                        \n                \n                    \n                        overflow container render hook before content will be removed.\nEmits AsyncEvent which should notfied with $event.done() after\nall operations are completed\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        beforeRender\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/directives/overflow.directive.ts:36\n                            \n                        \n                \n                    \n                        overflow container render hook before content will be applied.\nEmits AsyncEvent which should notfied with $event.done() after\nall operations are completed\n\n                    \n                \n            \n        \n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        view\n                    \n                \n\n                \n                    \n                        getview()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/directives/overflow.directive.ts:67\n                                \n                            \n\n            \n        \n\n\n    \n\n\n    \n        import { Directive, ViewContainerRef, OnInit, OnDestroy, Output, EventEmitter } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil, filter } from \"rxjs/operators\";\nimport { OverflowControl } from \"../provider/overflow.control\";\nimport { MenuItemDirective } from \"./menu-item.directive\";\nimport { AsyncEvent } from \"../provider/async-event\";\n\n/**\n * renders overflow content if overflow items exists\n *\n * @example\n *\n * \n *   \n *   \n *     \n *   \n * \n *\n * \n *   \n *   \n * \n */\n@Directive( {\n    selector: \"ngx-responsivemenu-overflow\",\n})\nexport class OverflowContentDirective implements OnInit, OnDestroy {\n\n    /**\n     * overflow container render hook before content will be applied.\n     * Emits AsyncEvent which should notfied with $event.done() after\n     * all operations are completed\n     */\n    @Output()\n    public beforeRender: EventEmitter = new EventEmitter();\n\n    /**\n     * overflow container render hook after content has been applied.\n     */\n    @Output()\n    public afterRender: EventEmitter = new EventEmitter();\n\n    /**\n     * overflow container render hook before content will be removed.\n     * Emits AsyncEvent which should notfied with $event.done() after\n     * all operations are completed\n     */\n    @Output()\n    public beforeRemove: EventEmitter = new EventEmitter();\n\n    /**\n     * overflow container render hook after content has been removed.\n     */\n    @Output()\n    public afterRemove: EventEmitter = new EventEmitter();\n\n    private isDestroyed: Subject;\n\n    constructor(\n        private viewRef: ViewContainerRef,\n        private overflowCtrl: OverflowControl\n    ) {\n        this.isDestroyed = new Subject();\n    }\n\n    public get view(): ViewContainerRef {\n        return this.viewRef;\n    }\n\n    public ngOnDestroy() {\n        this.isDestroyed.next(true);\n        this.isDestroyed.complete();\n    }\n\n    public ngOnInit() {\n\n        if (this.overflowCtrl.open) {\n            this.renderContent(this.overflowCtrl.data.items);\n        }\n\n        this.overflowCtrl.show\n            .pipe(\n                takeUntil(this.isDestroyed),\n                filter((items) => items.length > 0),\n            ).subscribe((items) => this.renderContent(items));\n\n        this.overflowCtrl.hide\n            .pipe(takeUntil(this.isDestroyed))\n            .subscribe((items) => this.removeContent(items));\n    }\n\n    /**\n     * render nodes into host view, calls beforeRender and afterRender hooks\n     */\n    private async renderContent(nodes: MenuItemDirective[]) {\n        if (this.beforeRender.observers.length) {\n            const event = new AsyncEvent();\n            this.beforeRender.emit(event);\n            await event.completed;\n        }\n        nodes.forEach((item) => item.addTo(this.viewRef.element.nativeElement));\n        this.afterRender.emit();\n    }\n\n    /**\n     * remove nodes from host view, calls beforeRemove, afterRemove\n     */\n    private async removeContent(nodes: MenuItemDirective[]) {\n        if (this.beforeRemove.observers.length) {\n            const event = new AsyncEvent();\n            this.beforeRemove.emit(event);\n            await event.completed;\n        }\n        nodes.forEach((item) => item.remove());\n        this.afterRemove.emit();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OverflowControl.html":{"url":"injectables/OverflowControl.html","title":"injectable - OverflowControl","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  OverflowControl\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-responsivemenu/provider/overflow.control.ts\n        \n\n            \n                Description\n            \n            \n                overflow control to open / close overflow.\nEvery ResponsiveMenu will use this shared service. If you want display multiple\nresponsive menu components u should provide an own OverflowControl service in dependcy injection tree.\nIn this case both components got his own OverflowControl and dont affect each other.\n\n            \n\n\n            \n                Example\n            \n            \n                        \n                            Component({\n     selector: \"app-sub1-component\",\n     templateUrl: \"sub_1.component.html\",\n     styleUrls: [\"./sub_1.component.scss\"],\n     viewProviders: [OverflowControl]\n})\nexport class SubComponent1 implements AfterViewInit, AfterContentInit, OnDestroy {\n     ...\n}\n\nComponent({\n     selector: \"app-sub2-component\",\n     templateUrl: \"sub_2.component.html\",\n     styleUrls: [\"./sub_2.component.scss\"],\n     viewProviders: [OverflowControl]\n})\nexport class SubComponent2 implements AfterViewInit, AfterContentInit, OnDestroy {\n     ...\n}\n                        \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                close\n                            \n                            \n                                    Public\n                                isOpen\n                            \n                            \n                                    Public\n                                open\n                            \n                            \n                                    Public\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    forceOverflow\n                                \n                                \n                                    show\n                                \n                                \n                                    hide\n                                \n                                \n                                    data\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-responsivemenu/provider/overflow.control.ts:84\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            close\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    close()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-responsivemenu/provider/overflow.control.ts:129\n                \n            \n\n\n            \n                \n                    close overflow content\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isOpen\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isOpen()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-responsivemenu/provider/overflow.control.ts:100\n                \n            \n\n\n            \n                \n                    retursn true if overflow container is rendered\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            open\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    open()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-responsivemenu/provider/overflow.control.ts:119\n                \n            \n\n\n            \n                \n                    show overflow content\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-responsivemenu/provider/overflow.control.ts:108\n                \n            \n\n\n            \n                \n                    update overflow visibility, if no overflow items exists it will\nclose overflow automatically, unless overflow is forced\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        forceOverflow\n                    \n                \n\n\n                \n                    \n                        setforceOverflow(forced: boolean)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/provider/overflow.control.ts:68\n                                \n                            \n                    \n                        \n                                set force overflow, if set to true this will allways emits show\nfor overflow conainer even if no overflow items exits.\ndefault is set to false\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            forced\n                                                    \n                                                            \n                                                                            boolean\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        show\n                    \n                \n\n                \n                    \n                        getshow()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/provider/overflow.control.ts:75\n                                \n                            \n                    \n                        \n                                returns oberservable to get notified overflow should be shown\n\n\n                                \n                                    Returns :     Observable\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        hide\n                    \n                \n\n                \n                    \n                        gethide()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/provider/overflow.control.ts:82\n                                \n                            \n                    \n                        \n                                returns oberservable to get notified overflow should be hide\n\n\n                                \n                                    Returns :     Observable\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n\n                \n                    \n                        getdata()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/provider/overflow.control.ts:93\n                                \n                            \n                    \n                        \n                                returns overflow data model\n\n\n                                \n                                    Returns :         OverflowModel\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { OverflowModel } from \"../model/overflow.model\";\nimport { Injectable } from \"@angular/core\";\nimport { MenuItemDirective } from \"../directives/menu-item.directive\";\nimport { Observable, Subject } from \"rxjs\";\n\n/**\n * overflow control to open / close overflow.\n *\n * Every ResponsiveMenu will use this shared service. If you want display multiple\n * responsive menu components u should provide an own OverflowControl service in dependcy injection tree.\n * In this case both components got his own OverflowControl and dont affect each other.\n *\n * @example\n *\n * Component({\n *     selector: \"app-sub1-component\",\n *     templateUrl: \"sub_1.component.html\",\n *     styleUrls: [\"./sub_1.component.scss\"],\n *     viewProviders: [OverflowControl]\n * })\n * export class SubComponent1 implements AfterViewInit, AfterContentInit, OnDestroy {\n *     ...\n * }\n *\n * Component({\n *     selector: \"app-sub2-component\",\n *     templateUrl: \"sub_2.component.html\",\n *     styleUrls: [\"./sub_2.component.scss\"],\n *     viewProviders: [OverflowControl]\n * })\n * export class SubComponent2 implements AfterViewInit, AfterContentInit, OnDestroy {\n *     ...\n * }\n */\n@Injectable()\nexport class OverflowControl {\n\n    private rendered = false;\n\n    /**\n     * data model\n     */\n    private overflowModel: OverflowModel;\n\n    /**\n     * notify all observers if overflow should be rendered\n     * but only if overflow items exists\n     */\n    private show$: Subject = new Subject();\n\n    /**\n     * notify all observers if overflow should be removed\n     */\n    private hide$: Subject = new Subject();\n\n    /**\n     * if true show$ will allways notify oberservers even if no\n     * items exists\n     */\n    private forced: boolean;\n\n    /**\n     * set force overflow, if set to true this will allways emits show\n     * for overflow conainer even if no overflow items exits.\n     *\n     * default is set to false\n     */\n    public set forceOverflow(forced: boolean) {\n        this.forced = forced;\n    }\n\n    /**\n     * returns oberservable to get notified overflow should be shown\n     */\n    public get show(): Observable {\n        return this.show$.asObservable();\n    }\n\n    /**\n     * returns oberservable to get notified overflow should be hide\n     */\n    public get hide(): Observable {\n        return this.hide$.asObservable();\n    }\n\n    public constructor() {\n        this.overflowModel = new OverflowModel();\n    }\n\n    /**\n     * returns overflow data model\n     */\n    public get data(): OverflowModel {\n        return this.overflowModel;\n    }\n\n    /**\n     * retursn true if overflow container is rendered\n     */\n    public isOpen(): boolean {\n        return this.rendered;\n    }\n\n    /**\n     * update overflow visibility, if no overflow items exists it will\n     * close overflow automatically, unless overflow is forced\n     */\n    public update() {\n        if (this.rendered) {\n            this.overflowModel.items.length === 0 && !this.forced\n                ? this.close()\n                : this.show$.next(this.overflowModel.items);\n        }\n    }\n\n    /**\n     * show overflow content\n     */\n    public open() {\n        if (!this.rendered && (this.forced || this.overflowModel.items.length)) {\n            this.rendered = true;\n            this.show$.next(this.overflowModel.items);\n        }\n    }\n\n    /**\n     * close overflow content\n     */\n    public close() {\n        if (this.rendered) {\n            this.rendered = false;\n            this.hide$.next(this.overflowModel.items);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OverflowModel.html":{"url":"classes/OverflowModel.html","title":"class - OverflowModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OverflowModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-responsivemenu/model/overflow.model.ts\n        \n\n            \n                Description\n            \n            \n                holds informations which are used from overflow control\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isOverflow\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    items\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isOverflow\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isOverflow()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-responsivemenu/model/overflow.model.ts:30\n                \n            \n\n\n            \n                \n                    returns true if overflow is not empty\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        items\n                    \n                \n\n                \n                    \n                        getitems()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/model/overflow.model.ts:23\n                                \n                            \n                    \n                        \n                                get items which should rendered to overflow\n\n\n                                \n                                    Returns :     MenuItemDirective[]\n\n                                \n                        \n                    \n\n                \n                    \n                        setitems(items: [])\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/model/overflow.model.ts:16\n                                \n                            \n                    \n                        \n                                set items which should rendered to overflow\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            items\n                                                    \n                                                            \n                                                                        []\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import { MenuItemDirective } from \"../directives/menu-item.directive\";\n\n/**\n * holds informations which are used from overflow control\n */\nexport class OverflowModel {\n\n    /**\n     * hold all overflow items\n     */\n    private overflowItems: MenuItemDirective[] = [];\n\n    /**\n     * set items which should rendered to overflow\n     */\n    public set items(items: MenuItemDirective[]) {\n        this.overflowItems = items;\n    }\n\n    /**\n     * get items which should rendered to overflow\n     */\n    public get items(): MenuItemDirective[] {\n        return this.overflowItems;\n    }\n\n    /**\n     * returns true if overflow is not empty\n     */\n    public isOverflow() {\n        return this.items.length > 0;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ResponsiveMenuComponent.html":{"url":"components/ResponsiveMenuComponent.html","title":"component - ResponsiveMenuComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ResponsiveMenuComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    lib/ngx-responsivemenu/components/responsive-menu.component.ts\n\n\n    \n        Description\n    \n    \n        Responsive menu component, all items which are passed should be from type\nResponsiveMenuItem or ResponsiveMenuToggle. All other items will never rendered\ninto dom\n\n    \n\n\n    \n        Implements\n    \n    \n                    AfterViewInit\n                    AfterContentInit\n                    OnDestroy\n    \n\n    \n        Example\n    \n    \n                \n                    \nBtn\n\n                \n    \n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ngx-responsivemenu\n            \n\n            \n                styleUrls\n                ./responsive-menu.component.scss\n            \n\n\n\n            \n                templateUrl\n                responsive-menu.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isCustomButton\n                            \n                            \n                                    Public\n                                menuItems\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                update\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                alignToggle\n                            \n                            \n                                classBtnPane\n                            \n                            \n                                customOverflow\n                            \n                            \n                                forceOverflow\n                            \n                            \n                                showMax\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                rendered\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    forceOverflow\n                                \n                                \n                                    defaultToggleBtn\n                                \n                                \n                                    customToggleButton\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(overflowCtrl: OverflowControl, renderer: Renderer2, hostEl: ElementRef, changeDetector: ChangeDetectorRef)\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-responsivemenu/components/responsive-menu.component.ts:197\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        overflowCtrl\n                                                  \n                                                        \n                                                                        OverflowControl\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                        Renderer2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hostEl\n                                                  \n                                                        \n                                                                        ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        changeDetector\n                                                  \n                                                        \n                                                                        ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        alignToggle\n                    \n                \n                \n                    \n                        Type :         BtnAlign\n\n                    \n                \n                \n                    \n                        Default value : BtnAlign.RIGHT\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/components/responsive-menu.component.ts:121\n                            \n                        \n                \n                    \n                        set position of toggle btn, possible values are left or right\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        classBtnPane\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/components/responsive-menu.component.ts:115\n                            \n                        \n                \n                    \n                        add a class for the button pane as example for bootstrap btn-group\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        customOverflow\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/components/responsive-menu.component.ts:93\n                            \n                        \n                \n                    \n                        if true content will not rendered longer in default container for overflow\ncontent and should rendered in a custom overflow container.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        forceOverflow\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/components/responsive-menu.component.ts:100\n                            \n                        \n                \n                    \n                        if true toggle button will allways be visible even if content\nfits into button pane\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        showMax\n                    \n                \n                \n                    \n                        Default value : -1\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/components/responsive-menu.component.ts:75\n                            \n                        \n                \n                    \n                        set maximal amount of items which could rendered into button pane\nall other items will automatically add to overflow container\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        rendered\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/components/responsive-menu.component.ts:127\n                            \n                        \n                \n                    \n                        emits if responsive menu has been completed rendering process\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(width?: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-responsivemenu/components/responsive-menu.component.ts:231\n                \n            \n\n\n            \n                \n                    update view, this will remove all\ncontents and rerender buttons\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    width\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            isCustomButton\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/components/responsive-menu.component.ts:60\n                            \n                        \n\n                \n                    \n                        if true default toggle button will not rendered anymore, will be set if a custom item\nhas been added to content from type MenuToggleDirective\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            menuItems\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     QueryList\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ContentChildren(MenuItemDirective)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/components/responsive-menu.component.ts:68\n                            \n                        \n\n                \n                    \n                        Get querylist for all content items from type MenuItemDirective.\nWill also subscribe to querylist to get notified something changes so we can\nrerender menu\n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        forceOverflow\n                    \n                \n\n\n                \n                    \n                        setforceOverflow(forced: boolean)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/components/responsive-menu.component.ts:100\n                                \n                            \n                    \n                        \n                                if true toggle button will allways be visible even if content\nfits into button pane\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            forced\n                                                    \n                                                            \n                                                                            boolean\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        defaultToggleBtn\n                    \n                \n\n\n                \n                    \n                        setdefaultToggleBtn(btn)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/components/responsive-menu.component.ts:135\n                                \n                            \n                    \n                        \n                                static: false wait until change detection loop has been finished in this case\nbutton el will not rendered to dom if a custom button is given but we have to wait\nuntil change detection finished before we get it\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            btn\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        customToggleButton\n                    \n                \n\n\n                \n                    \n                        setcustomToggleButton(btn)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/components/responsive-menu.component.ts:145\n                                \n                            \n                    \n                        \n                                check if custom button is defined so we dont need to render default more button\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            btn\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import {\n    AfterContentInit,\n    AfterViewInit,\n    Component,\n    ContentChildren,\n    ElementRef,\n    Input,\n    OnDestroy,\n    QueryList,\n    Renderer2,\n    ViewChild,\n    ContentChild,\n    ChangeDetectorRef,\n    Output,\n    EventEmitter,\n} from \"@angular/core\";\n\nimport { MenuItemDirective } from \"../directives/menu-item.directive\";\nimport { takeUntil } from \"rxjs/operators\";\nimport { Subject } from \"rxjs\";\nimport { OverflowControl } from \"../provider/overflow.control\";\nimport { MenuToggleDirective } from \"../directives/menu-toggle.directive\";\n\n/**\n * possible toggle button alignments\n */\nexport enum BtnAlign {\n    LEFT = \"left\",\n    RIGHT = \"right\"\n}\n\n/**\n * Responsive menu component, all items which are passed should be from type\n * ResponsiveMenuItem or ResponsiveMenuToggle. All other items will never rendered\n * into dom\n *\n * @example\n * \n *     Btn\n * \n */\n@Component( {\n    selector: \"ngx-responsivemenu\",\n    templateUrl: \"responsive-menu.component.html\",\n    styleUrls: [\"./responsive-menu.component.scss\"]\n} )\nexport class ResponsiveMenuComponent implements AfterViewInit, AfterContentInit, OnDestroy {\n\n    /**\n     * if true default toggle button will not rendered anymore, will be set if a custom item\n     * has been added to content from type MenuToggleDirective\n     *\n     * @internal\n     * @example\n     * \n     *     ...\n     *     Button\n     * \n     */\n    public isCustomButton = false;\n\n    /**\n     * Get querylist for all content items from type MenuItemDirective.\n     * Will also subscribe to querylist to get notified something changes so we can\n     * rerender menu\n     */\n    @ContentChildren(MenuItemDirective)\n    public menuItems: QueryList;\n\n    /**\n     * set maximal amount of items which could rendered into button pane\n     * all other items will automatically add to overflow container\n     */\n    @Input()\n    public showMax = -1;\n\n    /**\n     * if true content will not rendered longer in default container for overflow\n     * content and should rendered in a custom overflow container.\n     *\n     * @example\n     *\n     * \n     *   {{label}}\n     * \n     *\n     * \n     *    \n     *    \n     * \n     */\n    @Input()\n    public customOverflow = false;\n\n    /**\n     * if true toggle button will allways be visible even if content\n     * fits into button pane\n     */\n    @Input()\n    public set forceOverflow(forced: boolean) {\n        this.isForcedOverflow = forced;\n        this.overflowCtrl.forceOverflow = forced;\n    }\n\n    /**\n     * add a class for the button pane as example for bootstrap btn-group\n     *\n     * @example\n     *\n     * \n     *   {{label}}\n     * \n     */\n    @Input()\n    public classBtnPane: string;\n\n    /**\n     * set position of toggle btn, possible values are left or right\n     */\n    @Input()\n    public alignToggle: BtnAlign = BtnAlign.RIGHT;\n\n    /**\n     * emits if responsive menu has been completed rendering process\n     */\n    @Output()\n    rendered: EventEmitter = new EventEmitter();\n\n    /**\n     * static: false wait until change detection loop has been finished in this case\n     * button el will not rendered to dom if a custom button is given but we have to wait\n     * until change detection finished before we get it\n     */\n    @ViewChild(MenuToggleDirective, {read: MenuToggleDirective, static: false})\n    protected set defaultToggleBtn( btn: MenuToggleDirective ) {\n        if ( !this.toggleBtn ) {\n            this.toggleBtn = btn;\n        }\n    }\n\n    /**\n     * check if custom button is defined so we dont need to render default more button\n     */\n    @ContentChild(MenuToggleDirective, {read: MenuToggleDirective, static: true})\n    protected set customToggleButton( btn: MenuToggleDirective ) {\n        this.isCustomButton = Boolean( btn );\n        if (btn) {\n            this.toggleBtn = btn;\n        }\n    }\n\n    /**\n     * button pane where items will be rendered if they fits into\n     */\n    @ViewChild( \"buttonPane\", { read: ElementRef, static: true } )\n    private buttonPane: ElementRef;\n\n    /**\n     * temporary button pane where buttons will be rendered on render process\n     * to avoid visualization errors\n     */\n    @ViewChild( \"tmpButtonPane\", { read: ElementRef, static: true } )\n    private tmpButtonPane: ElementRef;\n\n    /**\n     * if true toggle button will allways included to button pane and be visible\n     */\n    private isForcedOverflow = false;\n\n    /**\n     * emits true if component gets destroyed\n     */\n    private isDestroyed$: Subject = new Subject();\n\n    /**\n     * toggle button to show / close overflow\n     */\n    private toggleBtn: MenuToggleDirective;\n\n    /**\n     * possible overflow items, which fits into button bar but not with more button\n     * but since the next button could be the last button and be smaller then overflow button\n     * which could results into that all buttons fits into the bar we only have to mark this button\n     * for an overflow button\n     */\n    private possibleOverflowItems: MenuItemDirective[] = [];\n\n    /**\n     * all overflow items which exists\n     */\n    private overflowItems: MenuItemDirective[] = [];\n\n    /** max width of button bar */\n    private maxWidth: number;\n\n    /** reserved width which we will need to show more button */\n    private reservedWidth: number;\n\n    public constructor(\n        private overflowCtrl: OverflowControl,\n        private renderer: Renderer2,\n        private hostEl: ElementRef,\n        private changeDetector: ChangeDetectorRef\n    ) {\n    }\n\n    /** @inheritdoc */\n    public ngOnDestroy() {\n        this.isDestroyed$.next( true );\n    }\n\n    /** @inheritdoc */\n    public ngAfterContentInit() {\n        this.menuItems.changes\n            .pipe(takeUntil(this.isDestroyed$))\n            .subscribe(() => this.update());\n    }\n\n    /** @inheritdoc */\n    public ngAfterViewInit() {\n        if (this.isCustomButton) {\n            this.renderer.appendChild( this.buttonPane.nativeElement, this.toggleBtn.nativeElement );\n        }\n        this.render();\n    }\n\n    /**\n     * update view, this will remove all\n     * contents and rerender buttons\n     */\n    public update(width?: number) {\n        this.render(width);\n        this.overflowCtrl.update();\n    }\n\n    /**\n     * remove old items from view so we ensure we have a clean tree\n     */\n    private clearView() {\n        this.menuItems.forEach((menuItem: MenuItemDirective) => {\n            menuItem.remove();\n        });\n        this.changeDetector.detectChanges();\n    }\n\n    /**\n     * render buttons to button menubar, if they not fits anymore or\n     * max show count is reached put them directly to the overflow container\n     */\n    private render(width?: number) {\n        this.initRenderProcess();\n        this.maxWidth = width || this.calcHostWidth();\n\n        const items = this.prepareMenuItems();\n        let isOverflow = false;\n\n        for ( let index = 0, count = 0, ln = items.length; index  -1 && count >= this.showMax;\n\n            if ( !isOverflow ) {\n                item.addTo(this.tmpButtonPane.nativeElement);\n                if (this.validateSize(item)) {\n                    continue;\n                }\n                isOverflow = true;\n            }\n            this.overflowItems.push(item);\n        }\n        this.finalizeRenderProcess();\n    }\n\n    /**\n     * initialize render process\n     * clean up all views, get dimensions from elements\n     */\n    private initRenderProcess() {\n        this.clearView();\n\n        this.overflowItems = [];\n        this.possibleOverflowItems = [];\n        this.overflowCtrl.data.items = [];\n\n        this.toggleBtn.show(true);\n        this.reservedWidth = this.toggleBtn.width;\n        this.toggleBtn.hide();\n    }\n\n    /**\n     * finialize render process, enable more button if an overflow exists\n     */\n    private finalizeRenderProcess() {\n\n        const overflowData = this.finalizeMenuItems();\n        this.overflowCtrl.data.items =  overflowData;\n\n        this.isForcedOverflow || overflowData.length ? this.toggleBtn.show() : this.toggleBtn.hide();\n\n        this.possibleOverflowItems = [];\n        this.overflowItems = [];\n        this.changeDetector.detectChanges();\n        this.rendered.emit();\n    }\n\n    /**\n     * prepare menu items, filter out items which should be hidden by default\n     * and put them to overflow\n     */\n    private prepareMenuItems(): MenuItemDirective[] {\n        return this.menuItems.reduce((itemCollection, menuItem) => {\n            menuItem.visible\n                ? itemCollection.push( menuItem )\n                : this.overflowItems.push( menuItem );\n\n            return itemCollection;\n        }, []);\n    }\n\n    /**\n     * finalize menu buttons after render process finished\n     * buttons which are in overflow will removed from dom and pushed to overflow array\n     * all others will added to buttonPane\n     */\n    private finalizeMenuItems(): MenuItemDirective[] {\n\n        const items = this.overflowItems.length\n            ? this.possibleOverflowItems.concat(this.overflowItems)\n            : [];\n\n        return this.menuItems.toArray().reduce((overflowItems, item) => {\n            // remove all items so they are not rendered anymore\n            item.remove();\n            if (!items.length || items.indexOf(item) === -1) {\n                this.alignToggle === BtnAlign.LEFT\n                    ? item.addTo(this.buttonPane.nativeElement)\n                    : item.addTo(this.buttonPane.nativeElement, this.toggleBtn.nativeElement);\n                return overflowItems;\n            }\n\n            /** push item to overflow */\n            overflowItems.push(item);\n            return overflowItems;\n        }, []);\n    }\n\n    /**\n     * validate rendered item fits into button container\n     */\n    private validateSize( item: MenuItemDirective ): boolean {\n        const usedSize = parseInt(this.tmpButtonPane.nativeElement.offsetWidth, 10);\n\n        /** item fits together with more button */\n        if (usedSize + this.reservedWidth \n    \n\n    \n        \n\n    \n    \n    \n        ...\n    \n\n\n\n\n    \n\n    \n\n    \n                \n                    ./responsive-menu.component.scss\n                \n                :host {\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n\n    .buttonWrapper {\n        display: flex;\n        flex-direction: row;\n        justify-content: flex-end;\n    }\n\n    .buttonPane {\n        display: inline-flex;\n        flex-direction: row;\n        flex-wrap: nowrap;\n        flex-shrink: 0;\n    }\n\n    ::ng-deep {\n        .responsive-menu--item {\n            flex-shrink: 0 !important;\n        }\n    }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                    ...        '\n    var COMPONENTS = [{'name': 'ResponsiveMenuComponent', 'selector': 'ngx-responsivemenu'}];\n    var DIRECTIVES = [{'name': 'MenuItemDirective', 'selector': '[ngxResponsiveMenuItem]'},{'name': 'MenuToggleDirective', 'selector': '[ngxResponsiveMenuToggle]'},{'name': 'OverflowContentDirective', 'selector': 'ngx-responsivemenu-overflow'}];\n    var ACTUAL_COMPONENT = {'name': 'ResponsiveMenuComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ResponsiveMenuModule.html":{"url":"modules/ResponsiveMenuModule.html","title":"module - ResponsiveMenuModule","body":"\n                   \n\n\n\n\n    Modules\n    ResponsiveMenuModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ResponsiveMenuModule\n\n\n\ncluster_ResponsiveMenuModule_declarations\n\n\n\ncluster_ResponsiveMenuModule_exports\n\n\n\ncluster_ResponsiveMenuModule_providers\n\n\n\n\nMenuItemDirective\n\nMenuItemDirective\n\n\n\nResponsiveMenuModule\n\nResponsiveMenuModule\n\nResponsiveMenuModule -->\n\nMenuItemDirective->ResponsiveMenuModule\n\n\n\n\n\nMenuToggleDirective\n\nMenuToggleDirective\n\nResponsiveMenuModule -->\n\nMenuToggleDirective->ResponsiveMenuModule\n\n\n\n\n\nOverflowContentDirective\n\nOverflowContentDirective\n\nResponsiveMenuModule -->\n\nOverflowContentDirective->ResponsiveMenuModule\n\n\n\n\n\nResponsiveMenuComponent\n\nResponsiveMenuComponent\n\nResponsiveMenuModule -->\n\nResponsiveMenuComponent->ResponsiveMenuModule\n\n\n\n\n\nMenuItemDirective \n\nMenuItemDirective \n\nMenuItemDirective  -->\n\nResponsiveMenuModule->MenuItemDirective \n\n\n\n\n\nMenuToggleDirective \n\nMenuToggleDirective \n\nMenuToggleDirective  -->\n\nResponsiveMenuModule->MenuToggleDirective \n\n\n\n\n\nOverflowContentDirective \n\nOverflowContentDirective \n\nOverflowContentDirective  -->\n\nResponsiveMenuModule->OverflowContentDirective \n\n\n\n\n\nResponsiveMenuComponent \n\nResponsiveMenuComponent \n\nResponsiveMenuComponent  -->\n\nResponsiveMenuModule->ResponsiveMenuComponent \n\n\n\n\n\nOverflowControl\n\nOverflowControl\n\nResponsiveMenuModule -->\n\nOverflowControl->ResponsiveMenuModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            lib/ngx-responsivemenu/ngx-responsivemenu.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            MenuItemDirective\n                        \n                        \n                            MenuToggleDirective\n                        \n                        \n                            OverflowContentDirective\n                        \n                        \n                            ResponsiveMenuComponent\n                        \n                    \n                \n                \n                    Providers\n                    \n                        \n                            OverflowControl\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MenuItemDirective\n                        \n                        \n                            MenuToggleDirective\n                        \n                        \n                            OverflowContentDirective\n                        \n                        \n                            ResponsiveMenuComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from \"@angular/core\";\nimport { MenuItemDirective } from \"./directives/menu-item.directive\";\nimport { ResponsiveMenuComponent } from \"./components/responsive-menu.component\";\nimport { CommonModule } from \"@angular/common\";\nimport { OverflowContentDirective } from \"./directives/overflow.directive\";\nimport { OverflowControl } from \"./provider/overflow.control\";\nimport { MenuToggleDirective } from \"./directives/menu-toggle.directive\";\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    exports: [\n        MenuItemDirective,\n        MenuToggleDirective,\n        OverflowContentDirective,\n        ResponsiveMenuComponent,\n    ],\n    providers: [ OverflowControl ],\n    declarations: [\n        MenuItemDirective,\n        MenuToggleDirective,\n        OverflowContentDirective,\n        ResponsiveMenuComponent,\n    ]\n})\nexport class ResponsiveMenuModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                lib/ngx-responsivemenu/components/responsive-menu.component.ts\n            \n            component\n            ResponsiveMenuComponent\n            \n                90 %\n                (10/11)\n            \n        \n        \n            \n                \n                lib/ngx-responsivemenu/directives/menu-item.directive.ts\n            \n            directive\n            MenuItemDirective\n            \n                66 %\n                (4/6)\n            \n        \n        \n            \n                \n                lib/ngx-responsivemenu/directives/menu-toggle.directive.ts\n            \n            directive\n            MenuToggleDirective\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                lib/ngx-responsivemenu/directives/overflow.directive.ts\n            \n            directive\n            OverflowContentDirective\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                lib/ngx-responsivemenu/model/overflow.model.ts\n            \n            class\n            OverflowModel\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                lib/ngx-responsivemenu/provider/async-event.ts\n            \n            class\n            AsyncEvent\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                lib/ngx-responsivemenu/provider/overflow.control.ts\n            \n            injectable\n            OverflowControl\n            \n                83 %\n                (5/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^8.0.0\n        \n            @angular/cdk : ^8.0.0\n        \n            @angular/common : ^8.0.0\n        \n            @angular/compiler : ^8.0.0\n        \n            @angular/core : ^8.0.0\n        \n            @angular/forms : ^8.0.0\n        \n            @angular/material : ^8.0.0\n        \n            @angular/platform-browser : ^8.0.0\n        \n            @angular/platform-browser-dynamic : ^8.0.0\n        \n            @angular/router : ^8.0.0\n        \n            @compodoc/compodoc : ^1.1.9\n        \n            angular-resizable-element : ^3.2.4\n        \n            bluebird : 3.5.5\n        \n            core-js : ^3.1.3\n        \n            font-awesome : ^4.7.0\n        \n            highlight.js : ^9.15.8\n        \n            ngx-highlightjs : ^3.0.3\n        \n            ngx-responsivemenu : file:dist/ngx-responsivemenu\n        \n            rxjs : ~6.5.2\n        \n            tslib : ^1.9.0\n        \n            zone.js : ~0.9.1\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BtnAlign   (lib/.../responsive-menu.component.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/ngx-responsivemenu/components/responsive-menu.component.ts\n    \n        \n            \n                \n                    \n                        \n                        BtnAlign\n                    \n                \n                    \n                        \n                            possible toggle button alignments\n\n                        \n                    \n                        \n                            \n                                 LEFT\n                            \n                        \n                        \n                            \n                                Value : left\n                            \n                        \n                        \n                            \n                                 RIGHT\n                            \n                        \n                        \n                            \n                                Value : right\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ResponsiveMenuModule\n\n\n\ncluster_ResponsiveMenuModule_declarations\n\n\n\ncluster_ResponsiveMenuModule_exports\n\n\n\ncluster_ResponsiveMenuModule_providers\n\n\n\n\nMenuItemDirective\n\nMenuItemDirective\n\n\n\nResponsiveMenuModule\n\nResponsiveMenuModule\n\nResponsiveMenuModule -->\n\nMenuItemDirective->ResponsiveMenuModule\n\n\n\n\n\nMenuToggleDirective\n\nMenuToggleDirective\n\nResponsiveMenuModule -->\n\nMenuToggleDirective->ResponsiveMenuModule\n\n\n\n\n\nOverflowContentDirective\n\nOverflowContentDirective\n\nResponsiveMenuModule -->\n\nOverflowContentDirective->ResponsiveMenuModule\n\n\n\n\n\nResponsiveMenuComponent\n\nResponsiveMenuComponent\n\nResponsiveMenuModule -->\n\nResponsiveMenuComponent->ResponsiveMenuModule\n\n\n\n\n\nMenuItemDirective \n\nMenuItemDirective \n\nMenuItemDirective  -->\n\nResponsiveMenuModule->MenuItemDirective \n\n\n\n\n\nMenuToggleDirective \n\nMenuToggleDirective \n\nMenuToggleDirective  -->\n\nResponsiveMenuModule->MenuToggleDirective \n\n\n\n\n\nOverflowContentDirective \n\nOverflowContentDirective \n\nOverflowContentDirective  -->\n\nResponsiveMenuModule->OverflowContentDirective \n\n\n\n\n\nResponsiveMenuComponent \n\nResponsiveMenuComponent \n\nResponsiveMenuComponent  -->\n\nResponsiveMenuModule->ResponsiveMenuComponent \n\n\n\n\n\nOverflowControl\n\nOverflowControl\n\nResponsiveMenuModule -->\n\nOverflowControl->ResponsiveMenuModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Component\n                \n            \n        \n        \n            \n                \n                    \n                    3 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    1 Injectable\n                \n            \n        \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ResponsiveMenuModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
