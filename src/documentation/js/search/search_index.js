var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/classes/AsyncEvent.html",[0,0.277,1,1.254]],["body/classes/AsyncEvent.html",[0,0.27,1,2.311,2,1.477,3,0.577,4,0.577,5,0.464,6,0.636,7,3.196,8,1.819,9,1.222,10,2.022,11,3.199,12,2.022,13,3.3,14,2.489,15,1.673,16,3.199,17,0.073,18,4.241,19,2.834,20,0.362,21,1.162,22,1.399,23,3.921,24,1.162,25,2.838,26,1.324,27,1.18,28,2.337,29,2.337,30,3.921,31,3.051,32,1.709,33,3.921,34,3.199,35,3.051,36,3.921,37,3.051,38,3.199,39,3.199,40,3.199,41,3.199,42,1.492,43,1.162,44,2.337,45,2.337,46,2.337,47,3.921,48,3.199,49,2.489,50,3.199,51,0.577,52,1.589,53,0.849,54,0.577,55,0.963,56,2.337,57,0.849,58,2.337,59,0.704,60,2.337,61,2.337,62,3.199,63,2.337,64,2.337,65,2.337,66,0.034,67,0.047,68,0.034]],["title/directives/MenuItemDirective.html",[69,0.591,70,0.476]],["body/directives/MenuItemDirective.html",[0,0.24,3,0.513,4,0.513,5,0.413,6,0.633,9,1.088,15,2.058,17,0.073,20,0.322,21,1.071,22,1.293,26,1.071,27,1.185,32,1.781,42,1.071,43,1.071,51,0.513,54,0.513,55,0.888,59,0.626,66,0.031,67,0.043,68,0.031,69,0.728,70,0.811,71,0.907,72,2.584,73,1.619,74,2.296,75,3.635,76,2.296,77,2.657,78,1.543,79,2.357,80,2.584,81,1.865,82,2.296,83,2.296,84,2.95,85,1.088,86,1.543,87,2.95,88,3.427,89,2.584,90,2.296,91,2.667,92,2.296,93,3.427,94,2.081,95,2.584,96,2.166,97,2.357,98,2.95,99,1.071,100,1.071,101,0.728,102,1.071,103,1.865,104,1.715,105,1.493,106,1.625,107,2.081,108,1.543,109,1.95,110,1.865,111,1.285,112,2.081,113,3.272,114,2.081,115,1.865,116,4.296,117,1.543,118,2.296,119,2.198,120,2.95,121,3.729,122,2.95,123,2.081,124,2.95,125,1.865,126,2.296,127,2.296,128,0.513,129,1.619,130,2.081,131,2.901,132,2.081,133,2.95,134,2.081,135,2.081]],["title/directives/MenuToggleDirective.html",[69,0.591,136,0.871]],["body/directives/MenuToggleDirective.html",[0,0.371,3,0.459,4,0.459,5,0.369,6,0.63,9,0.973,17,0.073,19,1.72,20,0.288,21,0.989,22,1.318,24,0.989,26,0.989,27,1.185,32,1.186,42,1.286,43,0.989,49,2.118,51,0.873,52,1.402,53,0.676,54,0.459,55,1.224,57,0.676,59,1.066,66,0.027,67,0.04,68,0.027,69,0.671,71,0.811,72,2.569,74,2.118,80,2.89,85,0.973,86,1.423,92,2.118,95,2.238,96,2.034,97,2.238,99,0.989,100,0.989,101,0.459,102,0.989,103,2.034,104,1.186,105,1.186,106,1.543,109,1.852,111,1.186,113,2.118,115,1.72,117,1.423,118,2.118,119,1.852,126,1.448,128,0.459,129,1.448,131,2.118,136,0.989,137,1.448,138,2.755,139,2.118,140,3.541,141,2.238,142,2.722,143,1.72,144,2.504,145,2.034,146,2.118,147,2.722,148,3.063,149,2.722,150,3.218,151,3.164,152,1.448,153,0.873,154,2.722,155,1.72,156,1.423,157,3.541,158,2.755,159,1.861,160,2.932,161,3.218,162,2.722,163,1.861,164,3.218,165,2.722,166,2.722,167,2.932,168,1.861,169,1.861,170,2.722,171,1.861,172,1.861,173,2.722,174,2.722,175,2.118,176,1.861,177,0.973,178,1.176,179,1.176,180,1.176,181,1.861,182,1.448,183,1.448,184,1.861,185,1.176,186,1.448,187,1.861,188,1.861,189,1.861,190,1.861,191,1.861,192,1.861,193,1.176,194,1.448,195,1.448,196,1.861,197,2.722,198,1.861,199,1.861,200,1.861,201,1.861,202,1.861,203,2.722,204,2.722,205,1.176,206,2.118,207,2.722,208,1.176,209,1.861,210,1.448,211,1.861,212,1.861,213,1.861,214,1.861,215,1.448]],["title/directives/OverflowContentDirective.html",[69,0.591,216,0.871]],["body/directives/OverflowContentDirective.html",[0,0.215,1,2.127,3,0.46,4,0.46,5,0.37,6,0.63,9,0.976,10,2.241,12,2.828,13,2.122,14,2.759,15,1.854,17,0.073,19,2.037,20,0.289,22,1.225,24,0.99,25,2.759,26,0.99,27,1.186,32,1.188,35,2.122,37,2.759,51,0.972,52,1.404,53,0.678,54,0.46,55,1.135,57,1.478,59,0.562,66,0.027,67,0.04,68,0.027,69,0.673,70,0.639,71,0.813,77,1.179,78,2.261,85,0.976,86,1.426,89,1.179,99,0.678,100,0.678,101,0.93,102,0.678,111,1.966,119,1.426,125,1.179,128,0.46,143,1.724,145,2.037,153,0.875,155,2.037,156,1.426,177,0.976,178,1.179,179,1.179,180,1.179,182,1.452,185,1.179,193,1.179,194,1.452,195,1.452,215,1.452,216,0.99,217,1.452,218,2.727,219,1.426,220,2.122,221,3.223,222,1.724,223,1.724,224,2.122,225,3.545,226,3.545,227,3.545,228,3.545,229,2.935,230,1.866,231,2.935,232,1.866,233,2.727,234,1.866,235,2.636,236,3.311,237,4.171,238,2.759,239,1.866,240,3.545,241,1.866,242,3.545,243,1.866,244,1.866,245,1.866,246,2.935,247,1.452,248,0.813,249,1.866,250,1.866,251,1.866,252,1.866,253,1.866,254,1.866,255,1.866,256,1.866,257,1.452,258,0.813,259,2.727,260,1.866,261,1.866,262,1.866,263,2.727,264,2.727,265,1.866,266,1.866,267,1.866,268,1.866,269,2.727,270,2.727,271,1.866,272,1.866,273,1.866,274,1.866,275,1.866,276,1.866]],["title/injectables/OverflowControl.html",[153,0.591,277,1.254]],["body/injectables/OverflowControl.html",[0,0.229,3,0.489,4,0.489,5,0.393,6,0.679,10,1.802,17,0.073,20,0.307,21,1.035,22,1.404,24,1.035,26,1.212,27,1.3,42,1.656,43,1.325,51,0.9,52,1.684,53,0.72,54,0.489,55,1.163,57,1.212,59,1.098,66,0.029,67,0.042,68,0.029,70,0.393,78,1.908,79,2.109,99,0.72,100,0.72,101,0.489,102,0.72,104,1.242,106,1.684,108,2.168,109,1.908,110,1.802,111,2.032,128,0.489,141,2.681,148,3.131,153,0.703,210,2.839,219,1.491,235,1.802,248,0.864,258,0.864,277,1.491,278,1.984,279,1.544,280,3.131,281,3.649,282,2.839,283,2.218,284,3.865,285,1.984,286,1.984,287,1.984,288,2.851,289,2.543,290,1.984,291,1.984,292,1.544,293,1.984,294,2.851,295,2.851,296,2.218,297,2.851,298,2.597,299,1.984,300,1.984,301,3.649,302,3.649,303,2.851,304,3.865,305,1.984,306,1.984,307,1.984,308,1.984,309,2.851,310,2.104,311,1.984,312,1.037,313,1.544,314,3.337,315,1.984,316,1.984,317,2.851,318,4.024,319,2.851,320,1.984,321,2.851,322,1.984]],["title/classes/OverflowModel.html",[0,0.277,310,1.254]],["body/classes/OverflowModel.html",[0,0.308,2,1.688,3,0.659,4,0.659,5,0.53,6,0.706,17,0.073,20,0.414,21,1.27,22,1.387,24,1.27,27,1.352,42,1.503,43,1.416,51,0.863,54,0.659,55,1.174,59,1.246,66,0.039,67,0.051,68,0.039,70,0.821,99,1.416,100,1.416,101,0.659,102,1.416,108,2.039,128,0.659,156,2.246,219,2.246,231,3.22,248,1.164,258,1.164,289,1.688,310,1.829,312,1.396,323,2.078,324,3.22,325,3.342,326,2.67,327,2.67,328,2.67,329,2.67,330,2.67,331,2.67,332,2.67,333,2.67,334,2.67,335,2.67,336,2.67,337,2.67,338,2.67,339,4.138,340,2.67,341,2.67,342,2.078,343,2.67,344,3.497,345,2.67,346,3.497,347,2.67,348,2.721,349,2.67]],["title/components/ResponsiveMenuComponent.html",[350,1.254,351,1.045]],["body/components/ResponsiveMenuComponent.html",[0,0.232,3,0.225,4,0.225,5,0.181,6,0.592,12,1.497,15,0.808,17,0.073,20,0.312,21,0.562,22,1.23,24,0.562,26,0.562,27,1.17,31,0.71,32,1.032,42,0.86,43,0.86,51,0.71,52,0.877,53,0.331,54,0.381,55,1.242,57,0.562,59,0.798,66,0.013,67,0.023,68,0.023,69,0.225,70,0.667,71,0.398,75,2.241,76,2.241,77,1.272,78,1.759,79,2.492,80,2.824,81,1.497,85,0.477,86,1.506,89,1.497,90,1.203,91,1.566,95,2.04,96,1.272,97,1.497,99,0.963,100,1.172,101,0.796,102,0.963,103,0.977,104,1.466,105,1.032,106,1.517,108,1.605,109,1.759,110,1.272,111,1.741,115,1.497,117,0.808,119,1.239,125,0.577,127,2.241,128,0.225,136,1.115,138,2.241,139,1.203,141,1.272,143,0.977,144,1.566,145,1.272,146,2.241,151,1.844,152,0.71,153,0.584,155,0.977,156,0.477,158,2.241,160,1.566,167,0.71,175,2.241,177,0.477,178,0.577,179,0.577,180,0.577,183,0.71,185,0.577,186,0.71,193,0.577,205,1.497,206,0.71,208,1.497,216,0.331,219,1.92,220,0.71,222,1.497,223,1.497,224,1.203,229,1.844,235,2.04,236,2.388,238,0.71,246,1.203,247,0.71,248,0.398,257,1.203,258,1.032,280,0.71,282,1.844,283,1.844,289,1.82,292,0.71,296,1.566,298,1.566,312,0.808,313,0.71,324,1.566,325,0.71,342,1.566,348,1.203,350,1.052,351,1.032,352,1.546,353,0.912,354,2.651,355,1.546,356,2.416,357,0.577,358,2.012,359,1.546,360,2.012,361,1.546,362,1.546,363,1.546,364,2.012,365,2.012,366,2.012,367,2.012,368,2.012,369,2.012,370,2.012,371,2.012,372,2.012,373,2.012,374,2.369,375,0.912,376,1.566,377,1.546,378,0.912,379,1.546,380,3.672,381,2.012,382,1.546,383,1.546,384,0.912,385,3.364,386,0.977,387,1.546,388,0.912,389,1.546,390,1.546,391,3.364,392,0.912,393,1.546,394,1.546,395,0.912,396,1.546,397,0.912,398,1.546,399,1.546,400,3.069,401,0.912,402,0.912,403,2.012,404,0.912,405,0.912,406,0.912,407,0.912,408,0.912,409,2.88,410,2.369,411,2.369,412,2.369,413,2.369,414,1.546,415,2.651,416,1.546,417,1.546,418,0.912,419,0.912,420,1.546,421,1.546,422,2.012,423,1.546,424,2.012,425,0.912,426,0.71,427,0.912,428,1.546,429,1.546,430,0.912,431,0.912,432,2.369,433,1.546,434,2.012,435,0.912,436,1.546,437,2.369,438,0.912,439,2.369,440,0.912,441,0.912,442,0.912,443,1.546,444,0.912,445,0.912,446,2.012,447,0.912,448,0.912,449,0.912,450,0.912,451,0.912,452,1.546,453,0.912,454,0.912,455,0.912,456,0.912,457,0.912,458,0.912,459,0.912,460,0.912,461,0.912,462,0.912,463,1.546,464,0.912,465,0.912,466,0.912,467,0.912,468,0.912,469,1.546,470,0.912,471,0.912,472,0.912,473,1.546,474,0.912,475,1.546,476,2.012,477,0.912,478,1.546,479,0.912,480,0.912,481,0.912,482,0.912,483,0.912,484,0.912,485,0.912,486,0.912,487,0.912,488,0.912,489,0.912,490,0.912,491,0.912,492,0.912,493,0.912,494,0.912,495,0.912,496,0.912,497,0.912,498,1.546,499,1.546,500,0.912,501,1.546,502,0.912,503,1.546,504,0.912,505,0.912,506,0.912,507,1.546,508,0.912,509,0.912,510,0.912,511,0.912,512,0.912,513,0.577,514,0.912,515,0.912,516,2.012,517,0.912,518,0.912,519,0.912,520,0.912,521,0.912,522,0.912,523,0.912,524,0.912,525,0.912,526,0.912,527,0.912,528,0.912,529,0.912,530,0.912,531,0.912,532,0.912,533,1.546,534,0.912,535,0.912,536,0.912,537,0.912,538,1.546,539,0.912,540,0.912,541,3.481,542,2.012,543,0.912,544,1.546,545,0.912,546,0.912,547,1.546,548,0.912,549,0.912,550,0.912,551,0.912,552,1.546,553,0.912,554,0.912,555,0.912,556,0.577,557,1.546,558,2.369,559,0.912,560,0.912,561,0.912,562,0.912]],["title/modules/ResponsiveMenuModule.html",[563,1.515,564,1.254]],["body/modules/ResponsiveMenuModule.html",[0,0.312,3,0.666,4,0.666,5,0.536,6,0.418,17,0.073,51,1.111,54,0.666,66,0.04,67,0.052,68,0.04,70,0.937,128,0.666,136,1.715,153,1.09,177,1.412,216,1.715,248,1.177,312,1.842,351,2.057,386,1.707,426,2.101,513,1.707,556,1.707,563,1.707,564,2.526,565,1.707,566,1.412,567,3.051,568,3.051,569,3.051,570,2.101,571,2.101,572,2.101,573,2.101,574,2.741,575,2.101,576,2.7,577,2.7,578,3.523,579,2.7,580,2.7,581,3.523,582,2.101,583,2.7,584,2.7]],["title/coverage.html",[585,2.533]],["body/coverage.html",[0,0.453,1,1.675,5,0.636,6,0.725,7,2.493,8,2.493,17,0.071,57,1.164,66,0.047,67,0.058,68,0.047,69,1.047,70,0.636,72,2.481,73,2.493,101,0.79,136,1.164,137,2.493,153,0.79,216,1.164,217,2.493,258,1.849,277,1.675,279,2.493,310,1.675,323,2.493,350,1.675,351,1.396,356,2.025,357,2.025,585,2.493,586,3.204,587,3.204,588,3.204,589,3.204,590,3.204,591,3.204,592,3.204,593,3.204,594,3.204,595,3.204,596,3.204,597,3.204,598,3.204,599,3.204,600,3.204,601,3.204,602,3.055,603,3.925,604,2.493,605,3.925,606,2.493,607,3.204,608,3.204]],["title/dependencies.html",[566,1.505,609,2.011]],["body/dependencies.html",[17,0.073,53,1.164,66,0.047,67,0.058,68,0.047,117,1.675,128,0.79,222,2.481,223,2.481,566,1.675,582,2.493,610,3.204,611,4.788,612,3.204,613,3.204,614,3.204,615,3.204,616,3.925,617,3.055,618,3.204,619,3.204,620,3.204,621,3.204,622,3.204,623,3.204,624,3.204,625,3.204,626,3.204,627,3.204,628,3.204,629,3.204,630,3.204,631,3.204,632,3.204,633,3.204,634,3.204,635,3.204,636,3.204,637,3.204,638,3.204,639,3.204,640,3.204,641,3.204,642,3.204]],["title/miscellaneous/enumerations.html",[643,1.051,644,2.24]],["body/miscellaneous/enumerations.html",[6,0.567,17,0.068,20,0.567,66,0.054,67,0.063,68,0.054,105,1.852,205,2.686,208,2.686,356,2.313,357,2.686,376,3.307,643,1.913,644,2.848,645,3.659]],["title/index.html",[20,0.371,646,1.866]],["body/index.html",[2,1.99,17,0.071,66,0.046,67,0.057,68,0.046,70,0.924,71,1.372,81,2.661,82,2.45,83,2.45,136,1.692,153,1.039,216,1.692,277,1.646,350,1.646,351,2.031,386,1.99,513,1.99,556,1.99,563,2.454,564,2.552,566,1.646,567,2.45,568,2.45,569,2.45,570,2.45,571,2.45,572,2.45,573,2.45,574,3.022,575,2.45,646,2.45]],["title/modules.html",[565,2.057]],["body/modules.html",[17,0.064,66,0.056,67,0.064,68,0.056,564,1.974,565,2.385,617,2.937,647,3.774,648,3.774,649,3.774]],["title/miscellaneous/variables.html",[643,1.051,650,2.24]],["body/miscellaneous/variables.html",[17,0.068,20,0.567,66,0.054,67,0.063,68,0.054,101,0.903,104,1.595,105,1.595,106,1.595,602,2.848,604,3.307,606,3.307,643,1.913,650,2.848,651,4.249,652,3.659,653,3.659]]],"invertedIndex":[["",{"_index":17,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":258,"title":{},"body":{"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"coverage.html":{}}}],["0.9.1",{"_index":642,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":605,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":597,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":81,"title":{},"body":{"directives/MenuItemDirective.html":{},"components/ResponsiveMenuComponent.html":{},"index.html":{}}}],["1.1.9",{"_index":621,"title":{},"body":{"dependencies.html":{}}}],["1.9.0",{"_index":640,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":206,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["2",{"_index":82,"title":{},"body":{"directives/MenuItemDirective.html":{},"index.html":{}}}],["3",{"_index":83,"title":{},"body":{"directives/MenuItemDirective.html":{},"index.html":{}}}],["3.0.3",{"_index":636,"title":{},"body":{"dependencies.html":{}}}],["3.1.3",{"_index":629,"title":{},"body":{"dependencies.html":{}}}],["3.2.4",{"_index":624,"title":{},"body":{"dependencies.html":{}}}],["3.5.5",{"_index":626,"title":{},"body":{"dependencies.html":{}}}],["3/4",{"_index":599,"title":{},"body":{"coverage.html":{}}}],["3/6",{"_index":601,"title":{},"body":{"coverage.html":{}}}],["4.7.0",{"_index":632,"title":{},"body":{"dependencies.html":{}}}],["4/5",{"_index":594,"title":{},"body":{"coverage.html":{}}}],["4/6",{"_index":592,"title":{},"body":{"coverage.html":{}}}],["5/6",{"_index":596,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":600,"title":{},"body":{"coverage.html":{}}}],["54",{"_index":589,"title":{},"body":{"coverage.html":{}}}],["6.5.2",{"_index":638,"title":{},"body":{"dependencies.html":{}}}],["6/11",{"_index":590,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":591,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":598,"title":{},"body":{"coverage.html":{}}}],["8.0.0",{"_index":611,"title":{},"body":{"dependencies.html":{}}}],["80",{"_index":593,"title":{},"body":{"coverage.html":{}}}],["83",{"_index":595,"title":{},"body":{"coverage.html":{}}}],["9.15.8",{"_index":634,"title":{},"body":{"dependencies.html":{}}}],["accessors",{"_index":24,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["actual_component",{"_index":562,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["add",{"_index":115,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["added",{"_index":525,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["addto",{"_index":88,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["addto(parent",{"_index":112,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["aftercontentinit",{"_index":358,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["afterremove",{"_index":225,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["afterrender",{"_index":226,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["afterviewinit",{"_index":144,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["aligntoggle",{"_index":366,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["allways",{"_index":110,"title":{},"body":{"directives/MenuItemDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["amount",{"_index":394,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["angular",{"_index":622,"title":{},"body":{"dependencies.html":{}}}],["angular/animations",{"_index":610,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":612,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":582,"title":{},"body":{"modules/ResponsiveMenuModule.html":{},"dependencies.html":{}}}],["angular/compiler",{"_index":613,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":128,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":614,"title":{},"body":{"dependencies.html":{}}}],["angular/material",{"_index":615,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":616,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":619,"title":{},"body":{"dependencies.html":{}}}],["anymore",{"_index":475,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["applied",{"_index":240,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["array",{"_index":523,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["async",{"_index":13,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/OverflowContentDirective.html":{}}}],["asyncevent",{"_index":1,"title":{"classes/AsyncEvent.html":{}},"body":{"classes/AsyncEvent.html":{},"directives/OverflowContentDirective.html":{},"coverage.html":{}}}],["automatically",{"_index":139,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["avoid",{"_index":440,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["await",{"_index":35,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/OverflowContentDirective.html":{}}}],["awesome",{"_index":631,"title":{},"body":{"dependencies.html":{}}}],["bar",{"_index":446,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["before",{"_index":15,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["beforeremove",{"_index":227,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["beforerender",{"_index":228,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["bluebird",{"_index":625,"title":{},"body":{"dependencies.html":{}}}],["boolean",{"_index":289,"title":{},"body":{"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["bootstrap",{"_index":386,"title":{},"body":{"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"index.html":{}}}],["browse",{"_index":649,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":617,"title":{},"body":{"dependencies.html":{},"modules.html":{}}}],["btn",{"_index":380,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["btnalign",{"_index":376,"title":{},"body":{"components/ResponsiveMenuComponent.html":{},"miscellaneous/enumerations.html":{}}}],["btnalign.left",{"_index":532,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["btnalign.right",{"_index":377,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["button",{"_index":80,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["buttonpane",{"_index":437,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["buttons",{"_index":400,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["buttonwrapper",{"_index":546,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["called",{"_index":30,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["calls",{"_index":264,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["cancel",{"_index":18,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["case",{"_index":416,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["catch",{"_index":38,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["center",{"_index":545,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["change",{"_index":412,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["changedetector",{"_index":373,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["changedetectorref",{"_index":374,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["check",{"_index":420,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["children",{"_index":124,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["class",{"_index":0,"title":{"classes/AsyncEvent.html":{},"classes/OverflowModel.html":{}},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"coverage.html":{}}}],["class.more",{"_index":149,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["class.responsive",{"_index":93,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["classbtnpane",{"_index":367,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AsyncEvent.html":{},"classes/OverflowModel.html":{},"index.html":{}}}],["classname",{"_index":129,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{}}}],["clean",{"_index":469,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["clearview",{"_index":470,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["click",{"_index":140,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["close",{"_index":280,"title":{},"body":{"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["cluster_responsivemenumodule",{"_index":570,"title":{},"body":{"modules/ResponsiveMenuModule.html":{},"index.html":{}}}],["cluster_responsivemenumodule_declarations",{"_index":571,"title":{},"body":{"modules/ResponsiveMenuModule.html":{},"index.html":{}}}],["cluster_responsivemenumodule_exports",{"_index":572,"title":{},"body":{"modules/ResponsiveMenuModule.html":{},"index.html":{}}}],["cluster_responsivemenumodule_providers",{"_index":573,"title":{},"body":{"modules/ResponsiveMenuModule.html":{},"index.html":{}}}],["column",{"_index":543,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["commonmodule",{"_index":581,"title":{},"body":{"modules/ResponsiveMenuModule.html":{}}}],["complete",{"_index":64,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["completed",{"_index":25,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/OverflowContentDirective.html":{}}}],["compodoc/compodoc",{"_index":620,"title":{},"body":{"dependencies.html":{}}}],["component",{"_index":350,"title":{"components/ResponsiveMenuComponent.html":{}},"body":{"components/ResponsiveMenuComponent.html":{},"coverage.html":{},"index.html":{}}}],["component_template",{"_index":559,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["components",{"_index":352,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["components/responsive",{"_index":579,"title":{},"body":{"modules/ResponsiveMenuModule.html":{}}}],["conainer",{"_index":295,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["const",{"_index":119,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["constructor",{"_index":26,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["constructor(el",{"_index":94,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["constructor(overflowctrl",{"_index":152,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["constructor(viewref",{"_index":230,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["container",{"_index":235,"title":{},"body":{"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["content",{"_index":78,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["contentchild",{"_index":425,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["contentchild(menutoggledirective",{"_index":435,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["contentchildren",{"_index":423,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["contentchildren(menuitemdirective",{"_index":405,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["contents",{"_index":398,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["context",{"_index":604,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["continue",{"_index":31,"title":{},"body":{"classes/AsyncEvent.html":{},"components/ResponsiveMenuComponent.html":{}}}],["core",{"_index":627,"title":{},"body":{"dependencies.html":{}}}],["count",{"_index":476,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["coverage",{"_index":585,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["css",{"_index":157,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["current",{"_index":49,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuToggleDirective.html":{}}}],["custom",{"_index":146,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["customoverflow",{"_index":368,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["customtogglebutton",{"_index":371,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["data",{"_index":284,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["declarations",{"_index":567,"title":{},"body":{"modules/ResponsiveMenuModule.html":{},"index.html":{}}}],["decorators",{"_index":404,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["deep",{"_index":554,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["default",{"_index":104,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{},"miscellaneous/variables.html":{}}}],["defaulttogglebtn",{"_index":370,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["defined",{"_index":27,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["dependencies",{"_index":566,"title":{"dependencies.html":{}},"body":{"modules/ResponsiveMenuModule.html":{},"dependencies.html":{},"index.html":{}}}],["description",{"_index":9,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{}}}],["destroys",{"_index":192,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["detection",{"_index":413,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["dimensions",{"_index":494,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["direction",{"_index":542,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["directive",{"_index":69,"title":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{}},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{},"coverage.html":{}}}],["directives",{"_index":71,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{},"index.html":{}}}],["directives/menu",{"_index":312,"title":{},"body":{"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{}}}],["directives/overflow.directive",{"_index":583,"title":{},"body":{"modules/ResponsiveMenuModule.html":{}}}],["directly",{"_index":479,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["display",{"_index":160,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["documentation",{"_index":586,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":354,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["done",{"_index":23,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["dont",{"_index":421,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["dynamic",{"_index":618,"title":{},"body":{"dependencies.html":{}}}],["el",{"_index":103,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["element",{"_index":117,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{},"dependencies.html":{}}}],["elementref",{"_index":95,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["elements",{"_index":495,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["emits",{"_index":10,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{}}}],["enable",{"_index":505,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["end",{"_index":548,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["ensure",{"_index":468,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["enum",{"_index":427,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["enumerations",{"_index":644,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":40,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["errors",{"_index":442,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["even",{"_index":296,"title":{},"body":{"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["event",{"_index":19,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{}}}],["event.cancel",{"_index":41,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["event.completed",{"_index":269,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["event.done",{"_index":37,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/OverflowContentDirective.html":{}}}],["event.ts",{"_index":8,"title":{},"body":{"classes/AsyncEvent.html":{},"coverage.html":{}}}],["event.ts:11",{"_index":28,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["event.ts:21",{"_index":46,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["event.ts:35",{"_index":44,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["event.ts:54",{"_index":29,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["eventemitter",{"_index":12,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["example",{"_index":32,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["exists",{"_index":220,"title":{},"body":{"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["exits",{"_index":297,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["export",{"_index":54,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{}}}],["exports",{"_index":569,"title":{},"body":{"modules/ResponsiveMenuModule.html":{},"index.html":{}}}],["false",{"_index":109,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["fatalerror",{"_index":39,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"coverage.html":{}}}],["file:dist/ngx",{"_index":637,"title":{},"body":{"dependencies.html":{}}}],["filter",{"_index":247,"title":{},"body":{"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["filter((items",{"_index":256,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["finalize",{"_index":521,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["finalizemenuitems",{"_index":526,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["finalizerenderprocess",{"_index":506,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["finialize",{"_index":504,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["finished",{"_index":415,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["fits",{"_index":391,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["flex",{"_index":541,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["font",{"_index":630,"title":{},"body":{"dependencies.html":{}}}],["force",{"_index":294,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["forced",{"_index":298,"title":{},"body":{"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["forceoverflow",{"_index":283,"title":{},"body":{"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["forceoverflow(forced",{"_index":313,"title":{},"body":{"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["fromevent",{"_index":176,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["fromevent(this.el.nativeelement",{"_index":184,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["getcompleted",{"_index":45,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["getcomputedstyle",{"_index":202,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["getdata",{"_index":307,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["gethide",{"_index":305,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["gethost",{"_index":327,"title":{},"body":{"classes/OverflowModel.html":{}}}],["getitems",{"_index":335,"title":{},"body":{"classes/OverflowModel.html":{}}}],["getnativeelement",{"_index":168,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["getshow",{"_index":299,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["gettemplate",{"_index":331,"title":{},"body":{"classes/OverflowModel.html":{}}}],["getview",{"_index":244,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["getwidth",{"_index":171,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["given",{"_index":417,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["group",{"_index":387,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["hidden",{"_index":167,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["hide",{"_index":148,"title":{},"body":{"directives/MenuToggleDirective.html":{},"injectables/OverflowControl.html":{}}}],["highlight.js",{"_index":633,"title":{},"body":{"dependencies.html":{}}}],["highlightjs",{"_index":635,"title":{},"body":{"dependencies.html":{}}}],["holds",{"_index":48,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["hook",{"_index":237,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["hooks",{"_index":265,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["host",{"_index":156,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["host(host",{"_index":343,"title":{},"body":{"classes/OverflowModel.html":{}}}],["hostbinding",{"_index":126,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{}}}],["hostbinding(\"class.more",{"_index":181,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["hostbindings",{"_index":92,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{}}}],["hostel",{"_index":372,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["html",{"_index":557,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["htmlelement",{"_index":113,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{}}}],["identifier",{"_index":587,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":143,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["import",{"_index":51,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{}}}],["important",{"_index":555,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["imports",{"_index":584,"title":{},"body":{"modules/ResponsiveMenuModule.html":{}}}],["includes",{"_index":173,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["index",{"_index":20,"title":{"index.html":{}},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{}}}],["initialize",{"_index":491,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["initialized",{"_index":460,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["initrenderprocess",{"_index":496,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["injectable",{"_index":277,"title":{"injectables/OverflowControl.html":{}},"body":{"injectables/OverflowControl.html":{},"coverage.html":{},"index.html":{}}}],["injectables",{"_index":278,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["inline",{"_index":549,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["input",{"_index":127,"title":{},"body":{"directives/MenuItemDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["inputs",{"_index":90,"title":{},"body":{"directives/MenuItemDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["internal",{"_index":58,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["iscustombutton",{"_index":364,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["isdestroyed",{"_index":180,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["isforcedoverflow",{"_index":444,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["isopen",{"_index":281,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["isoverflow",{"_index":324,"title":{},"body":{"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["item",{"_index":75,"title":{},"body":{"directives/MenuItemDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["item.addto(this.buttonpane.nativeelement",{"_index":533,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["item.addto(this.el.nativeelement",{"_index":122,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["item.addto(this.tmpbuttonpane.nativeelement",{"_index":487,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["item.addto(this.viewref.element.nativeelement",{"_index":271,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["item.directive",{"_index":248,"title":{},"body":{"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{}}}],["item.directive.ts",{"_index":73,"title":{},"body":{"directives/MenuItemDirective.html":{},"coverage.html":{}}}],["item.directive.ts:26",{"_index":107,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["item.directive.ts:29",{"_index":98,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["item.directive.ts:45",{"_index":114,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["item.directive.ts:61",{"_index":123,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["item.remove",{"_index":125,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["itemcollection",{"_index":520,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["itemcollection.push",{"_index":518,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["items",{"_index":219,"title":{},"body":{"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["items(items",{"_index":347,"title":{},"body":{"classes/OverflowModel.html":{}}}],["items.indexof(item",{"_index":530,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["items.length",{"_index":257,"title":{},"body":{"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["js",{"_index":628,"title":{},"body":{"dependencies.html":{}}}],["justify",{"_index":544,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["label",{"_index":428,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["last",{"_index":448,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["left",{"_index":205,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{},"miscellaneous/enumerations.html":{}}}],["legend",{"_index":556,"title":{},"body":{"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"index.html":{}}}],["lib/.../main.ts",{"_index":651,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lib/.../responsive",{"_index":645,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lib/ngx",{"_index":6,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["lib/tests/main.ts",{"_index":602,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["ln",{"_index":485,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["longer",{"_index":389,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["loop",{"_index":414,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["margin",{"_index":174,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["marginleft",{"_index":203,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["marginright",{"_index":207,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["mark",{"_index":450,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["matching",{"_index":67,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":452,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["maximal",{"_index":393,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["maxwidth",{"_index":453,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu",{"_index":77,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["menu.component",{"_index":580,"title":{},"body":{"modules/ResponsiveMenuModule.html":{}}}],["menu.component.html",{"_index":362,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu.component.scss",{"_index":360,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu.component.ts",{"_index":357,"title":{},"body":{"components/ResponsiveMenuComponent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["menu.component.ts:103",{"_index":408,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu.component.ts:113",{"_index":419,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu.component.ts:156",{"_index":375,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu.component.ts:190",{"_index":397,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu.component.ts:36",{"_index":402,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu.component.ts:39",{"_index":406,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu.component.ts:46",{"_index":392,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu.component.ts:64",{"_index":388,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu.component.ts:71",{"_index":390,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu.component.ts:86",{"_index":384,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu.component.ts:92",{"_index":378,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu.component.ts:95",{"_index":395,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menubar",{"_index":474,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menuitem",{"_index":516,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menuitem.remove",{"_index":472,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menuitem.visible",{"_index":517,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menuitemdirective",{"_index":70,"title":{"directives/MenuItemDirective.html":{}},"body":{"directives/MenuItemDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"coverage.html":{},"index.html":{}}}],["menuitems",{"_index":365,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menutoggledirective",{"_index":136,"title":{"directives/MenuToggleDirective.html":{}},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"coverage.html":{},"index.html":{}}}],["metadata",{"_index":85,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["methods",{"_index":21,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["miscellaneous",{"_index":643,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["model",{"_index":309,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["model/overflow.model",{"_index":311,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["module",{"_index":563,"title":{"modules/ResponsiveMenuModule.html":{}},"body":{"modules/ResponsiveMenuModule.html":{},"index.html":{}}}],["modules",{"_index":565,"title":{"modules.html":{}},"body":{"modules/ResponsiveMenuModule.html":{},"modules.html":{}}}],["more",{"_index":158,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["name",{"_index":100,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["native",{"_index":170,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["nativeelement",{"_index":150,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["need",{"_index":422,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["new",{"_index":57,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{},"coverage.html":{}}}],["next",{"_index":447,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["ng",{"_index":553,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["ngaftercontentinit",{"_index":457,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["ngafterviewinit",{"_index":183,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["ngmodule",{"_index":578,"title":{},"body":{"modules/ResponsiveMenuModule.html":{}}}],["ngondestroy",{"_index":193,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["ngoninit",{"_index":251,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["ngx",{"_index":222,"title":{},"body":{"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{},"dependencies.html":{}}}],["ngxresponsivemenuitem",{"_index":87,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["ngxresponsivemenuitem]'},{'name",{"_index":560,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["ngxresponsivemenutoggle",{"_index":147,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["ngxresponsivemenutoggle]'},{'name",{"_index":561,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["nodes",{"_index":263,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["nodes.foreach((item",{"_index":270,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["none",{"_index":161,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["notfied",{"_index":242,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["notified",{"_index":302,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["nowrap",{"_index":551,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["null",{"_index":118,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{}}}],["number",{"_index":175,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["oberservable",{"_index":301,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["observable",{"_index":304,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["old",{"_index":467,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["onasynchook(event",{"_index":33,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["ondestroy",{"_index":145,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["oninit",{"_index":221,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["open",{"_index":210,"title":{},"body":{"directives/MenuToggleDirective.html":{},"injectables/OverflowControl.html":{}}}],["openoverflow",{"_index":212,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["operations",{"_index":14,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/OverflowContentDirective.html":{}}}],["optional",{"_index":102,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["others",{"_index":524,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["out",{"_index":513,"title":{},"body":{"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"index.html":{}}}],["output",{"_index":246,"title":{},"body":{"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["outputs",{"_index":224,"title":{},"body":{"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["overflow",{"_index":111,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["overflowcontentdirective",{"_index":216,"title":{"directives/OverflowContentDirective.html":{}},"body":{"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"coverage.html":{},"index.html":{}}}],["overflowcontrol",{"_index":153,"title":{"injectables/OverflowControl.html":{}},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"coverage.html":{},"index.html":{}}}],["overflowctrl",{"_index":155,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["overflowdata",{"_index":507,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["overflowdata.length",{"_index":509,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["overflowhost",{"_index":340,"title":{},"body":{"classes/OverflowModel.html":{}}}],["overflowitems",{"_index":342,"title":{},"body":{"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["overflowitems.push(item",{"_index":535,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["overflowmodel",{"_index":310,"title":{"classes/OverflowModel.html":{}},"body":{"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"coverage.html":{}}}],["overflowtemplate",{"_index":341,"title":{},"body":{"classes/OverflowModel.html":{}}}],["overlay",{"_index":211,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["overview",{"_index":646,"title":{"index.html":{}},"body":{"index.html":{}}}],["package",{"_index":609,"title":{"dependencies.html":{}},"body":{}}],["pane",{"_index":385,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["parameters",{"_index":99,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["parent",{"_index":116,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["parseint(style.getpropertyvalue(\"margin",{"_index":204,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["parseint(this.tmpbuttonpane.nativeelement.offsetwidth",{"_index":539,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["pass",{"_index":16,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["pipe",{"_index":254,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["pipe(takeuntil(this.isdestroyed",{"_index":185,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["position",{"_index":379,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["possible",{"_index":381,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["possibleoverflowitems",{"_index":451,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["prepare",{"_index":512,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["preparemenuitems",{"_index":514,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["private",{"_index":55,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["process",{"_index":439,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["promise",{"_index":47,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["properties",{"_index":363,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["property",{"_index":165,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["protected",{"_index":433,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["provider/async",{"_index":249,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["provider/overflow.control",{"_index":177,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{}}}],["providers",{"_index":568,"title":{},"body":{"modules/ResponsiveMenuModule.html":{},"index.html":{}}}],["public",{"_index":22,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["push",{"_index":534,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["pushed",{"_index":522,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["put",{"_index":478,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["querylist",{"_index":403,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["reached",{"_index":477,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["read",{"_index":432,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["registers",{"_index":74,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{}}}],["remove",{"_index":89,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["removecontent(nodes",{"_index":273,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["removed",{"_index":238,"title":{},"body":{"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["render",{"_index":236,"title":{},"body":{"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["render(width",{"_index":480,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["rendercontent(nodes",{"_index":266,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["rendered",{"_index":79,"title":{},"body":{"directives/MenuItemDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["renderer",{"_index":96,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["renderer2",{"_index":97,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["rendering",{"_index":84,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["renders",{"_index":218,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["require",{"_index":606,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["require.context",{"_index":652,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required",{"_index":142,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["rerender",{"_index":399,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["reserved",{"_index":454,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["reservedwidth",{"_index":455,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["reset",{"_index":575,"title":{},"body":{"modules/ResponsiveMenuModule.html":{},"index.html":{}}}],["resizable",{"_index":623,"title":{},"body":{"dependencies.html":{}}}],["responsive",{"_index":76,"title":{},"body":{"directives/MenuItemDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["responsivemenu",{"_index":223,"title":{},"body":{"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{},"dependencies.html":{}}}],["responsivemenu.module.ts",{"_index":577,"title":{},"body":{"modules/ResponsiveMenuModule.html":{}}}],["responsivemenu/components/responsive",{"_index":356,"title":{},"body":{"components/ResponsiveMenuComponent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["responsivemenu/directives/menu",{"_index":72,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"coverage.html":{}}}],["responsivemenu/directives/overflow.directive.ts",{"_index":217,"title":{},"body":{"directives/OverflowContentDirective.html":{},"coverage.html":{}}}],["responsivemenu/directives/overflow.directive.ts:36",{"_index":243,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["responsivemenu/directives/overflow.directive.ts:42",{"_index":239,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["responsivemenu/directives/overflow.directive.ts:50",{"_index":241,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["responsivemenu/directives/overflow.directive.ts:56",{"_index":234,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["responsivemenu/directives/overflow.directive.ts:58",{"_index":232,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["responsivemenu/directives/overflow.directive.ts:67",{"_index":245,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["responsivemenu/model/overflow.model.ts",{"_index":323,"title":{},"body":{"classes/OverflowModel.html":{},"coverage.html":{}}}],["responsivemenu/model/overflow.model.ts:12",{"_index":330,"title":{},"body":{"classes/OverflowModel.html":{}}}],["responsivemenu/model/overflow.model.ts:16",{"_index":328,"title":{},"body":{"classes/OverflowModel.html":{}}}],["responsivemenu/model/overflow.model.ts:20",{"_index":334,"title":{},"body":{"classes/OverflowModel.html":{}}}],["responsivemenu/model/overflow.model.ts:24",{"_index":332,"title":{},"body":{"classes/OverflowModel.html":{}}}],["responsivemenu/model/overflow.model.ts:28",{"_index":338,"title":{},"body":{"classes/OverflowModel.html":{}}}],["responsivemenu/model/overflow.model.ts:32",{"_index":336,"title":{},"body":{"classes/OverflowModel.html":{}}}],["responsivemenu/model/overflow.model.ts:36",{"_index":326,"title":{},"body":{"classes/OverflowModel.html":{}}}],["responsivemenu/ngx",{"_index":576,"title":{},"body":{"modules/ResponsiveMenuModule.html":{}}}],["responsivemenu/provider/async",{"_index":7,"title":{},"body":{"classes/AsyncEvent.html":{},"coverage.html":{}}}],["responsivemenu/provider/overflow.control.ts",{"_index":279,"title":{},"body":{"injectables/OverflowControl.html":{},"coverage.html":{}}}],["responsivemenu/provider/overflow.control.ts:25",{"_index":293,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["responsivemenu/provider/overflow.control.ts:32",{"_index":300,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["responsivemenu/provider/overflow.control.ts:39",{"_index":306,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["responsivemenu/provider/overflow.control.ts:41",{"_index":285,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["responsivemenu/provider/overflow.control.ts:50",{"_index":308,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["responsivemenu/provider/overflow.control.ts:57",{"_index":287,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["responsivemenu/provider/overflow.control.ts:61",{"_index":291,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["responsivemenu/provider/overflow.control.ts:72",{"_index":290,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["responsivemenu/provider/overflow.control.ts:82",{"_index":286,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["responsivemenucomponent",{"_index":351,"title":{"components/ResponsiveMenuComponent.html":{}},"body":{"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"coverage.html":{},"index.html":{}}}],["responsivemenumodule",{"_index":564,"title":{"modules/ResponsiveMenuModule.html":{}},"body":{"modules/ResponsiveMenuModule.html":{},"index.html":{},"modules.html":{}}}],["result",{"_index":66,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":68,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":59,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["returns",{"_index":42,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["retursn",{"_index":288,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["right",{"_index":208,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{},"miscellaneous/enumerations.html":{}}}],["root",{"_index":133,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["row",{"_index":547,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["rxjs",{"_index":53,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":179,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["selector",{"_index":86,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["set",{"_index":108,"title":{},"body":{"directives/MenuItemDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["setcustomtogglebutton(btn",{"_index":418,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["setdefaulttogglebtn(btn",{"_index":407,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["setdisplay(hidden",{"_index":199,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["setforceoverflow(forced",{"_index":292,"title":{},"body":{"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["sethost(host",{"_index":329,"title":{},"body":{"classes/OverflowModel.html":{}}}],["setitems(items",{"_index":337,"title":{},"body":{"classes/OverflowModel.html":{}}}],["settemplate(template",{"_index":333,"title":{},"body":{"classes/OverflowModel.html":{}}}],["setvisible(hidden",{"_index":196,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["show",{"_index":141,"title":{},"body":{"directives/MenuToggleDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["show(soft",{"_index":162,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["showmax",{"_index":369,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["shown",{"_index":303,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["shrink",{"_index":552,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["smaller",{"_index":449,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["soft",{"_index":164,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{}}}],["spec\\.ts",{"_index":653,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state",{"_index":50,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["statements",{"_index":588,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":409,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["string",{"_index":383,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["style",{"_index":201,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["styles",{"_index":353,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["styleurls",{"_index":359,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["subject",{"_index":52,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["subscribe",{"_index":186,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["subscribe((items",{"_index":259,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["support",{"_index":647,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":648,"title":{},"body":{"modules.html":{}}}],["table",{"_index":608,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":607,"title":{},"body":{"coverage.html":{}}}],["takeuntil",{"_index":178,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["takeuntil(this.isdestroyed",{"_index":255,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["template",{"_index":325,"title":{},"body":{"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["template(template",{"_index":345,"title":{},"body":{"classes/OverflowModel.html":{}}}],["templateref",{"_index":339,"title":{},"body":{"classes/OverflowModel.html":{}}}],["templateurl",{"_index":361,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["temporary",{"_index":438,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.afterremove.emit",{"_index":276,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["this.afterrender.emit",{"_index":272,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["this.aligntoggle",{"_index":531,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.beforeremove.emit(event",{"_index":275,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["this.beforeremove.observers.length",{"_index":274,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["this.beforerender.emit(event",{"_index":268,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["this.beforerender.observers.length",{"_index":267,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["this.buttonpane.nativeelement",{"_index":462,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.changedetector.detectchanges",{"_index":473,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.clearview",{"_index":497,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.close",{"_index":320,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["this.complete",{"_index":62,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["this.doasyncoperation",{"_index":36,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["this.el",{"_index":120,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["this.el.nativeelement",{"_index":131,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{}}}],["this.el.nativeelement.getboundingclientrect().width",{"_index":200,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["this.event",{"_index":56,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["this.event$.complete",{"_index":65,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["this.event$.next(false",{"_index":63,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["this.event$.next(true",{"_index":61,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["this.event$.topromise",{"_index":60,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["this.finalizemenuitems",{"_index":508,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.finalizerenderprocess",{"_index":490,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.forced",{"_index":314,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["this.hide$.asobservable",{"_index":316,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["this.hide$.next(this.overflowmodel.items",{"_index":322,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["this.hostel.nativeelement.getboundingclientrect().width",{"_index":483,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.initrenderprocess",{"_index":481,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.iscustombutton",{"_index":436,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.isdestroyed",{"_index":182,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{}}}],["this.isdestroyed$.next",{"_index":456,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.isdestroyed.complete",{"_index":195,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{}}}],["this.isdestroyed.next(true",{"_index":194,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{}}}],["this.isforcedoverflow",{"_index":429,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.items.length",{"_index":349,"title":{},"body":{"classes/OverflowModel.html":{}}}],["this.maxwidth",{"_index":482,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.menuitem",{"_index":121,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["this.menuitems.changes",{"_index":458,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.menuitems.foreach((menuitem",{"_index":471,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.menuitems.reduce((itemcollection",{"_index":515,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.menuitems.toarray().reduce((overflowitems",{"_index":529,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.openoverflow",{"_index":187,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["this.overflowctrl.close",{"_index":214,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["this.overflowctrl.data.items",{"_index":499,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.overflowctrl.forceoverflow",{"_index":430,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.overflowctrl.hide",{"_index":261,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["this.overflowctrl.isopen",{"_index":213,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["this.overflowctrl.open",{"_index":215,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{}}}],["this.overflowctrl.show",{"_index":253,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["this.overflowctrl.update",{"_index":466,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.overflowhost",{"_index":344,"title":{},"body":{"classes/OverflowModel.html":{}}}],["this.overflowitems",{"_index":348,"title":{},"body":{"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["this.overflowitems.length",{"_index":527,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.overflowitems.push",{"_index":519,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.overflowitems.push(item",{"_index":489,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.overflowmodel",{"_index":317,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["this.overflowmodel.items.length",{"_index":319,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["this.overflowtemplate",{"_index":346,"title":{},"body":{"classes/OverflowModel.html":{}}}],["this.possibleoverflowitems",{"_index":498,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.possibleoverflowitems.concat(this.overflowitems",{"_index":528,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.preparemenuitems",{"_index":484,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.removecontent(items",{"_index":262,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["this.render",{"_index":464,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.render(width",{"_index":465,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.rendercontent(items",{"_index":260,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["this.rendercontent(this.overflowctrl.data.items",{"_index":252,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["this.rendered",{"_index":318,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["this.rendered.emit",{"_index":511,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.renderer.appendchild",{"_index":461,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.renderer.appendchild(parent",{"_index":132,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["this.renderer.insertbefore(parent",{"_index":130,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["this.renderer.parentnode",{"_index":134,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["this.renderer.removechild",{"_index":135,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["this.renderer.setstyle(this.el.nativeelement",{"_index":197,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["this.reservedwidth",{"_index":501,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.setdisplay",{"_index":189,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["this.setdisplay(true",{"_index":191,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["this.setvisible",{"_index":190,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["this.setvisible(soft",{"_index":188,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["this.show$.asobservable",{"_index":315,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["this.show$.next(this.overflowmodel.items",{"_index":321,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["this.showmax",{"_index":486,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.togglebtn",{"_index":434,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.togglebtn.hide",{"_index":503,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.togglebtn.nativeelement",{"_index":463,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.togglebtn.show",{"_index":510,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.togglebtn.show(true",{"_index":500,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.togglebtn.width",{"_index":502,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.update",{"_index":459,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.validatesize(item",{"_index":488,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.viewref",{"_index":250,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["through",{"_index":11,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["tmpbuttonpane",{"_index":443,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["together",{"_index":540,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["toggle",{"_index":138,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["toggle.directive",{"_index":426,"title":{},"body":{"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{}}}],["toggle.directive.ts",{"_index":137,"title":{},"body":{"directives/MenuToggleDirective.html":{},"coverage.html":{}}}],["toggle.directive.ts:27",{"_index":154,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["toggle.directive.ts:46",{"_index":169,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["toggle.directive.ts:53",{"_index":163,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["toggle.directive.ts:61",{"_index":159,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["toggle.directive.ts:85",{"_index":172,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["togglebtn",{"_index":445,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["tree",{"_index":355,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["true",{"_index":106,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":34,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["tslib",{"_index":639,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":101,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["until",{"_index":411,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["up",{"_index":492,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["update",{"_index":282,"title":{},"body":{"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["update(width",{"_index":396,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["usedsize",{"_index":538,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["validate",{"_index":536,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["validatesize",{"_index":537,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["value",{"_index":105,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":382,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["var",{"_index":558,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["variable",{"_index":603,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":650,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["view",{"_index":229,"title":{},"body":{"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["viewchild",{"_index":424,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["viewchild(menutoggledirective",{"_index":431,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["viewcontainerref",{"_index":231,"title":{},"body":{"directives/OverflowContentDirective.html":{},"classes/OverflowModel.html":{}}}],["viewref",{"_index":233,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["views",{"_index":493,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["visibility",{"_index":198,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["visibilty",{"_index":166,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["visible",{"_index":91,"title":{},"body":{"directives/MenuItemDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["visualization",{"_index":441,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["void",{"_index":43,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["wait",{"_index":410,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["want",{"_index":209,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["width",{"_index":151,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["wrap",{"_index":550,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["yes",{"_index":401,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["zone.js",{"_index":641,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":574,"title":{},"body":{"modules/ResponsiveMenuModule.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AsyncEvent.html":{"url":"classes/AsyncEvent.html","title":"class - AsyncEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AsyncEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-responsivemenu/provider/async-event.ts\n        \n\n            \n                Description\n            \n            \n                AsyncEvent which will emits through EventEmitter\nso we can do some (async) operations before we\nlet pass / cancel the event.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cancel\n                            \n                            \n                                    Public\n                                done\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    completed\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-responsivemenu/provider/async-event.ts:11\n                            \n                        \n\n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            cancel\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    cancel()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-responsivemenu/provider/async-event.ts:54\n                \n            \n\n\n            \n                \n                    should be called to continue event\n\n\n                    \n                        Example :\n                        \n                            public async onAsyncHook(event: AsyncEvent) {\n     try {\n         await this.doAsyncOperation();\n         event.done();\n     } catch (fatalError: Error) {\n         event.cancel();\n     }\n}\n                        \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            done\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    done()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-responsivemenu/provider/async-event.ts:35\n                \n            \n\n\n            \n                \n                    should be called to continue event\n\n\n                    \n                        Example :\n                        \n                            public async onAsyncHook(event: AsyncEvent) {\n     await this.doAsyncOperation();\n     event.done();\n}\n                        \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        completed\n                    \n                \n\n                \n                    \n                        getcompleted()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/provider/async-event.ts:21\n                                \n                            \n                    \n                        \n                                returns promise which holds current state from event\n\n\n                                \n                                \n                                \n                                    Returns :     Promise\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Subject } from \"rxjs\";\n\n/**\n * AsyncEvent which will emits through EventEmitter\n * so we can do some (async) operations before we\n * let pass / cancel the event.\n *\n */\nexport class AsyncEvent {\n\n    private event$: Subject;\n\n    public constructor() {\n        this.event$ = new Subject();\n    }\n\n    /**\n     * returns promise which holds current state from event\n     * @internal\n     */\n    public get completed(): Promise {\n        return this.event$.toPromise();\n    }\n\n    /**\n     * should be called to continue event\n     *\n     * @example\n     *\n     * public async onAsyncHook(event: AsyncEvent) {\n     *     await this.doAsyncOperation();\n     *     event.done();\n     * }\n     */\n    public done() {\n        this.event$.next(true);\n        this.complete();\n    }\n\n    /**\n     * should be called to continue event\n     *\n     * @example\n     *\n     * public async onAsyncHook(event: AsyncEvent) {\n     *     try {\n     *         await this.doAsyncOperation();\n     *         event.done();\n     *     } catch (fatalError: Error) {\n     *         event.cancel();\n     *     }\n     * }\n     */\n    public cancel() {\n        this.event$.next(false);\n        this.complete();\n    }\n\n    private complete() {\n        this.event$.complete();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/MenuItemDirective.html":{"url":"directives/MenuItemDirective.html","title":"directive - MenuItemDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  MenuItemDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-responsivemenu/directives/menu-item.directive.ts\n        \n\n            \n                Description\n            \n            \n                registers item as responsive menu item, all other content will not rendered\n\n            \n\n\n            \n                Example\n            \n            \n                        \n                            \n     Button 1\n     Button 2\n     Button 3\n     \n     Not rendering\n\n                        \n            \n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxResponsiveMenuItem]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addTo\n                            \n                            \n                                    Public\n                                remove\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                visible\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                class.responsive-menu--item\n                            \n                        \n                    \n                \n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(el: ElementRef, renderer: Renderer2)\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-responsivemenu/directives/menu-item.directive.ts:29\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        el\n                                                  \n                                                        \n                                                                        ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                        Renderer2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        visible\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/directives/menu-item.directive.ts:26\n                            \n                        \n                \n                    \n                        if set to false menu item will allways rendered to overflow\ndefault false\n\n                    \n                \n            \n        \n\n\n            \n    HostBindings        \n            \n                \n                    \n                        \n                        \n                            \n                            class.responsive-menu--item\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/directives/menu-item.directive.ts:29\n                            \n                        \n\n\n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addTo\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addTo(parent: HTMLElement, before: HTMLElement)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-responsivemenu/directives/menu-item.directive.ts:45\n                \n            \n\n\n            \n                \n                    add item to parent element\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    parent\n                                    \n                                            HTMLElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    before\n                                    \n                                            HTMLElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        null\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            const parent: ElementRef = this.el;\nconst item: MenuItemDirective = this.menuItem;\nitem.addTo(this.el.nativeElement);\n                        \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-responsivemenu/directives/menu-item.directive.ts:61\n                \n            \n\n\n            \n                \n                    remove item from parent children\n\n\n                    \n                        Example :\n                        \n                            const item: MenuItemDirective = this.menuItem;\nitem.remove();\n                        \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, ElementRef, HostBinding, Input, Renderer2 } from \"@angular/core\";\n\n/**\n * registers item as responsive menu item, all other content will not rendered\n *\n * @example\n *\n * \n *     Button 1\n *     Button 2\n *     Button 3\n *     \n *     Not rendering\n * \n */\n@Directive( {\n    selector: \"[ngxResponsiveMenuItem]\"\n} )\nexport class MenuItemDirective  {\n\n    /**\n     * if set to false menu item will allways rendered to overflow\n     * default false\n     */\n    @Input()\n    public visible = true;\n\n    @HostBinding( \"class.responsive-menu--item\" )\n    public className = true;\n\n    constructor(\n        private el: ElementRef,\n        private renderer: Renderer2\n    ) { }\n\n    /**\n     * add item to parent element\n     *\n     * @example\n     *\n     * const parent: ElementRef = this.el;\n     * const item: MenuItemDirective = this.menuItem;\n     * item.addTo(this.el.nativeElement);\n     */\n    public addTo( parent: HTMLElement, before: HTMLElement = null ) {\n        if (before) {\n            this.renderer.insertBefore(parent, this.el.nativeElement, before);\n            return;\n        }\n        this.renderer.appendChild(parent, this.el.nativeElement);\n    }\n\n    /**\n     * remove item from parent children\n     *\n     * @example\n     *\n     * const item: MenuItemDirective = this.menuItem;\n     * item.remove();\n     */\n    public remove() {\n        const root: HTMLElement = this.renderer.parentNode( this.el.nativeElement );\n        this.renderer.removeChild( root, this.el.nativeElement );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/MenuToggleDirective.html":{"url":"directives/MenuToggleDirective.html","title":"directive - MenuToggleDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  MenuToggleDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-responsivemenu/directives/menu-toggle.directive.ts\n        \n\n            \n                Description\n            \n            \n                toggle button which automatically registers on click event an show overflow if required\n\n            \n\n            \n                Implements\n            \n            \n                            AfterViewInit\n                            OnDestroy\n            \n\n            \n                Example\n            \n            \n                        \n                            \n     ...\n     Custom Toggle Button\n\n                        \n            \n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxResponsiveMenuToggle]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                hide\n                            \n                            \n                                    Public\n                                show\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                class.more\n                            \n                        \n                    \n                \n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    nativeElement\n                                \n                                \n                                    width\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(overflowCtrl: OverflowControl, renderer: Renderer2, el: ElementRef)\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-responsivemenu/directives/menu-toggle.directive.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        overflowCtrl\n                                                  \n                                                        \n                                                                        OverflowControl\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                        Renderer2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        el\n                                                  \n                                                        \n                                                                        ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n            \n    HostBindings        \n            \n                \n                    \n                        \n                        \n                            \n                            class.more\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/directives/menu-toggle.directive.ts:27\n                            \n                        \n\n                \n                    \n                        add host css class more\n\n                    \n                \n\n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            hide\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hide()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-responsivemenu/directives/menu-toggle.directive.ts:61\n                \n            \n\n\n            \n                \n                    hide button (display none)\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            show\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    show(soft)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-responsivemenu/directives/menu-toggle.directive.ts:53\n                \n            \n\n\n            \n                \n                    display button if soft is true button has css property visibilty: hidden\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    soft\n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        nativeElement\n                    \n                \n\n                \n                    \n                        getnativeElement()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/directives/menu-toggle.directive.ts:46\n                                \n                            \n                    \n                        \n                                return native element from more button\n\n\n                                \n                                    Returns :     HTMLElement\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        width\n                    \n                \n\n                \n                    \n                        getwidth()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/directives/menu-toggle.directive.ts:85\n                                \n                            \n                    \n                        \n                                get current width of button includes margin\n\n\n                                \n                                    Returns :         number\n\n                                \n                        \n                    \n\n            \n        \n\n\n    \n\n\n    \n        import { Directive, ElementRef, AfterViewInit, OnDestroy, Renderer2, HostBinding } from \"@angular/core\";\nimport { fromEvent, Subject } from \"rxjs\";\nimport { OverflowControl } from \"../provider/overflow.control\";\nimport { takeUntil } from \"rxjs/operators\";\n\n/**\n * toggle button which automatically registers on click event an show overflow if required\n *\n * @example\n *\n * \n *     ...\n *     Custom Toggle Button\n * \n */\n@Directive( {\n    selector: \"[ngxResponsiveMenuToggle]\"\n} )\nexport class MenuToggleDirective implements AfterViewInit, OnDestroy {\n\n    private isDestroyed: Subject;\n\n    /**\n     * add host css class more\n     */\n    @HostBinding(\"class.more\")\n    public className = true;\n\n    constructor(\n        private overflowCtrl: OverflowControl,\n        private renderer: Renderer2,\n        private el: ElementRef,\n    ) {\n        this.isDestroyed = new Subject();\n    }\n\n    public ngAfterViewInit() {\n        fromEvent(this.el.nativeElement, \"click\")\n            .pipe(takeUntil(this.isDestroyed))\n            .subscribe(() => this.openOverflow());\n    }\n\n    /**\n     * return native element from more button\n     */\n    public get nativeElement(): HTMLElement {\n        return this.el.nativeElement;\n    }\n\n    /**\n     * display button if soft is true button has css property visibilty: hidden\n     */\n    public show(soft = false) {\n        this.setVisible(soft);\n        this.setDisplay();\n    }\n\n    /**\n     * hide button (display none)\n     */\n    public hide() {\n        this.setVisible();\n        this.setDisplay(true);\n    }\n\n    /**\n     * destroys button\n     */\n    public ngOnDestroy() {\n        this.isDestroyed.next(true);\n        this.isDestroyed.complete();\n    }\n\n    private setVisible(hidden = false) {\n        this.renderer.setStyle(this.el.nativeElement, \"visibility\", hidden ? \"hidden\" : null);\n    }\n\n    private setDisplay(hidden = false) {\n        this.renderer.setStyle(this.el.nativeElement, \"display\", hidden ? \"none\" : null);\n    }\n\n    /**\n     * get current width of button includes margin\n     */\n    public get width(): number {\n\n        const width = this.el.nativeElement.getBoundingClientRect().width;\n        const style = getComputedStyle( this.el.nativeElement );\n\n        const marginLeft  = parseInt(style.getPropertyValue(\"margin-left\") , 10);\n        const marginRight = parseInt(style.getPropertyValue(\"margin-right\"), 10);\n\n        return width + marginLeft + marginRight;\n    }\n\n    /**\n     * if we click on the button we want to open the overlay\n     */\n    private openOverflow() {\n        this.overflowCtrl.isOpen() ? this.overflowCtrl.close() : this.overflowCtrl.open();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/OverflowContentDirective.html":{"url":"directives/OverflowContentDirective.html","title":"directive - OverflowContentDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  OverflowContentDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-responsivemenu/directives/overflow.directive.ts\n        \n\n            \n                Description\n            \n            \n                renders overflow content if overflow items exists\n\n            \n\n            \n                Implements\n            \n            \n                            OnInit\n                            OnDestroy\n            \n\n            \n                Example\n            \n            \n                        \n                            \n   \n   \n     \n   \n\n\n\n   \n   \n\n                        \n            \n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        ngx-responsivemenu-overflow\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n\n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                afterRemove\n                            \n                            \n                                afterRender\n                            \n                            \n                                beforeRemove\n                            \n                            \n                                beforeRender\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    view\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(viewRef: ViewContainerRef, overflowCtrl: OverflowControl)\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-responsivemenu/directives/overflow.directive.ts:58\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        viewRef\n                                                  \n                                                        \n                                                                        ViewContainerRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        overflowCtrl\n                                                  \n                                                        \n                                                                        OverflowControl\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    Outputs\n        \n            \n                \n                    \n                        \n                        afterRemove\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/directives/overflow.directive.ts:56\n                            \n                        \n                \n                    \n                        overflow container render hook after content has been removed.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        afterRender\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/directives/overflow.directive.ts:42\n                            \n                        \n                \n                    \n                        overflow container render hook after content has been applied.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        beforeRemove\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/directives/overflow.directive.ts:50\n                            \n                        \n                \n                    \n                        overflow container render hook before content will be removed.\nEmits AsyncEvent which should notfied with $event.done() after\nall operations are completed\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        beforeRender\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/directives/overflow.directive.ts:36\n                            \n                        \n                \n                    \n                        overflow container render hook before content will be applied.\nEmits AsyncEvent which should notfied with $event.done() after\nall operations are completed\n\n                    \n                \n            \n        \n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        view\n                    \n                \n\n                \n                    \n                        getview()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/directives/overflow.directive.ts:67\n                                \n                            \n\n            \n        \n\n\n    \n\n\n    \n        import { Directive, ViewContainerRef, OnInit, OnDestroy, Output, EventEmitter } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil, filter } from \"rxjs/operators\";\nimport { OverflowControl } from \"../provider/overflow.control\";\nimport { MenuItemDirective } from \"./menu-item.directive\";\nimport { AsyncEvent } from \"../provider/async-event\";\n\n/**\n * renders overflow content if overflow items exists\n *\n * @example\n *\n * \n *   \n *   \n *     \n *   \n * \n *\n * \n *   \n *   \n * \n */\n@Directive( {\n    selector: \"ngx-responsivemenu-overflow\",\n})\nexport class OverflowContentDirective implements OnInit, OnDestroy {\n\n    /**\n     * overflow container render hook before content will be applied.\n     * Emits AsyncEvent which should notfied with $event.done() after\n     * all operations are completed\n     */\n    @Output()\n    public beforeRender: EventEmitter = new EventEmitter();\n\n    /**\n     * overflow container render hook after content has been applied.\n     */\n    @Output()\n    public afterRender: EventEmitter = new EventEmitter();\n\n    /**\n     * overflow container render hook before content will be removed.\n     * Emits AsyncEvent which should notfied with $event.done() after\n     * all operations are completed\n     */\n    @Output()\n    public beforeRemove: EventEmitter = new EventEmitter();\n\n    /**\n     * overflow container render hook after content has been removed.\n     */\n    @Output()\n    public afterRemove: EventEmitter = new EventEmitter();\n\n    private isDestroyed: Subject;\n\n    constructor(\n        private viewRef: ViewContainerRef,\n        private overflowCtrl: OverflowControl\n    ) {\n        this.isDestroyed = new Subject();\n    }\n\n    public get view(): ViewContainerRef {\n        return this.viewRef;\n    }\n\n    public ngOnDestroy() {\n        this.isDestroyed.next(true);\n        this.isDestroyed.complete();\n    }\n\n    public ngOnInit() {\n\n        if (this.overflowCtrl.open) {\n            this.renderContent(this.overflowCtrl.data.items);\n        }\n\n        this.overflowCtrl.show\n            .pipe(\n                takeUntil(this.isDestroyed),\n                filter((items) => items.length > 0),\n            ).subscribe((items) => this.renderContent(items));\n\n        this.overflowCtrl.hide\n            .pipe(takeUntil(this.isDestroyed))\n            .subscribe((items) => this.removeContent(items));\n    }\n\n    /**\n     * render nodes into host view, calls beforeRender and afterRender hooks\n     */\n    private async renderContent(nodes: MenuItemDirective[]) {\n        if (this.beforeRender.observers.length) {\n            const event = new AsyncEvent();\n            this.beforeRender.emit(event);\n            await event.completed;\n        }\n        nodes.forEach((item) => item.addTo(this.viewRef.element.nativeElement));\n        this.afterRender.emit();\n    }\n\n    /**\n     * remove nodes from host view, calls beforeRemove, afterRemove\n     */\n    private async removeContent(nodes: MenuItemDirective[]) {\n        if (this.beforeRemove.observers.length) {\n            const event = new AsyncEvent();\n            this.beforeRemove.emit(event);\n            await event.completed;\n        }\n        nodes.forEach((item) => item.remove());\n        this.afterRemove.emit();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OverflowControl.html":{"url":"injectables/OverflowControl.html","title":"injectable - OverflowControl","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  OverflowControl\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-responsivemenu/provider/overflow.control.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                close\n                            \n                            \n                                    Public\n                                isOpen\n                            \n                            \n                                    Public\n                                open\n                            \n                            \n                                    Public\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    forceOverflow\n                                \n                                \n                                    show\n                                \n                                \n                                    hide\n                                \n                                \n                                    data\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-responsivemenu/provider/overflow.control.ts:41\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            close\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    close()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-responsivemenu/provider/overflow.control.ts:82\n                \n            \n\n\n            \n                \n                    close overflow content\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isOpen\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isOpen()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-responsivemenu/provider/overflow.control.ts:57\n                \n            \n\n\n            \n                \n                    retursn true if overflow container is rendered\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            open\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    open()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-responsivemenu/provider/overflow.control.ts:72\n                \n            \n\n\n            \n                \n                    show overflow content\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-responsivemenu/provider/overflow.control.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        forceOverflow\n                    \n                \n\n\n                \n                    \n                        setforceOverflow(forced: boolean)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/provider/overflow.control.ts:25\n                                \n                            \n                    \n                        \n                                set force overflow, if set to true this will allways emits show\nfor overflow conainer even if no overflow items exits.\ndefault is set to false\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            forced\n                                                    \n                                                            \n                                                                            boolean\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        show\n                    \n                \n\n                \n                    \n                        getshow()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/provider/overflow.control.ts:32\n                                \n                            \n                    \n                        \n                                returns oberservable to get notified overflow should be shown\n\n\n                                \n                                    Returns :     Observable\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        hide\n                    \n                \n\n                \n                    \n                        gethide()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/provider/overflow.control.ts:39\n                                \n                            \n                    \n                        \n                                returns oberservable to get notified overflow should be hide\n\n\n                                \n                                    Returns :     Observable\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n\n                \n                    \n                        getdata()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/provider/overflow.control.ts:50\n                                \n                            \n                    \n                        \n                                returns overflow data model\n\n\n                                \n                                    Returns :         OverflowModel\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { OverflowModel } from \"../model/overflow.model\";\nimport { Injectable } from \"@angular/core\";\nimport { MenuItemDirective } from \"../directives/menu-item.directive\";\nimport { Observable, Subject } from \"rxjs\";\n\n@Injectable()\nexport class OverflowControl {\n\n    private rendered = false;\n\n    private overflowModel: OverflowModel;\n\n    private show$: Subject = new Subject();\n\n    private hide$: Subject = new Subject();\n\n    private forced: boolean;\n\n    /**\n     * set force overflow, if set to true this will allways emits show\n     * for overflow conainer even if no overflow items exits.\n     *\n     * default is set to false\n     */\n    public set forceOverflow(forced: boolean) {\n        this.forced = forced;\n    }\n\n    /**\n     * returns oberservable to get notified overflow should be shown\n     */\n    public get show(): Observable {\n        return this.show$.asObservable();\n    }\n\n    /**\n     * returns oberservable to get notified overflow should be hide\n     */\n    public get hide(): Observable {\n        return this.hide$.asObservable();\n    }\n\n    public constructor() {\n        this.overflowModel = new OverflowModel();\n    }\n\n    /**\n     * returns overflow data model\n     */\n    public get data(): OverflowModel {\n        return this.overflowModel;\n    }\n\n    /**\n     * retursn true if overflow container is rendered\n     */\n    public isOpen(): boolean {\n        return this.rendered;\n    }\n\n    public update() {\n        if (this.rendered) {\n            this.overflowModel.items.length === 0 && !this.forced\n                ? this.close()\n                : this.show$.next(this.overflowModel.items);\n        }\n    }\n\n    /**\n     * show overflow content\n     */\n    public open() {\n        if (!this.rendered && (this.forced || this.overflowModel.items.length)) {\n            this.rendered = true;\n            this.show$.next(this.overflowModel.items);\n        }\n    }\n\n    /**\n     * close overflow content\n     */\n    public close() {\n        if (this.rendered) {\n            this.rendered = false;\n            this.hide$.next(this.overflowModel.items);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OverflowModel.html":{"url":"classes/OverflowModel.html","title":"class - OverflowModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OverflowModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-responsivemenu/model/overflow.model.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isOverflow\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    host\n                                \n                                \n                                    template\n                                \n                                \n                                    items\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isOverflow\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isOverflow()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-responsivemenu/model/overflow.model.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        host\n                    \n                \n\n                \n                    \n                        gethost()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/model/overflow.model.ts:16\n                                \n                            \n\n                \n                    \n                        sethost(host)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/model/overflow.model.ts:12\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            host\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        template\n                    \n                \n\n                \n                    \n                        gettemplate()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/model/overflow.model.ts:24\n                                \n                            \n\n                \n                    \n                        settemplate(template)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/model/overflow.model.ts:20\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            template\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        items\n                    \n                \n\n                \n                    \n                        getitems()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/model/overflow.model.ts:32\n                                \n                            \n\n                \n                    \n                        setitems(items: [])\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/model/overflow.model.ts:28\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            items\n                                                    \n                                                            \n                                                                        []\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import { ViewContainerRef, TemplateRef } from \"@angular/core\";\nimport { MenuItemDirective } from \"../directives/menu-item.directive\";\n\nexport class OverflowModel {\n\n    private overflowHost: ViewContainerRef;\n\n    private overflowTemplate: TemplateRef;\n\n    private overflowItems: MenuItemDirective[] = [];\n\n    public set host(host: ViewContainerRef) {\n        this.overflowHost = host;\n    }\n\n    public get host(): ViewContainerRef {\n        return this.overflowHost;\n    }\n\n    public set template(template: TemplateRef) {\n        this.overflowTemplate = template;\n    }\n\n    public get template(): TemplateRef {\n        return this.overflowTemplate;\n    }\n\n    public set items(items: MenuItemDirective[]) {\n        this.overflowItems = items;\n    }\n\n    public get items(): MenuItemDirective[] {\n        return this.overflowItems;\n    }\n\n    public isOverflow() {\n        return this.items.length > 0;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ResponsiveMenuComponent.html":{"url":"components/ResponsiveMenuComponent.html","title":"component - ResponsiveMenuComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ResponsiveMenuComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    lib/ngx-responsivemenu/components/responsive-menu.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    AfterViewInit\n                    AfterContentInit\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ngx-responsivemenu\n            \n\n            \n                styleUrls\n                ./responsive-menu.component.scss\n            \n\n\n\n            \n                templateUrl\n                responsive-menu.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isCustomButton\n                            \n                            \n                                    Public\n                                menuItems\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                update\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                alignToggle\n                            \n                            \n                                classBtnPane\n                            \n                            \n                                customOverflow\n                            \n                            \n                                forceOverflow\n                            \n                            \n                                showMax\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                rendered\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    forceOverflow\n                                \n                                \n                                    defaultToggleBtn\n                                \n                                \n                                    customToggleButton\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(overflowCtrl: OverflowControl, renderer: Renderer2, hostEl: ElementRef, changeDetector: ChangeDetectorRef)\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-responsivemenu/components/responsive-menu.component.ts:156\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        overflowCtrl\n                                                  \n                                                        \n                                                                        OverflowControl\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                        Renderer2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hostEl\n                                                  \n                                                        \n                                                                        ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        changeDetector\n                                                  \n                                                        \n                                                                        ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        alignToggle\n                    \n                \n                \n                    \n                        Type :         BtnAlign\n\n                    \n                \n                \n                    \n                        Default value : BtnAlign.RIGHT\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/components/responsive-menu.component.ts:92\n                            \n                        \n                \n                    \n                        set position of toggle btn, possible values are left or right\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        classBtnPane\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/components/responsive-menu.component.ts:86\n                            \n                        \n                \n                    \n                        add a class for the button pane as example for bootstrap btn-group\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        customOverflow\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/components/responsive-menu.component.ts:64\n                            \n                        \n                \n                    \n                        if true content will not rendered longer in default container for overflow\ncontent and should rendered in a custom overflow container.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        forceOverflow\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/components/responsive-menu.component.ts:71\n                            \n                        \n                \n                    \n                        if true toggle button will allways be visible even if content\nfits into button pane\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        showMax\n                    \n                \n                \n                    \n                        Default value : -1\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/components/responsive-menu.component.ts:46\n                            \n                        \n                \n                    \n                        set maximal amount of items which could rendered into button pane\nall other items will automatically add to overflow container\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        rendered\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/components/responsive-menu.component.ts:95\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(width?: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-responsivemenu/components/responsive-menu.component.ts:190\n                \n            \n\n\n            \n                \n                    update view, this will remove all\ncontents and rerender buttons\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    width\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            isCustomButton\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/components/responsive-menu.component.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            menuItems\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     QueryList\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ContentChildren(MenuItemDirective)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/components/responsive-menu.component.ts:39\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        forceOverflow\n                    \n                \n\n\n                \n                    \n                        setforceOverflow(forced: boolean)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/components/responsive-menu.component.ts:71\n                                \n                            \n                    \n                        \n                                if true toggle button will allways be visible even if content\nfits into button pane\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            forced\n                                                    \n                                                            \n                                                                            boolean\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        defaultToggleBtn\n                    \n                \n\n\n                \n                    \n                        setdefaultToggleBtn(btn)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/components/responsive-menu.component.ts:103\n                                \n                            \n                    \n                        \n                                static: false wait until change detection loop has been finished in this case\nbutton el will not rendered to dom if a custom button is given but we have to wait\nuntil change detection finished before we get it\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            btn\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        customToggleButton\n                    \n                \n\n\n                \n                    \n                        setcustomToggleButton(btn)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/components/responsive-menu.component.ts:113\n                                \n                            \n                    \n                        \n                                check if custom button is defined so we dont need to render default more button\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            btn\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import {\n    AfterContentInit,\n    AfterViewInit,\n    Component,\n    ContentChildren,\n    ElementRef,\n    Input,\n    OnDestroy,\n    QueryList,\n    Renderer2,\n    ViewChild,\n    ContentChild,\n    ChangeDetectorRef,\n    Output,\n    EventEmitter,\n} from \"@angular/core\";\n\nimport { MenuItemDirective } from \"../directives/menu-item.directive\";\nimport { takeUntil } from \"rxjs/operators\";\nimport { Subject } from \"rxjs\";\nimport { OverflowControl } from \"../provider/overflow.control\";\nimport { MenuToggleDirective } from \"../directives/menu-toggle.directive\";\n\nexport enum BtnAlign {\n    LEFT = \"left\",\n    RIGHT = \"right\"\n}\n\n@Component( {\n    selector: \"ngx-responsivemenu\",\n    templateUrl: \"responsive-menu.component.html\",\n    styleUrls: [\"./responsive-menu.component.scss\"]\n} )\nexport class ResponsiveMenuComponent implements AfterViewInit, AfterContentInit, OnDestroy {\n\n    public isCustomButton = false;\n\n    @ContentChildren( MenuItemDirective )\n    public menuItems: QueryList;\n\n    /**\n     * set maximal amount of items which could rendered into button pane\n     * all other items will automatically add to overflow container\n     */\n    @Input()\n    public showMax = -1;\n\n    /**\n     * if true content will not rendered longer in default container for overflow\n     * content and should rendered in a custom overflow container.\n     *\n     * @example\n     *\n     * \n     *   {{label}}\n     * \n     *\n     * \n     *    \n     *    \n     * \n     */\n    @Input()\n    public customOverflow = false;\n\n    /**\n     * if true toggle button will allways be visible even if content\n     * fits into button pane\n     */\n    @Input()\n    public set forceOverflow(forced: boolean) {\n        this.isForcedOverflow = forced;\n        this.overflowCtrl.forceOverflow = forced;\n    }\n\n    /**\n     * add a class for the button pane as example for bootstrap btn-group\n     *\n     * @example\n     *\n     * \n     *   {{label}}\n     * \n     */\n    @Input()\n    public classBtnPane: string;\n\n    /**\n     * set position of toggle btn, possible values are left or right\n     */\n    @Input()\n    public alignToggle: BtnAlign = BtnAlign.RIGHT;\n\n    @Output()\n    rendered: EventEmitter = new EventEmitter();\n\n    /**\n     * static: false wait until change detection loop has been finished in this case\n     * button el will not rendered to dom if a custom button is given but we have to wait\n     * until change detection finished before we get it\n     */\n    @ViewChild(MenuToggleDirective, {read: MenuToggleDirective, static: false})\n    protected set defaultToggleBtn( btn: MenuToggleDirective ) {\n        if ( !this.toggleBtn ) {\n            this.toggleBtn = btn;\n        }\n    }\n\n    /**\n     * check if custom button is defined so we dont need to render default more button\n     */\n    @ContentChild(MenuToggleDirective, {read: MenuToggleDirective, static: true})\n    protected set customToggleButton( btn: MenuToggleDirective ) {\n        this.isCustomButton = Boolean( btn );\n        if (btn) {\n            this.toggleBtn = btn;\n        }\n    }\n\n    /**\n     * button pane where items will be rendered if they fits into\n     */\n    @ViewChild( \"buttonPane\", { read: ElementRef, static: true } )\n    private buttonPane: ElementRef;\n\n    /**\n     * temporary button pane where buttons will be rendered on render process\n     * to avoid visualization errors\n     */\n    @ViewChild( \"tmpButtonPane\", { read: ElementRef, static: true } )\n    private tmpButtonPane: ElementRef;\n\n    private isForcedOverflow = false;\n\n    private isDestroyed$: Subject = new Subject();\n\n    /**\n     * toggle button to show / close overflow\n     */\n    private toggleBtn: MenuToggleDirective;\n\n    /**\n     * possible overflow items, which fits into button bar but not with more button\n     * but since the next button could be the last button and be smaller then overflow button\n     * which could results into that all buttons fits into the bar we only have to mark this button\n     * for an overflow button\n     */\n    private possibleOverflowItems: MenuItemDirective[] = [];\n\n    private overflowItems: MenuItemDirective[] = [];\n\n    /** max width of button bar */\n    private maxWidth: number;\n\n    /** reserved width which we will need to show more button */\n    private reservedWidth: number;\n\n    public constructor(\n        private overflowCtrl: OverflowControl,\n        private renderer: Renderer2,\n        private hostEl: ElementRef,\n        private changeDetector: ChangeDetectorRef\n    ) {\n    }\n\n    public ngOnDestroy() {\n        this.isDestroyed$.next( true );\n    }\n\n    public ngAfterContentInit() {\n        this.menuItems.changes\n            .pipe(takeUntil(this.isDestroyed$))\n            .subscribe(() => this.update());\n    }\n\n    /**\n     * view has been initialized and rendered to dom\n     */\n    public ngAfterViewInit() {\n        if (this.isCustomButton) {\n            this.renderer.appendChild( this.buttonPane.nativeElement, this.toggleBtn.nativeElement );\n        }\n        this.render();\n    }\n\n    /**\n     * update view, this will remove all\n     * contents and rerender buttons\n     */\n    public update(width?: number) {\n        this.render(width);\n        this.overflowCtrl.update();\n    }\n\n    /**\n     * remove old items from view so we ensure we have a clean tree\n     */\n    private clearView() {\n        this.menuItems.forEach((menuItem: MenuItemDirective) => {\n            menuItem.remove();\n        });\n        this.changeDetector.detectChanges();\n    }\n\n    /**\n     * render buttons to button menubar, if they not fits anymore or\n     * max show count is reached put them directly to the overflow container\n     */\n    private render(width?: number) {\n        this.initRenderProcess();\n        this.maxWidth = width || this.hostEl.nativeElement.getBoundingClientRect().width;\n\n        const items = this.prepareMenuItems();\n        let isOverflow = false;\n\n        for ( let index = 0, count = 0, ln = items.length; index  -1 && count >= this.showMax;\n\n            if ( !isOverflow ) {\n                item.addTo(this.tmpButtonPane.nativeElement);\n                if (this.validateSize(item)) {\n                    continue;\n                }\n                isOverflow = true;\n            }\n            this.overflowItems.push(item);\n        }\n        this.finalizeRenderProcess();\n    }\n\n    /**\n     * initialize render process\n     * clean up all views, get dimensions from elements\n     */\n    private initRenderProcess() {\n        this.clearView();\n\n        this.overflowItems = [];\n        this.possibleOverflowItems = [];\n        this.overflowCtrl.data.items = [];\n\n        this.toggleBtn.show(true);\n        this.reservedWidth = this.toggleBtn.width;\n        this.toggleBtn.hide();\n    }\n\n    /**\n     * finialize render process, enable more button if an overflow exists\n     */\n    private finalizeRenderProcess() {\n\n        const overflowData = this.finalizeMenuItems();\n        this.overflowCtrl.data.items =  overflowData;\n\n        this.isForcedOverflow || overflowData.length ? this.toggleBtn.show() : this.toggleBtn.hide();\n\n        this.possibleOverflowItems = [];\n        this.overflowItems = [];\n        this.changeDetector.detectChanges();\n        this.rendered.emit();\n    }\n\n    /**\n     * prepare menu items, filter out items which should be hidden by default\n     * and put them to overflow\n     */\n    private prepareMenuItems(): MenuItemDirective[] {\n        return this.menuItems.reduce((itemCollection, menuItem) => {\n            menuItem.visible\n                ? itemCollection.push( menuItem )\n                : this.overflowItems.push( menuItem );\n\n            return itemCollection;\n        }, []);\n    }\n\n    /**\n     * finalize menu buttons after render process finished\n     * buttons which are in overflow will removed from dom and pushed to overflow array\n     * all others will added to buttonPane\n     */\n    private finalizeMenuItems(): MenuItemDirective[] {\n\n        const items = this.overflowItems.length\n            ? this.possibleOverflowItems.concat(this.overflowItems)\n            : [];\n\n        return this.menuItems.toArray().reduce((overflowItems, item) => {\n            // remove all items so they are not rendered anymore\n            item.remove();\n            if (!items.length || items.indexOf(item) === -1) {\n                this.alignToggle === BtnAlign.LEFT\n                    ? item.addTo(this.buttonPane.nativeElement)\n                    : item.addTo(this.buttonPane.nativeElement, this.toggleBtn.nativeElement);\n                return overflowItems;\n            }\n\n            /** push item to overflow */\n            overflowItems.push(item);\n            return overflowItems;\n        }, []);\n    }\n\n    /**\n     * validate rendered item fits into button container\n     */\n    private validateSize( item: MenuItemDirective ): boolean {\n        const usedSize = parseInt(this.tmpButtonPane.nativeElement.offsetWidth, 10);\n\n        /** item fits together with more button */\n        if (usedSize + this.reservedWidth \n    \n\n    \n        \n\n    \n    \n    \n        ...\n    \n\n\n\n\n    \n\n    \n\n    \n                \n                    ./responsive-menu.component.scss\n                \n                :host {\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n\n    .buttonWrapper {\n        display: flex;\n        flex-direction: row;\n        justify-content: flex-end;\n    }\n\n    .buttonPane {\n        display: inline-flex;\n        flex-direction: row;\n        flex-wrap: nowrap;\n        flex-shrink: 0;\n    }\n\n    ::ng-deep {\n        .responsive-menu--item {\n            flex-shrink: 0 !important;\n        }\n    }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                    ...        '\n    var COMPONENTS = [{'name': 'ResponsiveMenuComponent', 'selector': 'ngx-responsivemenu'}];\n    var DIRECTIVES = [{'name': 'MenuItemDirective', 'selector': '[ngxResponsiveMenuItem]'},{'name': 'MenuToggleDirective', 'selector': '[ngxResponsiveMenuToggle]'},{'name': 'OverflowContentDirective', 'selector': 'ngx-responsivemenu-overflow'}];\n    var ACTUAL_COMPONENT = {'name': 'ResponsiveMenuComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ResponsiveMenuModule.html":{"url":"modules/ResponsiveMenuModule.html","title":"module - ResponsiveMenuModule","body":"\n                   \n\n\n\n\n    Modules\n    ResponsiveMenuModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ResponsiveMenuModule\n\n\n\ncluster_ResponsiveMenuModule_declarations\n\n\n\ncluster_ResponsiveMenuModule_exports\n\n\n\ncluster_ResponsiveMenuModule_providers\n\n\n\n\nMenuItemDirective\n\nMenuItemDirective\n\n\n\nResponsiveMenuModule\n\nResponsiveMenuModule\n\nResponsiveMenuModule -->\n\nMenuItemDirective->ResponsiveMenuModule\n\n\n\n\n\nMenuToggleDirective\n\nMenuToggleDirective\n\nResponsiveMenuModule -->\n\nMenuToggleDirective->ResponsiveMenuModule\n\n\n\n\n\nOverflowContentDirective\n\nOverflowContentDirective\n\nResponsiveMenuModule -->\n\nOverflowContentDirective->ResponsiveMenuModule\n\n\n\n\n\nResponsiveMenuComponent\n\nResponsiveMenuComponent\n\nResponsiveMenuModule -->\n\nResponsiveMenuComponent->ResponsiveMenuModule\n\n\n\n\n\nMenuItemDirective \n\nMenuItemDirective \n\nMenuItemDirective  -->\n\nResponsiveMenuModule->MenuItemDirective \n\n\n\n\n\nMenuToggleDirective \n\nMenuToggleDirective \n\nMenuToggleDirective  -->\n\nResponsiveMenuModule->MenuToggleDirective \n\n\n\n\n\nOverflowContentDirective \n\nOverflowContentDirective \n\nOverflowContentDirective  -->\n\nResponsiveMenuModule->OverflowContentDirective \n\n\n\n\n\nResponsiveMenuComponent \n\nResponsiveMenuComponent \n\nResponsiveMenuComponent  -->\n\nResponsiveMenuModule->ResponsiveMenuComponent \n\n\n\n\n\nOverflowControl\n\nOverflowControl\n\nResponsiveMenuModule -->\n\nOverflowControl->ResponsiveMenuModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            lib/ngx-responsivemenu/ngx-responsivemenu.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            MenuItemDirective\n                        \n                        \n                            MenuToggleDirective\n                        \n                        \n                            OverflowContentDirective\n                        \n                        \n                            ResponsiveMenuComponent\n                        \n                    \n                \n                \n                    Providers\n                    \n                        \n                            OverflowControl\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MenuItemDirective\n                        \n                        \n                            MenuToggleDirective\n                        \n                        \n                            OverflowContentDirective\n                        \n                        \n                            ResponsiveMenuComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from \"@angular/core\";\nimport { MenuItemDirective } from \"./directives/menu-item.directive\";\nimport { ResponsiveMenuComponent } from \"./components/responsive-menu.component\";\nimport { CommonModule } from \"@angular/common\";\nimport { OverflowContentDirective } from \"./directives/overflow.directive\";\nimport { OverflowControl } from \"./provider/overflow.control\";\nimport { MenuToggleDirective } from \"./directives/menu-toggle.directive\";\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    exports: [\n        MenuItemDirective,\n        MenuToggleDirective,\n        OverflowContentDirective,\n        ResponsiveMenuComponent,\n    ],\n    providers: [ OverflowControl ],\n    declarations: [\n        MenuItemDirective,\n        MenuToggleDirective,\n        OverflowContentDirective,\n        ResponsiveMenuComponent,\n    ]\n})\nexport class ResponsiveMenuModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                lib/ngx-responsivemenu/components/responsive-menu.component.ts\n            \n            component\n            ResponsiveMenuComponent\n            \n                54 %\n                (6/11)\n            \n        \n        \n            \n                \n                lib/ngx-responsivemenu/directives/menu-item.directive.ts\n            \n            directive\n            MenuItemDirective\n            \n                66 %\n                (4/6)\n            \n        \n        \n            \n                \n                lib/ngx-responsivemenu/directives/menu-toggle.directive.ts\n            \n            directive\n            MenuToggleDirective\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                lib/ngx-responsivemenu/directives/overflow.directive.ts\n            \n            directive\n            OverflowContentDirective\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                lib/ngx-responsivemenu/model/overflow.model.ts\n            \n            class\n            OverflowModel\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                lib/ngx-responsivemenu/provider/async-event.ts\n            \n            class\n            AsyncEvent\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                lib/ngx-responsivemenu/provider/overflow.control.ts\n            \n            injectable\n            OverflowControl\n            \n                50 %\n                (3/6)\n            \n        \n        \n            \n                \n                lib/tests/main.ts\n            \n            variable\n            context\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/tests/main.ts\n            \n            variable\n            require\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^8.0.0\n        \n            @angular/cdk : ^8.0.0\n        \n            @angular/common : ^8.0.0\n        \n            @angular/compiler : ^8.0.0\n        \n            @angular/core : ^8.0.0\n        \n            @angular/forms : ^8.0.0\n        \n            @angular/material : ^8.0.0\n        \n            @angular/platform-browser : ^8.0.0\n        \n            @angular/platform-browser-dynamic : ^8.0.0\n        \n            @angular/router : ^8.0.0\n        \n            @compodoc/compodoc : ^1.1.9\n        \n            angular-resizable-element : ^3.2.4\n        \n            bluebird : 3.5.5\n        \n            core-js : ^3.1.3\n        \n            font-awesome : ^4.7.0\n        \n            highlight.js : ^9.15.8\n        \n            ngx-highlightjs : ^3.0.3\n        \n            ngx-responsivemenu : file:dist/ngx-responsivemenu\n        \n            rxjs : ~6.5.2\n        \n            tslib : ^1.9.0\n        \n            zone.js : ~0.9.1\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BtnAlign   (lib/.../responsive-menu.component.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/ngx-responsivemenu/components/responsive-menu.component.ts\n    \n        \n            \n                \n                    \n                        \n                        BtnAlign\n                    \n                \n                        \n                            \n                                 LEFT\n                            \n                        \n                        \n                            \n                                Value : left\n                            \n                        \n                        \n                            \n                                 RIGHT\n                            \n                        \n                        \n                            \n                                Value : right\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ResponsiveMenuModule\n\n\n\ncluster_ResponsiveMenuModule_declarations\n\n\n\ncluster_ResponsiveMenuModule_exports\n\n\n\ncluster_ResponsiveMenuModule_providers\n\n\n\n\nMenuItemDirective\n\nMenuItemDirective\n\n\n\nResponsiveMenuModule\n\nResponsiveMenuModule\n\nResponsiveMenuModule -->\n\nMenuItemDirective->ResponsiveMenuModule\n\n\n\n\n\nMenuToggleDirective\n\nMenuToggleDirective\n\nResponsiveMenuModule -->\n\nMenuToggleDirective->ResponsiveMenuModule\n\n\n\n\n\nOverflowContentDirective\n\nOverflowContentDirective\n\nResponsiveMenuModule -->\n\nOverflowContentDirective->ResponsiveMenuModule\n\n\n\n\n\nResponsiveMenuComponent\n\nResponsiveMenuComponent\n\nResponsiveMenuModule -->\n\nResponsiveMenuComponent->ResponsiveMenuModule\n\n\n\n\n\nMenuItemDirective \n\nMenuItemDirective \n\nMenuItemDirective  -->\n\nResponsiveMenuModule->MenuItemDirective \n\n\n\n\n\nMenuToggleDirective \n\nMenuToggleDirective \n\nMenuToggleDirective  -->\n\nResponsiveMenuModule->MenuToggleDirective \n\n\n\n\n\nOverflowContentDirective \n\nOverflowContentDirective \n\nOverflowContentDirective  -->\n\nResponsiveMenuModule->OverflowContentDirective \n\n\n\n\n\nResponsiveMenuComponent \n\nResponsiveMenuComponent \n\nResponsiveMenuComponent  -->\n\nResponsiveMenuModule->ResponsiveMenuComponent \n\n\n\n\n\nOverflowControl\n\nOverflowControl\n\nResponsiveMenuModule -->\n\nOverflowControl->ResponsiveMenuModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Component\n                \n            \n        \n        \n            \n                \n                    \n                    3 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    1 Injectable\n                \n            \n        \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ResponsiveMenuModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            context   (lib/.../main.ts)\n                        \n                        \n                            require   (lib/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/tests/main.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            context\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require.context(\"./\", true, /\\.spec\\.ts$/)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            require\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
