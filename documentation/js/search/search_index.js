var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/classes/AsyncEvent.html",[0,0.203,1,1.169]],["body/classes/AsyncEvent.html",[0,0.217,1,2.222,2,1.254,3,0.551,4,0.551,5,0.429,6,0.528,7,3.163,8,1.904,9,0.69,10,1.375,11,3.286,12,2.04,13,3.253,14,2.535,15,1.67,16,3.286,17,0.079,18,4.218,19,2.747,20,0.429,21,1.375,22,1.276,23,3.939,24,1.375,25,2.293,26,1.269,27,1.101,28,2.469,29,2.469,30,3.939,31,3.038,32,1.353,33,3.939,34,3.286,35,3.038,36,3.939,37,3.038,38,3.286,39,3.286,40,3.286,41,3.286,42,1.409,43,1.129,44,2.469,45,2.469,46,2.469,47,3.939,48,2.535,49,2.535,50,3.286,51,0.551,52,1.545,53,0.848,54,0.551,55,0.918,56,2.469,57,0.848,58,2.469,59,0.848,60,2.469,61,2.469,62,3.286,63,2.469,64,2.469,65,2.469,66,0.04,67,0.054,68,0.04]],["title/directives/MenuItemDirective.html",[69,0.514,70,0.399]],["body/directives/MenuItemDirective.html",[0,0.196,3,0.498,4,0.498,5,0.387,6,0.527,9,0.623,15,2.013,17,0.079,20,0.387,21,1.283,22,1.194,26,1.054,27,1.107,32,1.406,42,1.054,43,1.054,51,0.498,54,0.498,55,0.857,59,0.766,66,0.036,67,0.05,68,0.036,69,0.685,70,0.711,71,0.933,72,2.54,73,1.72,74,2.367,75,3.54,76,1.904,77,2.131,78,1.559,79,1.92,80,2.08,81,1.904,82,2.367,83,2.367,84,1.904,85,1.133,86,1.283,87,3.068,88,3.507,89,2.08,90,2.367,91,2.705,92,2.367,93,3.507,94,1.72,95,2.08,96,1.782,97,1.92,98,3.068,99,1.054,100,1.054,101,0.857,102,1.054,103,1.559,104,2.013,105,1.782,106,1.298,107,2.231,108,1.283,109,2.345,110,1.559,111,1.054,112,2.231,113,3.234,114,2.231,115,1.559,116,4.272,117,1.559,118,1.904,119,2.131,120,3.068,121,3.778,122,2.367,123,2.231,124,3.068,125,1.904,126,2.367,127,2.367,128,0.623,129,1.72,130,2.231,131,2.914,132,2.231,133,3.068,134,2.231,135,2.231]],["title/directives/MenuToggleDirective.html",[69,0.514,136,0.79]],["body/directives/MenuToggleDirective.html",[0,0.298,3,0.465,4,0.465,5,0.361,6,0.516,9,0.581,10,0.87,17,0.079,19,1.814,20,0.361,22,1.119,24,1.223,26,1.004,27,1.079,32,1.004,42,1.161,43,0.715,49,2.254,51,0.819,52,1.414,53,0.715,54,0.465,55,1.079,57,0.715,59,1.259,66,0.034,67,0.048,68,0.034,69,0.653,71,0.87,72,2.485,74,2.254,80,2.26,85,1.057,86,1.223,89,1.057,92,2.254,95,1.863,96,1.717,97,1.863,99,1.004,100,1.004,101,0.817,102,1.004,103,1.717,104,1.057,105,1.057,106,1.327,108,0.87,111,1.004,113,2.254,115,1.485,117,1.485,118,1.291,119,1.863,126,1.604,128,0.581,129,1.604,131,2.254,136,1.259,137,1.604,138,2.275,139,1.814,140,3.665,141,1.485,142,2.923,143,1.485,144,2.097,145,1.717,146,2.254,147,2.923,148,2.923,149,2.09,150,3.379,151,3.173,152,1.604,153,0.819,154,2.923,155,2.254,156,2.254,157,1.814,158,1.814,159,2.827,160,2.827,161,2.08,162,1.717,163,2.08,164,2.923,165,2.923,166,2.923,167,2.254,168,2.08,169,2.08,170,2.923,171,2.08,172,2.08,173,2.923,174,2.923,175,2.254,176,2.08,177,1.057,178,1.291,179,1.291,180,0.581,181,1.604,182,1.604,183,2.08,184,2.097,185,1.291,186,2.08,187,1.604,188,2.08,189,1.604,190,1.604,191,2.923,192,1.604,193,2.08,194,2.08,195,1.604,196,1.291,197,2.08,198,1.291,199,1.604,200,1.604,201,2.08,202,2.08,203,2.08,204,2.923,205,2.923,206,1.291,207,2.254,208,2.923,209,1.291,210,1.291,211,1.291,212,2.08,213,2.08,214,1.604,215,2.08,216,2.08]],["title/directives/OverflowContentDirective.html",[69,0.514,217,0.79]],["body/directives/OverflowContentDirective.html",[0,0.155,1,1.988,3,0.393,4,0.393,5,0.306,6,0.517,9,0.492,10,1.42,12,2.743,13,2,14,2.618,15,1.725,17,0.079,19,1.91,20,0.306,22,1.165,25,2.654,26,0.891,27,1.093,32,0.891,35,2,37,2.618,51,0.846,52,1.287,53,0.605,54,0.393,55,1.093,57,1.379,66,0.029,67,0.042,68,0.029,69,0.688,70,0.534,71,0.737,77,0.895,78,2.195,84,1.609,85,0.895,86,1.085,89,1.318,94,1.358,95,1.839,96,1.564,97,1.725,99,0.605,100,0.605,101,1.093,102,0.605,103,1.725,106,0.891,110,1.318,111,1.508,115,0.895,118,1.093,119,1.318,122,1.358,125,1.093,128,0.492,141,1.318,143,1.318,145,1.564,149,1.318,153,0.758,157,2.246,158,1.609,177,0.895,178,1.093,179,1.093,180,0.492,184,1.609,185,1.093,187,1.358,189,2,190,1.358,195,1.358,196,1.609,198,1.093,199,1.358,200,1.358,211,1.093,214,1.358,217,0.891,218,1.358,219,3.078,220,1.564,221,1.91,222,3.078,223,1.609,224,1.609,225,2,226,2,227,3.395,228,3.395,229,3.785,230,3.785,231,3.078,232,1.761,233,1.761,234,2.492,235,3.215,236,4.015,237,2.107,238,1.761,239,3.395,240,1.761,241,3.395,242,1.761,243,1.761,244,2.593,245,1.609,246,2.593,247,1.761,248,2.919,249,1.358,250,1.761,251,0.737,252,1.761,253,1.761,254,1.761,255,1.358,256,1.761,257,1.761,258,1.358,259,1.358,260,2,261,1.761,262,1.761,263,1.761,264,1.761,265,2.593,266,1.761,267,1.761,268,1.761,269,1.358,270,0.895,271,2.593,272,1.761,273,1.761,274,1.761,275,1.358,276,1.761,277,2.593,278,2,279,2.593,280,1.761,281,1.761,282,1.761,283,1.761,284,2.593,285,1.761,286,2.593,287,1.761,288,2.593,289,1.761,290,1.761,291,1.761,292,1.761]],["title/injectables/OverflowControl.html",[153,0.514,293,1.169]],["body/injectables/OverflowControl.html",[0,0.31,3,0.369,4,0.369,5,0.287,6,0.528,9,0.461,10,1.034,17,0.079,20,0.287,21,1.034,22,1.237,24,1.034,26,1.017,27,1.126,32,0.849,42,1.479,43,1.13,51,0.735,52,1.473,53,0.567,54,0.787,55,0.984,57,1.017,59,1.13,66,0.027,67,0.04,68,0.027,70,0.287,76,1.534,77,1.256,78,1.671,79,1.671,86,1.375,99,0.567,100,0.567,101,0.461,102,0.567,104,1.256,106,1.27,108,1.603,109,2.041,110,1.505,111,1.593,128,0.461,139,1.534,141,2.047,143,1.671,144,2.041,145,1.671,149,1.256,153,0.917,162,1.878,180,1.101,210,1.534,211,2.294,220,1.878,221,2.041,224,1.534,234,1.534,237,1.024,245,1.838,251,0.69,260,2.851,270,0.839,293,1.256,294,1.65,295,1.273,296,1.906,297,3.164,298,1.906,299,2.471,300,3.288,301,2.471,302,2.536,303,2.471,304,2.471,305,2.471,306,2.471,307,1.906,308,1.906,309,2.471,310,1.906,311,2.471,312,2.471,313,3.288,314,2.471,315,2.536,316,2.471,317,2.536,318,2.471,319,3.288,320,2.471,321,2.536,322,2.471,323,2.471,324,2.471,325,2.471,326,3.288,327,2.851,328,1.906,329,3.696,330,1.65,331,1.65,332,1.65,333,2.471,334,1.65,335,1.65,336,2.471,337,2.471,338,2.716,339,1.273,340,1.65,341,2.471,342,2.471,343,2.471,344,1.65,345,1.65,346,3.288,347,2.536,348,2.471,349,3.521,350,1.65,351,1.65,352,1.65,353,1.65,354,2.962,355,1.878,356,1.65,357,0.839,358,2.962,359,2.471,360,1.65,361,1.273,362,2.962,363,1.65,364,1.65,365,2.471,366,3.696,367,2.471,368,1.65,369,2.471,370,1.65]],["title/classes/OverflowModel.html",[0,0.203,355,1.169]],["body/classes/OverflowModel.html",[0,0.254,2,1.467,3,0.645,4,0.645,5,0.501,6,0.538,9,0.807,17,0.079,20,0.501,21,1.521,22,1.204,24,1.521,27,1.113,42,1.48,43,0.991,48,2.805,51,0.645,54,0.645,55,0.807,59,1.249,66,0.047,67,0.059,68,0.047,70,0.748,79,2.124,99,0.991,100,0.991,101,0.807,102,0.991,106,1.249,108,1.665,111,1.566,162,1.467,220,2.333,251,1.207,270,1.467,296,2.805,355,1.848,357,1.467,371,2.226,372,3.636,373,3.636,374,3.224,375,2.886,376,3.636,377,2.886,378,2.886,379,2.886,380,2.886,381,2.886,382,2.226,383,2.886,384,2.805,385,2.886]],["title/components/ResponsiveMenuComponent.html",[180,0.643,386,0.962]],["body/components/ResponsiveMenuComponent.html",[0,0.314,2,0.451,3,0.198,4,0.198,5,0.154,6,0.486,9,0.248,10,0.818,12,1.429,15,0.764,17,0.079,20,0.34,21,0.629,22,1.109,24,0.629,25,0.933,26,0.517,27,1.07,31,0.685,32,1.122,42,0.885,43,0.885,51,0.625,52,0.818,53,0.305,54,0.336,55,1.119,57,0.517,59,0.885,66,0.014,67,0.024,68,0.024,69,0.198,70,0.587,71,0.371,75,2.3,76,2.159,77,1.718,78,1.851,79,1.994,80,2.254,81,1.429,84,0.933,85,0.451,86,1.171,89,1.17,90,1.16,91,1.776,95,1.594,96,0.994,97,1.17,99,0.961,100,1.161,101,1.054,102,0.961,103,0.764,104,1.812,105,0.994,106,1.315,108,1.367,109,2.028,110,1.17,111,1.46,115,1.718,117,0.764,119,1.17,125,0.551,127,2.3,128,0.248,136,1.077,138,2.098,139,0.933,141,0.994,143,0.764,144,1.214,145,0.994,146,2.91,149,0.994,151,1.776,152,0.685,153,0.514,155,1.16,156,1.16,157,0.933,158,0.551,159,0.685,160,2.158,162,1.515,167,0.685,175,2.158,177,0.451,178,0.551,179,0.551,180,0.833,181,1.16,182,1.16,184,1.214,185,0.551,192,0.685,196,1.214,198,0.551,206,1.429,207,0.685,209,1.429,210,1.214,217,0.305,220,2.016,221,1.214,223,1.429,224,1.429,225,1.16,226,1.16,234,2.159,235,2.3,237,0.551,245,1.214,248,1.16,249,0.685,251,0.371,255,1.16,258,0.685,259,0.685,269,1.16,270,1.309,275,0.685,278,1.776,297,0.685,298,1.509,302,1.16,307,1.16,308,1.16,310,1.16,315,1.16,317,1.16,321,1.509,327,1.776,328,1.776,338,1.509,339,0.685,347,1.509,357,0.764,361,0.685,374,1.509,382,1.509,384,1.16,386,1.171,387,0.888,388,0.888,389,2.798,390,2.342,391,0.551,392,2.577,393,1.504,394,1.504,395,1.504,396,3.712,397,1.956,398,1.504,399,1.956,400,1.956,401,1.956,402,2.303,403,2.798,404,1.956,405,1.956,406,1.956,407,1.956,408,1.956,409,2.303,410,0.888,411,1.509,412,1.504,413,0.888,414,1.504,415,1.776,416,1.504,417,2.982,418,0.888,419,3.479,420,0.933,421,1.504,422,1.504,423,1.956,424,2.577,425,1.956,426,1.956,427,0.888,428,1.504,429,1.504,430,3.267,431,0.888,432,1.504,433,1.504,434,0.888,435,2.798,436,1.504,437,0.888,438,1.504,439,2.303,440,2.982,441,0.888,442,3.136,443,0.888,444,1.504,445,0.888,446,1.504,447,1.956,448,0.888,449,0.888,450,0.888,451,0.888,452,0.888,453,0.888,454,2.798,455,2.303,456,2.303,457,2.303,458,2.303,459,1.504,460,2.577,461,1.504,462,0.888,463,0.888,464,1.504,465,1.956,466,0.888,467,1.956,468,0.888,469,0.685,470,0.685,471,0.888,472,0.888,473,1.504,474,0.888,475,1.956,476,0.888,477,0.888,478,1.504,479,1.504,480,0.888,481,0.888,482,0.888,483,0.888,484,2.303,485,1.504,486,1.956,487,0.888,488,1.504,489,2.303,490,0.888,491,0.888,492,0.888,493,0.888,494,1.504,495,0.888,496,0.888,497,0.888,498,1.956,499,0.888,500,0.888,501,0.888,502,0.888,503,0.888,504,1.504,505,0.888,506,0.888,507,0.888,508,0.888,509,0.888,510,0.888,511,0.888,512,0.888,513,0.888,514,0.888,515,1.504,516,0.888,517,0.888,518,0.888,519,0.888,520,0.888,521,1.504,522,0.888,523,0.888,524,0.888,525,1.504,526,0.888,527,1.956,528,0.888,529,1.504,530,0.888,531,0.888,532,0.888,533,0.888,534,0.888,535,0.888,536,0.888,537,0.888,538,0.888,539,0.888,540,0.888,541,0.888,542,0.888,543,0.888,544,0.888,545,0.888,546,0.888,547,0.888,548,1.504,549,1.504,550,1.956,551,1.504,552,0.888,553,0.888,554,0.888,555,0.888,556,1.504,557,0.888,558,0.888,559,0.888,560,0.888,561,0.551,562,0.888,563,0.888,564,0.888,565,0.888,566,0.888,567,0.888,568,0.888,569,0.888,570,0.888,571,0.888,572,0.888,573,0.888,574,0.888,575,0.888,576,0.888,577,0.888,578,0.888,579,0.888,580,1.504,581,0.888,582,0.888,583,0.888,584,0.888,585,1.504,586,0.888,587,0.888,588,3.381,589,1.956,590,0.888,591,1.504,592,0.888,593,0.888,594,1.504,595,0.888,596,0.888,597,0.888,598,0.888,599,1.504,600,0.888,601,0.888,602,0.888,603,0.551,604,1.504,605,2.303,606,0.888,607,0.888,608,0.888,609,0.888]],["title/modules/ResponsiveMenuModule.html",[610,1.428,611,1.169]],["body/modules/ResponsiveMenuModule.html",[0,0.246,3,0.624,4,0.624,5,0.485,6,0.36,17,0.078,51,0.99,54,0.624,66,0.045,67,0.058,68,0.045,70,0.802,128,0.781,136,1.588,153,0.975,177,1.42,217,1.588,251,1.169,357,1.81,386,1.933,420,1.734,469,2.155,561,1.734,603,1.734,610,1.734,611,2.396,612,1.734,613,1.42,614,3.025,615,3.025,616,3.025,617,2.155,618,2.155,619,2.155,620,2.155,621,2.748,622,2.155,623,2.794,624,2.794,625,3.563,626,2.794,627,2.794,628,3.563,629,2.155,630,2.794,631,2.794]],["title/coverage.html",[632,2.417]],["body/coverage.html",[0,0.348,1,1.676,5,0.572,6,0.591,7,2.543,8,2.543,17,0.076,57,1.133,66,0.054,67,0.064,68,0.054,69,0.944,70,0.572,72,2.45,73,2.543,101,0.922,136,1.133,137,2.543,153,0.737,180,0.922,217,1.133,218,2.543,293,1.676,295,2.543,355,1.676,371,2.543,386,1.379,390,2.047,391,2.047,632,2.543,633,3.298,634,3.298,635,3.298,636,4.224,637,3.298,638,3.298,639,3.298,640,3.298,641,3.947,642,3.298,643,3.298,644,3.298,645,3.298,646,3.298,647,3.298,648,3.298]],["title/dependencies.html",[613,1.405,649,1.924]],["body/dependencies.html",[17,0.078,53,1.102,66,0.052,67,0.063,68,0.052,117,1.63,128,0.896,223,2.409,613,1.63,629,2.474,650,3.207,651,4.666,652,3.207,653,3.207,654,3.207,655,3.207,656,3.881,657,2.994,658,3.207,659,3.207,660,3.207,661,3.207,662,3.207,663,3.207,664,3.207,665,3.207,666,3.207,667,3.207,668,3.207,669,3.207,670,3.207,671,3.207,672,3.207,673,3.207,674,3.207,675,3.207,676,3.207,677,3.207,678,3.207,679,3.207,680,3.207,681,3.207,682,3.207,683,3.207,684,3.207,685,3.207,686,3.207]],["title/miscellaneous/enumerations.html",[687,1.484,688,2.133]],["body/miscellaneous/enumerations.html",[6,0.459,17,0.073,20,0.619,66,0.058,67,0.067,68,0.058,80,1.812,105,2.1,138,2.213,206,2.565,209,2.565,390,2.213,391,2.565,411,3.187,415,2.75,470,2.75,687,2.75,688,2.75,689,3.565]],["title/index.html",[20,0.399,690,1.775]],["body/index.html",[2,1.615,17,0.076,66,0.052,67,0.063,68,0.052,70,0.791,71,1.33,81,2.58,82,2.452,83,2.452,136,1.566,153,0.929,180,0.888,217,1.566,293,1.615,386,1.907,420,1.973,561,1.973,603,1.973,610,2.396,611,2.415,613,1.615,614,2.452,615,2.452,616,2.452,617,2.452,618,2.452,619,2.452,620,2.452,621,2.977,622,2.452,690,2.452]],["title/modules.html",[612,1.945]],["body/modules.html",[17,0.069,66,0.06,67,0.069,68,0.06,611,1.872,612,2.287,657,2.842,691,3.685,692,3.685,693,3.685]]],"invertedIndex":[["",{"_index":17,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{}}}],["0",{"_index":270,"title":{},"body":{"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["0.9.1",{"_index":686,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":81,"title":{},"body":{"directives/MenuItemDirective.html":{},"components/ResponsiveMenuComponent.html":{},"index.html":{}}}],["1.1.9",{"_index":661,"title":{},"body":{"dependencies.html":{}}}],["1.7.1",{"_index":675,"title":{},"body":{"dependencies.html":{}}}],["1.9.0",{"_index":684,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":207,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["100",{"_index":636,"title":{},"body":{"coverage.html":{}}}],["11/11",{"_index":637,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":82,"title":{},"body":{"directives/MenuItemDirective.html":{},"index.html":{}}}],["2/2",{"_index":643,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":83,"title":{},"body":{"directives/MenuItemDirective.html":{},"index.html":{}}}],["3.0.3",{"_index":679,"title":{},"body":{"dependencies.html":{}}}],["3.1.3",{"_index":669,"title":{},"body":{"dependencies.html":{}}}],["3.2.4",{"_index":664,"title":{},"body":{"dependencies.html":{}}}],["3.5.5",{"_index":666,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":640,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":644,"title":{},"body":{"coverage.html":{}}}],["4.7.0",{"_index":672,"title":{},"body":{"dependencies.html":{}}}],["4/6",{"_index":639,"title":{},"body":{"coverage.html":{}}}],["5/6",{"_index":646,"title":{},"body":{"coverage.html":{}}}],["6.5.2",{"_index":682,"title":{},"body":{"dependencies.html":{}}}],["6/8",{"_index":642,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":638,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":641,"title":{},"body":{"coverage.html":{}}}],["8.0.0",{"_index":651,"title":{},"body":{"dependencies.html":{}}}],["8.0.2",{"_index":681,"title":{},"body":{"dependencies.html":{}}}],["83",{"_index":645,"title":{},"body":{"coverage.html":{}}}],["9.15.8",{"_index":677,"title":{},"body":{"dependencies.html":{}}}],["accessors",{"_index":24,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuToggleDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["actual_component",{"_index":609,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["add",{"_index":115,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["added",{"_index":424,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["addto",{"_index":88,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["addto(parent",{"_index":112,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["affect",{"_index":311,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["aftercontentinit",{"_index":321,"title":{},"body":{"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["afterremove",{"_index":227,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["afterrender",{"_index":228,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["afterviewinit",{"_index":144,"title":{},"body":{"directives/MenuToggleDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["alignments",{"_index":470,"title":{},"body":{"components/ResponsiveMenuComponent.html":{},"miscellaneous/enumerations.html":{}}}],["aligntoggle",{"_index":400,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["allready",{"_index":256,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["allways",{"_index":110,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["amount",{"_index":433,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["angular",{"_index":662,"title":{},"body":{"dependencies.html":{}}}],["angular/animations",{"_index":650,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":652,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":629,"title":{},"body":{"modules/ResponsiveMenuModule.html":{},"dependencies.html":{}}}],["angular/compiler",{"_index":653,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":128,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":654,"title":{},"body":{"dependencies.html":{}}}],["angular/material",{"_index":655,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":656,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":659,"title":{},"body":{"dependencies.html":{}}}],["anymore",{"_index":475,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["app",{"_index":313,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["append",{"_index":512,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["applied",{"_index":239,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["array",{"_index":571,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["async",{"_index":13,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/OverflowContentDirective.html":{}}}],["asyncevent",{"_index":1,"title":{"classes/AsyncEvent.html":{}},"body":{"classes/AsyncEvent.html":{},"directives/OverflowContentDirective.html":{},"coverage.html":{}}}],["automatically",{"_index":139,"title":{},"body":{"directives/MenuToggleDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["avoid",{"_index":491,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["await",{"_index":35,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/OverflowContentDirective.html":{}}}],["awesome",{"_index":671,"title":{},"body":{"dependencies.html":{}}}],["bar",{"_index":498,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["before",{"_index":15,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["beforeremove",{"_index":229,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["beforerender",{"_index":230,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["bluebird",{"_index":665,"title":{},"body":{"dependencies.html":{}}}],["boolean",{"_index":162,"title":{},"body":{"directives/MenuToggleDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["bootstrap",{"_index":420,"title":{},"body":{"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"index.html":{}}}],["both",{"_index":309,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["browse",{"_index":693,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":657,"title":{},"body":{"dependencies.html":{},"modules.html":{}}}],["btn",{"_index":396,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["btnalign",{"_index":411,"title":{},"body":{"components/ResponsiveMenuComponent.html":{},"miscellaneous/enumerations.html":{}}}],["btnalign.left",{"_index":579,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["btnalign.right",{"_index":412,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["button",{"_index":80,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{},"miscellaneous/enumerations.html":{}}}],["buttonpane",{"_index":489,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["buttons",{"_index":440,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["buttonwrapper",{"_index":593,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["called",{"_index":30,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["calls",{"_index":279,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["cancel",{"_index":18,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["canceled",{"_index":246,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["case",{"_index":308,"title":{},"body":{"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["catch",{"_index":38,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["center",{"_index":592,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["change",{"_index":457,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["changedetector",{"_index":408,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["changedetectorref",{"_index":409,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["changelog",{"_index":674,"title":{},"body":{"dependencies.html":{}}}],["changes",{"_index":447,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["check",{"_index":464,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["children",{"_index":124,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["class",{"_index":0,"title":{"classes/AsyncEvent.html":{},"classes/OverflowModel.html":{}},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"coverage.html":{}}}],["class.responsive",{"_index":93,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["class.toggle",{"_index":148,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["classbtnpane",{"_index":401,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AsyncEvent.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"index.html":{}}}],["classname",{"_index":129,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{}}}],["classoverflow",{"_index":402,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["classoverflow(name",{"_index":481,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["classoverflow]=&quot;&#39;overflow",{"_index":450,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["clean",{"_index":521,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["clearview",{"_index":522,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["click",{"_index":140,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["close",{"_index":297,"title":{},"body":{"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["cluster_responsivemenumodule",{"_index":617,"title":{},"body":{"modules/ResponsiveMenuModule.html":{},"index.html":{}}}],["cluster_responsivemenumodule_declarations",{"_index":618,"title":{},"body":{"modules/ResponsiveMenuModule.html":{},"index.html":{}}}],["cluster_responsivemenumodule_exports",{"_index":619,"title":{},"body":{"modules/ResponsiveMenuModule.html":{},"index.html":{}}}],["cluster_responsivemenumodule_providers",{"_index":620,"title":{},"body":{"modules/ResponsiveMenuModule.html":{},"index.html":{}}}],["column",{"_index":590,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["commonmodule",{"_index":628,"title":{},"body":{"modules/ResponsiveMenuModule.html":{}}}],["complete",{"_index":64,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["completed",{"_index":25,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["compodoc/compodoc",{"_index":660,"title":{},"body":{"dependencies.html":{}}}],["component",{"_index":180,"title":{"components/ResponsiveMenuComponent.html":{}},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{},"coverage.html":{},"index.html":{}}}],["component_template",{"_index":606,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["components",{"_index":302,"title":{},"body":{"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["components/responsive",{"_index":626,"title":{},"body":{"modules/ResponsiveMenuModule.html":{}}}],["conainer",{"_index":342,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["const",{"_index":119,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["constructor",{"_index":26,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["constructor(el",{"_index":94,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/OverflowContentDirective.html":{}}}],["constructor(overflowctrl",{"_index":152,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["container",{"_index":234,"title":{},"body":{"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["container&#39;&quot;&gt",{"_index":451,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["content",{"_index":78,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["contentchild",{"_index":468,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["contentchild(menutoggledirective",{"_index":487,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["contentchildren",{"_index":466,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["contentchildren(menuitemdirective",{"_index":444,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["contents",{"_index":438,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["continue",{"_index":31,"title":{},"body":{"classes/AsyncEvent.html":{},"components/ResponsiveMenuComponent.html":{}}}],["control",{"_index":296,"title":{},"body":{"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{}}}],["core",{"_index":667,"title":{},"body":{"dependencies.html":{}}}],["count",{"_index":527,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["coverage",{"_index":632,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["creates",{"_index":155,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["css",{"_index":159,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["cssclasses",{"_index":473,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["current",{"_index":49,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuToggleDirective.html":{}}}],["custom",{"_index":146,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["customoverflow",{"_index":403,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["customtogglebutton",{"_index":406,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["data",{"_index":329,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["declarations",{"_index":614,"title":{},"body":{"modules/ResponsiveMenuModule.html":{},"index.html":{}}}],["decorators",{"_index":443,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["deep",{"_index":601,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["default",{"_index":104,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["defaulttogglebtn",{"_index":405,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["defined",{"_index":27,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["dependcy",{"_index":305,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["dependencies",{"_index":613,"title":{"dependencies.html":{}},"body":{"modules/ResponsiveMenuModule.html":{},"dependencies.html":{},"index.html":{}}}],["description",{"_index":9,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["destroyed",{"_index":182,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["detection",{"_index":458,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["dimensions",{"_index":544,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["direction",{"_index":589,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["directive",{"_index":69,"title":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{}},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{},"coverage.html":{}}}],["directives",{"_index":71,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{},"index.html":{}}}],["directives/menu",{"_index":357,"title":{},"body":{"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{}}}],["directives/overflow.directive",{"_index":630,"title":{},"body":{"modules/ResponsiveMenuModule.html":{}}}],["directly",{"_index":258,"title":{},"body":{"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["display",{"_index":149,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["display(display",{"_index":188,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["documentation",{"_index":633,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":389,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["done",{"_index":23,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["dont",{"_index":310,"title":{},"body":{"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["dynamic",{"_index":658,"title":{},"body":{"dependencies.html":{}}}],["each",{"_index":312,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["el",{"_index":103,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["element",{"_index":117,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{},"dependencies.html":{}}}],["elementref",{"_index":95,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["elements",{"_index":545,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["emits",{"_index":10,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["empty",{"_index":376,"title":{},"body":{"classes/OverflowModel.html":{}}}],["enable",{"_index":554,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["end",{"_index":595,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["ensure",{"_index":520,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["enum",{"_index":471,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["enumerations",{"_index":688,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":40,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["errors",{"_index":493,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["even",{"_index":245,"title":{},"body":{"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["event",{"_index":19,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{}}}],["event.cancel",{"_index":41,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["event.completed",{"_index":284,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["event.done",{"_index":37,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/OverflowContentDirective.html":{}}}],["event.ts",{"_index":8,"title":{},"body":{"classes/AsyncEvent.html":{},"coverage.html":{}}}],["event.ts:11",{"_index":28,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["event.ts:21",{"_index":46,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["event.ts:35",{"_index":44,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["event.ts:54",{"_index":29,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["eventemitter",{"_index":12,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["example",{"_index":32,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["exists",{"_index":221,"title":{},"body":{"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["exits",{"_index":343,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["export",{"_index":54,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{}}}],["exportas",{"_index":253,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["exports",{"_index":616,"title":{},"body":{"modules/ResponsiveMenuModule.html":{},"index.html":{}}}],["false",{"_index":109,"title":{},"body":{"directives/MenuItemDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["fatalerror",{"_index":39,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"coverage.html":{}}}],["filter",{"_index":249,"title":{},"body":{"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["filter((items",{"_index":268,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["finalize",{"_index":569,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["finalizemenuitems",{"_index":573,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["finalizerender",{"_index":231,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["finalizerenderprocess",{"_index":555,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["finialize",{"_index":553,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["finished",{"_index":460,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["fits",{"_index":430,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["flag",{"_index":257,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["flex",{"_index":588,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["font",{"_index":670,"title":{},"body":{"dependencies.html":{}}}],["force",{"_index":341,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["forced",{"_index":338,"title":{},"body":{"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["forceoverflow",{"_index":328,"title":{},"body":{"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["forceoverflow(forced",{"_index":361,"title":{},"body":{"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["fromevent",{"_index":176,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["fromevent(this.el.nativeelement",{"_index":193,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["generate",{"_index":673,"title":{},"body":{"dependencies.html":{}}}],["getcompleted",{"_index":45,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["getcomputedstyle",{"_index":203,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["getdata",{"_index":352,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["gethide",{"_index":350,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["getitems",{"_index":377,"title":{},"body":{"classes/OverflowModel.html":{}}}],["getnativeelement",{"_index":168,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["gets",{"_index":181,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["getshow",{"_index":344,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["getwidth",{"_index":171,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["given",{"_index":461,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["group",{"_index":421,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["here",{"_index":285,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["hidden",{"_index":167,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["hide",{"_index":260,"title":{},"body":{"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{}}}],["highlight.js",{"_index":676,"title":{},"body":{"dependencies.html":{}}}],["highlightjs",{"_index":678,"title":{},"body":{"dependencies.html":{}}}],["hold",{"_index":381,"title":{},"body":{"classes/OverflowModel.html":{}}}],["holds",{"_index":48,"title":{},"body":{"classes/AsyncEvent.html":{},"classes/OverflowModel.html":{}}}],["hook",{"_index":236,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["hooks",{"_index":280,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["host",{"_index":158,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["hostbinding",{"_index":126,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{}}}],["hostbinding(\"class.toggle",{"_index":186,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["hostbindings",{"_index":92,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{}}}],["hostel",{"_index":407,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["html",{"_index":604,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["htmlelement",{"_index":113,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{}}}],["identifier",{"_index":634,"title":{},"body":{"coverage.html":{}}}],["ignore",{"_index":184,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["implements",{"_index":143,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["import",{"_index":51,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{}}}],["important",{"_index":602,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["imports",{"_index":631,"title":{},"body":{"modules/ResponsiveMenuModule.html":{}}}],["included",{"_index":495,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["includes",{"_index":173,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["index",{"_index":20,"title":{"index.html":{}},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"miscellaneous/enumerations.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{}}}],["informations",{"_index":372,"title":{},"body":{"classes/OverflowModel.html":{}}}],["inheritdoc",{"_index":191,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["initialize",{"_index":541,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["initialized",{"_index":255,"title":{},"body":{"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["initrenderprocess",{"_index":546,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["injectable",{"_index":293,"title":{"injectables/OverflowControl.html":{}},"body":{"injectables/OverflowControl.html":{},"coverage.html":{},"index.html":{}}}],["injectables",{"_index":294,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["injection",{"_index":306,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["inline",{"_index":596,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["input",{"_index":127,"title":{},"body":{"directives/MenuItemDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["inputs",{"_index":90,"title":{},"body":{"directives/MenuItemDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["instance",{"_index":156,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["interface",{"_index":472,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["internal",{"_index":58,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["iscustombutton",{"_index":476,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["isdestroyed",{"_index":185,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["isforcedoverflow",{"_index":496,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["isopen",{"_index":326,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["isoverflow",{"_index":374,"title":{},"body":{"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["item",{"_index":75,"title":{},"body":{"directives/MenuItemDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["item.addto(this.buttonpane.nativeelement",{"_index":580,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["item.addto(this.el.nativeelement",{"_index":122,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/OverflowContentDirective.html":{}}}],["item.addto(this.tmpbuttonpane.nativeelement",{"_index":537,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["item.directive",{"_index":251,"title":{},"body":{"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{}}}],["item.directive.ts",{"_index":73,"title":{},"body":{"directives/MenuItemDirective.html":{},"coverage.html":{}}}],["item.directive.ts:26",{"_index":107,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["item.directive.ts:29",{"_index":98,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["item.directive.ts:45",{"_index":114,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["item.directive.ts:61",{"_index":123,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["item.remove",{"_index":125,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["itemcollection",{"_index":568,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["itemcollection.push(menuitem",{"_index":566,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["items",{"_index":220,"title":{},"body":{"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["items(items",{"_index":383,"title":{},"body":{"classes/OverflowModel.html":{}}}],["items.indexof(item",{"_index":577,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["items.length",{"_index":269,"title":{},"body":{"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["js",{"_index":668,"title":{},"body":{"dependencies.html":{}}}],["justify",{"_index":591,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["key",{"_index":474,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["label",{"_index":478,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["last",{"_index":500,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["left",{"_index":206,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{},"miscellaneous/enumerations.html":{}}}],["legend",{"_index":603,"title":{},"body":{"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"index.html":{}}}],["lib/.../responsive",{"_index":689,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lib/ngx",{"_index":6,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["ln",{"_index":535,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["longer",{"_index":428,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["loop",{"_index":459,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["lt;ngx",{"_index":449,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["margin",{"_index":174,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["marginleft",{"_index":204,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["marginright",{"_index":208,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["mark",{"_index":502,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["markdown",{"_index":680,"title":{},"body":{"dependencies.html":{}}}],["matching",{"_index":67,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{}}}],["max",{"_index":504,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["maximal",{"_index":432,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["maxwidth",{"_index":505,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu",{"_index":77,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["menu.component",{"_index":627,"title":{},"body":{"modules/ResponsiveMenuModule.html":{}}}],["menu.component.html",{"_index":398,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu.component.scss",{"_index":397,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu.component.ts",{"_index":391,"title":{},"body":{"components/ResponsiveMenuComponent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["menu.component.ts:107",{"_index":427,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu.component.ts:114",{"_index":429,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu.component.ts:128",{"_index":418,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu.component.ts:141",{"_index":422,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu.component.ts:149",{"_index":413,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu.component.ts:155",{"_index":434,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu.component.ts:163",{"_index":453,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu.component.ts:173",{"_index":463,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu.component.ts:225",{"_index":410,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu.component.ts:270",{"_index":437,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu.component.ts:82",{"_index":445,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu.component.ts:89",{"_index":431,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menubar",{"_index":526,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menuitem",{"_index":564,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menuitem.remove",{"_index":524,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menuitem.visible",{"_index":565,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menuitemdirective",{"_index":70,"title":{"directives/MenuItemDirective.html":{}},"body":{"directives/MenuItemDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"coverage.html":{},"index.html":{}}}],["menuitems",{"_index":399,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menutoggledirective",{"_index":136,"title":{"directives/MenuToggleDirective.html":{}},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"coverage.html":{},"index.html":{}}}],["metadata",{"_index":85,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["methods",{"_index":21,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["miscellaneous",{"_index":687,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["model",{"_index":354,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["model/overflow.model",{"_index":356,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["module",{"_index":610,"title":{"modules/ResponsiveMenuModule.html":{}},"body":{"modules/ResponsiveMenuModule.html":{},"index.html":{}}}],["modules",{"_index":612,"title":{"modules.html":{}},"body":{"modules/ResponsiveMenuModule.html":{},"modules.html":{}}}],["more",{"_index":160,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["multiple",{"_index":301,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["name",{"_index":100,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["native",{"_index":170,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["nativeelement",{"_index":150,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["need",{"_index":465,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["never",{"_index":395,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["new",{"_index":57,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{},"coverage.html":{}}}],["next",{"_index":499,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["ng",{"_index":600,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["ngaftercontentinit",{"_index":509,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["ngafterviewinit",{"_index":192,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["ngclass]=\"'classname",{"_index":426,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["ngmodule",{"_index":625,"title":{},"body":{"modules/ResponsiveMenuModule.html":{}}}],["ngondestroy",{"_index":198,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["ngoninit",{"_index":261,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["ngx",{"_index":223,"title":{},"body":{"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{},"dependencies.html":{}}}],["ngxresponsivemenuitem",{"_index":87,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["ngxresponsivemenuitem]'},{'name",{"_index":607,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["ngxresponsivemenutoggle",{"_index":147,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["ngxresponsivemenutoggle]'},{'name",{"_index":608,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["nodes",{"_index":277,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["nodes.foreach((item",{"_index":286,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["none",{"_index":190,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{}}}],["notfied",{"_index":241,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["notified",{"_index":347,"title":{},"body":{"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["notify",{"_index":358,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["nowrap",{"_index":598,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["null",{"_index":118,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{}}}],["number",{"_index":175,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["oberservable",{"_index":346,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["oberservers",{"_index":360,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["observable",{"_index":349,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["observeable",{"_index":265,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["observers",{"_index":359,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["old",{"_index":519,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["onasynchook(event",{"_index":33,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["ondestroy",{"_index":145,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["oninit",{"_index":222,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["open",{"_index":211,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{}}}],["openoverflow",{"_index":213,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["operations",{"_index":14,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/OverflowContentDirective.html":{}}}],["option",{"_index":423,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["optional",{"_index":102,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["others",{"_index":572,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["out",{"_index":561,"title":{},"body":{"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"index.html":{}}}],["output",{"_index":248,"title":{},"body":{"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["outputs",{"_index":226,"title":{},"body":{"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["overflow",{"_index":111,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["overflowclasses",{"_index":477,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["overflowcontent",{"_index":254,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["overflowcontentdirective",{"_index":217,"title":{"directives/OverflowContentDirective.html":{}},"body":{"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"coverage.html":{},"index.html":{}}}],["overflowcontrol",{"_index":153,"title":{"injectables/OverflowControl.html":{}},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"coverage.html":{},"index.html":{}}}],["overflowctrl",{"_index":157,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["overflowdata",{"_index":556,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["overflowdata.length",{"_index":558,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["overflowitems",{"_index":382,"title":{},"body":{"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["overflowitems.push(item",{"_index":582,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["overflowmodel",{"_index":355,"title":{"classes/OverflowModel.html":{}},"body":{"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"coverage.html":{}}}],["overlay",{"_index":212,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["overview",{"_index":690,"title":{"index.html":{}},"body":{"index.html":{}}}],["package",{"_index":649,"title":{"dependencies.html":{}},"body":{}}],["pane",{"_index":419,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["parameters",{"_index":99,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["parent",{"_index":116,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["parseint(style.getpropertyvalue(\"margin",{"_index":205,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["parseint(this.tmpbuttonpane.nativeelement.offsetwidth",{"_index":586,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["pass",{"_index":16,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["passed",{"_index":392,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["pipe",{"_index":194,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["pipe(takeuntil(this.isdestroyed",{"_index":275,"title":{},"body":{"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["position",{"_index":414,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["possible",{"_index":415,"title":{},"body":{"components/ResponsiveMenuComponent.html":{},"miscellaneous/enumerations.html":{}}}],["possibleoverflowitems",{"_index":503,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["prepare",{"_index":560,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["preparemenuitems",{"_index":562,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["private",{"_index":55,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["process",{"_index":435,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["promise",{"_index":47,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["properties",{"_index":225,"title":{},"body":{"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["property",{"_index":165,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["protected",{"_index":485,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["provide",{"_index":304,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["provider/async",{"_index":252,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["provider/overflow.control",{"_index":177,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{}}}],["providers",{"_index":615,"title":{},"body":{"modules/ResponsiveMenuModule.html":{},"index.html":{}}}],["public",{"_index":22,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["push",{"_index":581,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["pushed",{"_index":570,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["put",{"_index":529,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["querylist",{"_index":442,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["reached",{"_index":528,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["read",{"_index":484,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["register",{"_index":259,"title":{},"body":{"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["registerhideevent",{"_index":273,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["registers",{"_index":74,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{}}}],["registershowevent",{"_index":266,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["remove",{"_index":89,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["removecontent(nodes",{"_index":289,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["removed",{"_index":237,"title":{},"body":{"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["render",{"_index":235,"title":{},"body":{"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["render(width",{"_index":530,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["rendercontent(nodes",{"_index":281,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["rendered",{"_index":79,"title":{},"body":{"directives/MenuItemDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["renderer",{"_index":96,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["renderer2",{"_index":97,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["rendering",{"_index":84,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["renders",{"_index":219,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["required",{"_index":142,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["rerender",{"_index":439,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["reserved",{"_index":506,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["reservedwidth",{"_index":507,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["reset",{"_index":622,"title":{},"body":{"modules/ResponsiveMenuModule.html":{},"index.html":{}}}],["resizable",{"_index":663,"title":{},"body":{"dependencies.html":{}}}],["responsive",{"_index":76,"title":{},"body":{"directives/MenuItemDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["responsivemenu",{"_index":224,"title":{},"body":{"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["responsivemenu.module.ts",{"_index":624,"title":{},"body":{"modules/ResponsiveMenuModule.html":{}}}],["responsivemenu/components/responsive",{"_index":390,"title":{},"body":{"components/ResponsiveMenuComponent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["responsivemenu/directives/menu",{"_index":72,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"coverage.html":{}}}],["responsivemenu/directives/overflow.directive.ts",{"_index":218,"title":{},"body":{"directives/OverflowContentDirective.html":{},"coverage.html":{}}}],["responsivemenu/directives/overflow.directive.ts:36",{"_index":243,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["responsivemenu/directives/overflow.directive.ts:44",{"_index":242,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["responsivemenu/directives/overflow.directive.ts:50",{"_index":238,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["responsivemenu/directives/overflow.directive.ts:58",{"_index":240,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["responsivemenu/directives/overflow.directive.ts:64",{"_index":233,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["responsivemenu/directives/overflow.directive.ts:66",{"_index":232,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["responsivemenu/directives/overflow.directive.ts:69",{"_index":247,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["responsivemenu/model/overflow.model.ts",{"_index":371,"title":{},"body":{"classes/OverflowModel.html":{},"coverage.html":{}}}],["responsivemenu/model/overflow.model.ts:16",{"_index":380,"title":{},"body":{"classes/OverflowModel.html":{}}}],["responsivemenu/model/overflow.model.ts:23",{"_index":378,"title":{},"body":{"classes/OverflowModel.html":{}}}],["responsivemenu/model/overflow.model.ts:30",{"_index":375,"title":{},"body":{"classes/OverflowModel.html":{}}}],["responsivemenu/ngx",{"_index":623,"title":{},"body":{"modules/ResponsiveMenuModule.html":{}}}],["responsivemenu/provider/async",{"_index":7,"title":{},"body":{"classes/AsyncEvent.html":{},"coverage.html":{}}}],["responsivemenu/provider/overflow.control.ts",{"_index":295,"title":{},"body":{"injectables/OverflowControl.html":{},"coverage.html":{}}}],["responsivemenu/provider/overflow.control.ts:100",{"_index":332,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["responsivemenu/provider/overflow.control.ts:108",{"_index":335,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["responsivemenu/provider/overflow.control.ts:119",{"_index":334,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["responsivemenu/provider/overflow.control.ts:129",{"_index":331,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["responsivemenu/provider/overflow.control.ts:68",{"_index":340,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["responsivemenu/provider/overflow.control.ts:75",{"_index":345,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["responsivemenu/provider/overflow.control.ts:82",{"_index":351,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["responsivemenu/provider/overflow.control.ts:84",{"_index":330,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["responsivemenu/provider/overflow.control.ts:93",{"_index":353,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["responsivemenucomponent",{"_index":386,"title":{"components/ResponsiveMenuComponent.html":{}},"body":{"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"coverage.html":{},"index.html":{}}}],["responsivemenuitem",{"_index":393,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["responsivemenumodule",{"_index":611,"title":{"modules/ResponsiveMenuModule.html":{}},"body":{"modules/ResponsiveMenuModule.html":{},"index.html":{},"modules.html":{}}}],["responsivemenutoggle",{"_index":394,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["result",{"_index":66,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{}}}],["results",{"_index":68,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{}}}],["return",{"_index":59,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["returns",{"_index":42,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["retursn",{"_index":333,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["right",{"_index":209,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{},"miscellaneous/enumerations.html":{}}}],["root",{"_index":133,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["row",{"_index":594,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["rxjs",{"_index":53,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":179,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["selector",{"_index":86,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["service",{"_index":300,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["set",{"_index":108,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["setclassoverflow(name",{"_index":448,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["setcustomtogglebutton(btn",{"_index":462,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["setdefaulttogglebtn(btn",{"_index":452,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["setdisplay(display",{"_index":161,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["setforceoverflow(forced",{"_index":339,"title":{},"body":{"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["setitems(items",{"_index":379,"title":{},"body":{"classes/OverflowModel.html":{}}}],["shared",{"_index":299,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["show",{"_index":141,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["showmax",{"_index":404,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["shown",{"_index":348,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["shrink",{"_index":599,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["simply",{"_index":425,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["smaller",{"_index":501,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["soft",{"_index":164,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["something",{"_index":446,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{}}}],["state",{"_index":50,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["statements",{"_index":635,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":454,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["string",{"_index":417,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["style",{"_index":202,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["styles",{"_index":388,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["styleurls",{"_index":317,"title":{},"body":{"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["sub1",{"_index":314,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["sub2",{"_index":322,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["sub_1.component.html",{"_index":316,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["sub_1.component.scss",{"_index":318,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["sub_2.component.html",{"_index":323,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["sub_2.component.scss",{"_index":324,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["subcomponent1",{"_index":320,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["subcomponent2",{"_index":325,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["subject",{"_index":52,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["subscribe",{"_index":196,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["subscribe((items",{"_index":271,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["subscriptions",{"_index":183,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["support",{"_index":691,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":692,"title":{},"body":{"modules.html":{}}}],["table",{"_index":648,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":647,"title":{},"body":{"coverage.html":{}}}],["takeuntil",{"_index":178,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["takeuntil(this.isdestroyed",{"_index":195,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{}}}],["tap",{"_index":250,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["template",{"_index":387,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["templateurl",{"_index":315,"title":{},"body":{"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["temporary",{"_index":490,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.afterremove.emit",{"_index":292,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["this.afterrender.emit",{"_index":287,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["this.aligntoggle",{"_index":578,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.beforeremove.emit(event",{"_index":291,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["this.beforeremove.observers.length",{"_index":290,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["this.beforerender.emit(event",{"_index":283,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["this.beforerender.observers.length",{"_index":282,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["this.buttonpane.nativeelement",{"_index":514,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.calchostwidth",{"_index":533,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.changedetector.detectchanges",{"_index":525,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.clearview",{"_index":547,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.close",{"_index":368,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["this.complete",{"_index":62,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["this.data.items.length",{"_index":367,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["this.doasyncoperation",{"_index":36,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["this.el",{"_index":120,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["this.el.nativeelement",{"_index":131,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{}}}],["this.el.nativeelement.getboundingclientrect().width",{"_index":201,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["this.event",{"_index":56,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["this.event$.complete",{"_index":65,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["this.event$.next(false",{"_index":63,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["this.event$.next(true",{"_index":61,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["this.event$.topromise",{"_index":60,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["this.finalizemenuitems",{"_index":557,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.finalizerender.emit(completed",{"_index":288,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["this.finalizerenderprocess",{"_index":540,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.forced",{"_index":362,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["this.hide$.asobservable",{"_index":364,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["this.hide$.next(this.data.items",{"_index":370,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["this.initrenderprocess",{"_index":531,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.iscustombutton",{"_index":488,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.isdestroyed",{"_index":187,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{}}}],["this.isdestroyed$.next",{"_index":508,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.isdestroyed.complete",{"_index":200,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{}}}],["this.isdestroyed.next(true",{"_index":199,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{}}}],["this.isforcedoverflow",{"_index":479,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.items.length",{"_index":385,"title":{},"body":{"classes/OverflowModel.html":{}}}],["this.maxwidth",{"_index":532,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.menuitem",{"_index":121,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["this.menuitems.changes",{"_index":510,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.menuitems.foreach((menuitem",{"_index":523,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.menuitems.reduce((itemcollection",{"_index":563,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.menuitems.toarray().reduce((overflowitems",{"_index":576,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.openoverflow",{"_index":197,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["this.overflowclasses[name",{"_index":482,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.overflowctrl.close",{"_index":215,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["this.overflowctrl.data.items",{"_index":549,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.overflowctrl.forceoverflow",{"_index":480,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.overflowctrl.hide",{"_index":274,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["this.overflowctrl.isopen",{"_index":214,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{}}}],["this.overflowctrl.open",{"_index":216,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["this.overflowctrl.show.pipe",{"_index":267,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["this.overflowctrl.update",{"_index":518,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.overflowitems",{"_index":384,"title":{},"body":{"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["this.overflowitems.length",{"_index":574,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.overflowitems.push(item",{"_index":539,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.overflowitems.push(menuitem",{"_index":567,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.overflowmodel",{"_index":365,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["this.possibleoverflowitems",{"_index":548,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.possibleoverflowitems.concat(this.overflowitems",{"_index":575,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.preparemenuitems",{"_index":534,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.registerhideevent",{"_index":264,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["this.registershowevent",{"_index":263,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["this.removecontent(items",{"_index":276,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["this.render",{"_index":516,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.render(width",{"_index":517,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.rendercontent(items",{"_index":272,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["this.rendercontent(this.overflowctrl.data.items",{"_index":262,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["this.rendered",{"_index":366,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["this.rendered.emit",{"_index":559,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.renderer.appendchild",{"_index":513,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.renderer.appendchild(parent",{"_index":132,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["this.renderer.insertbefore(parent",{"_index":130,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["this.renderer.parentnode",{"_index":134,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["this.renderer.removechild",{"_index":135,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["this.renderer.setstyle(this.el.nativeelement",{"_index":189,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{}}}],["this.reservedwidth",{"_index":551,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.show$.asobservable",{"_index":363,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["this.show$.next(this.data.items",{"_index":369,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["this.showmax",{"_index":536,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.togglebtn",{"_index":486,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.togglebtn.display",{"_index":550,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.togglebtn.nativeelement",{"_index":515,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.togglebtn.width",{"_index":552,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.update",{"_index":511,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.validatesize(item",{"_index":538,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["through",{"_index":11,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["tmpbuttonpane",{"_index":494,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["together",{"_index":587,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["toggle",{"_index":138,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{},"miscellaneous/enumerations.html":{}}}],["toggle.directive",{"_index":469,"title":{},"body":{"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{}}}],["toggle.directive.ts",{"_index":137,"title":{},"body":{"directives/MenuToggleDirective.html":{},"coverage.html":{}}}],["toggle.directive.ts:32",{"_index":154,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["toggle.directive.ts:48",{"_index":163,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["toggle.directive.ts:55",{"_index":169,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["toggle.directive.ts:83",{"_index":172,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["togglebtn",{"_index":497,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["tree",{"_index":307,"title":{},"body":{"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["triggers",{"_index":244,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["true",{"_index":106,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["try",{"_index":34,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["tslib",{"_index":683,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":101,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"coverage.html":{}}}],["u",{"_index":303,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["unless",{"_index":337,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["until",{"_index":456,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["up",{"_index":542,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["update",{"_index":327,"title":{},"body":{"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["update(width",{"_index":436,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["use",{"_index":298,"title":{},"body":{"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["used",{"_index":373,"title":{},"body":{"classes/OverflowModel.html":{}}}],["usedsize",{"_index":585,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["validate",{"_index":583,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["validatesize",{"_index":584,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["value",{"_index":105,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{},"miscellaneous/enumerations.html":{}}}],["values",{"_index":416,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["var",{"_index":605,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["view",{"_index":278,"title":{},"body":{"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["viewchild",{"_index":467,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["viewchild(menutoggledirective",{"_index":483,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["viewproviders",{"_index":319,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["views",{"_index":543,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["visibility",{"_index":336,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["visibilty",{"_index":166,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["visible",{"_index":91,"title":{},"body":{"directives/MenuItemDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["visualization",{"_index":492,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["void",{"_index":43,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["wait",{"_index":455,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["want",{"_index":210,"title":{},"body":{"directives/MenuToggleDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["width",{"_index":151,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["wrap",{"_index":597,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["yes",{"_index":441,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["zone.js",{"_index":685,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":621,"title":{},"body":{"modules/ResponsiveMenuModule.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AsyncEvent.html":{"url":"classes/AsyncEvent.html","title":"class - AsyncEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AsyncEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-responsivemenu/provider/async-event.ts\n        \n\n            \n                Description\n            \n            \n                AsyncEvent which will emits through EventEmitter\nso we can do some (async) operations before we\nlet pass / cancel the event.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cancel\n                            \n                            \n                                    Public\n                                done\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    completed\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-responsivemenu/provider/async-event.ts:11\n                            \n                        \n\n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            cancel\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    cancel()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-responsivemenu/provider/async-event.ts:54\n                \n            \n\n\n            \n                \n                    should be called to continue event\n\n\n                    \n                        Example :\n                        \n                            public async onAsyncHook(event: AsyncEvent) {\n     try {\n         await this.doAsyncOperation();\n         event.done();\n     } catch (fatalError: Error) {\n         event.cancel();\n     }\n}\n                        \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            done\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    done()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-responsivemenu/provider/async-event.ts:35\n                \n            \n\n\n            \n                \n                    should be called to continue event\n\n\n                    \n                        Example :\n                        \n                            public async onAsyncHook(event: AsyncEvent) {\n     await this.doAsyncOperation();\n     event.done();\n}\n                        \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        completed\n                    \n                \n\n                \n                    \n                        getcompleted()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/provider/async-event.ts:21\n                                \n                            \n                    \n                        \n                                returns promise which holds current state from event\n\n\n                                \n                                \n                                \n                                    Returns :     Promise\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Subject } from \"rxjs\";\n\n/**\n * AsyncEvent which will emits through EventEmitter\n * so we can do some (async) operations before we\n * let pass / cancel the event.\n *\n */\nexport class AsyncEvent {\n\n    private event$: Subject;\n\n    public constructor() {\n        this.event$ = new Subject();\n    }\n\n    /**\n     * returns promise which holds current state from event\n     * @internal\n     */\n    public get completed(): Promise {\n        return this.event$.toPromise();\n    }\n\n    /**\n     * should be called to continue event\n     *\n     * @example\n     *\n     * public async onAsyncHook(event: AsyncEvent) {\n     *     await this.doAsyncOperation();\n     *     event.done();\n     * }\n     */\n    public done() {\n        this.event$.next(true);\n        this.complete();\n    }\n\n    /**\n     * should be called to continue event\n     *\n     * @example\n     *\n     * public async onAsyncHook(event: AsyncEvent) {\n     *     try {\n     *         await this.doAsyncOperation();\n     *         event.done();\n     *     } catch (fatalError: Error) {\n     *         event.cancel();\n     *     }\n     * }\n     */\n    public cancel() {\n        this.event$.next(false);\n        this.complete();\n    }\n\n    private complete() {\n        this.event$.complete();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/MenuItemDirective.html":{"url":"directives/MenuItemDirective.html","title":"directive - MenuItemDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  MenuItemDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-responsivemenu/directives/menu-item.directive.ts\n        \n\n            \n                Description\n            \n            \n                registers item as responsive menu item, all other content will not rendered\n\n            \n\n\n            \n                Example\n            \n            \n                        \n                            \n     Button 1\n     Button 2\n     Button 3\n     \n     Not rendering\n\n                        \n            \n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxResponsiveMenuItem]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addTo\n                            \n                            \n                                    Public\n                                remove\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                visible\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                class.responsive-menu--item\n                            \n                        \n                    \n                \n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(el: ElementRef, renderer: Renderer2)\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-responsivemenu/directives/menu-item.directive.ts:29\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        el\n                                                  \n                                                        \n                                                                        ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                        Renderer2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        visible\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/directives/menu-item.directive.ts:26\n                            \n                        \n                \n                    \n                        if set to false menu item will allways rendered to overflow\ndefault false\n\n                    \n                \n            \n        \n\n\n            \n    HostBindings        \n            \n                \n                    \n                        \n                        \n                            \n                            class.responsive-menu--item\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/directives/menu-item.directive.ts:29\n                            \n                        \n\n\n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addTo\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addTo(parent: HTMLElement, before: HTMLElement)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-responsivemenu/directives/menu-item.directive.ts:45\n                \n            \n\n\n            \n                \n                    add item to parent element\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    parent\n                                    \n                                            HTMLElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    before\n                                    \n                                            HTMLElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        null\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            const parent: ElementRef = this.el;\nconst item: MenuItemDirective = this.menuItem;\nitem.addTo(this.el.nativeElement);\n                        \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-responsivemenu/directives/menu-item.directive.ts:61\n                \n            \n\n\n            \n                \n                    remove item from parent children\n\n\n                    \n                        Example :\n                        \n                            const item: MenuItemDirective = this.menuItem;\nitem.remove();\n                        \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, ElementRef, HostBinding, Input, Renderer2 } from \"@angular/core\";\n\n/**\n * registers item as responsive menu item, all other content will not rendered\n *\n * @example\n *\n * \n *     Button 1\n *     Button 2\n *     Button 3\n *     \n *     Not rendering\n * \n */\n@Directive( {\n    selector: \"[ngxResponsiveMenuItem]\"\n} )\nexport class MenuItemDirective  {\n\n    /**\n     * if set to false menu item will allways rendered to overflow\n     * default false\n     */\n    @Input()\n    public visible = true;\n\n    @HostBinding( \"class.responsive-menu--item\" )\n    public className = true;\n\n    constructor(\n        private el: ElementRef,\n        private renderer: Renderer2\n    ) { }\n\n    /**\n     * add item to parent element\n     *\n     * @example\n     *\n     * const parent: ElementRef = this.el;\n     * const item: MenuItemDirective = this.menuItem;\n     * item.addTo(this.el.nativeElement);\n     */\n    public addTo( parent: HTMLElement, before: HTMLElement = null ) {\n        if (before) {\n            this.renderer.insertBefore(parent, this.el.nativeElement, before);\n            return;\n        }\n        this.renderer.appendChild(parent, this.el.nativeElement);\n    }\n\n    /**\n     * remove item from parent children\n     *\n     * @example\n     *\n     * const item: MenuItemDirective = this.menuItem;\n     * item.remove();\n     */\n    public remove() {\n        const root: HTMLElement = this.renderer.parentNode( this.el.nativeElement );\n        this.renderer.removeChild( root, this.el.nativeElement );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/MenuToggleDirective.html":{"url":"directives/MenuToggleDirective.html","title":"directive - MenuToggleDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  MenuToggleDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-responsivemenu/directives/menu-toggle.directive.ts\n        \n\n            \n                Description\n            \n            \n                toggle button which automatically registers on click event an show overflow if required\n\n            \n\n            \n                Implements\n            \n            \n                            AfterViewInit\n                            OnDestroy\n            \n\n            \n                Example\n            \n            \n                        \n                            \n     ...\n     Custom Toggle Button\n\n                        \n            \n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxResponsiveMenuToggle]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n\n\n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                class.toggle\n                            \n                        \n                    \n                \n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    display\n                                \n                                \n                                    nativeElement\n                                \n                                \n                                    width\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(overflowCtrl: OverflowControl, renderer: Renderer2, el: ElementRef)\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-responsivemenu/directives/menu-toggle.directive.ts:32\n                            \n                        \n\n                \n                    \n                            Creates an instance of MenuToggleDirective.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        overflowCtrl\n                                                  \n                                                        \n                                                                        OverflowControl\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                        Renderer2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        el\n                                                  \n                                                        \n                                                                        ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n            \n    HostBindings        \n            \n                \n                    \n                        \n                        \n                            \n                            class.toggle\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/directives/menu-toggle.directive.ts:32\n                            \n                        \n\n                \n                    \n                        add host css class more\n\n                    \n                \n\n            \n        \n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        display\n                    \n                \n\n\n                \n                    \n                        setdisplay(display: boolean)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/directives/menu-toggle.directive.ts:48\n                                \n                            \n                    \n                        \n                                display button if soft is true button has css property visibilty: hidden\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            display\n                                                    \n                                                            \n                                                                            boolean\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        nativeElement\n                    \n                \n\n                \n                    \n                        getnativeElement()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/directives/menu-toggle.directive.ts:55\n                                \n                            \n                    \n                        \n                                return native element from more button\n\n\n                                \n                                    Returns :     HTMLElement\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        width\n                    \n                \n\n                \n                    \n                        getwidth()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/directives/menu-toggle.directive.ts:83\n                                \n                            \n                    \n                        \n                                get current width of button includes margin\n\n\n                                \n                                    Returns :         number\n\n                                \n                        \n                    \n\n            \n        \n\n\n    \n\n\n    \n        import { Directive, ElementRef, AfterViewInit, OnDestroy, Renderer2, HostBinding } from \"@angular/core\";\nimport { fromEvent, Subject } from \"rxjs\";\nimport { OverflowControl } from \"../provider/overflow.control\";\nimport { takeUntil } from \"rxjs/operators\";\n\n/**\n * toggle button which automatically registers on click event an show overflow if required\n *\n * @example\n *\n * \n *     ...\n *     Custom Toggle Button\n * \n */\n@Directive({\n    selector: \"[ngxResponsiveMenuToggle]\"\n})\nexport class MenuToggleDirective implements AfterViewInit, OnDestroy {\n\n    /**\n     * emits true if component gets destroyed to remove from subscriptions\n     *\n     * @ignore\n     */\n    private isDestroyed: Subject;\n\n    /**\n     * add host css class more\n     */\n    @HostBinding(\"class.toggle\")\n    public className = true;\n\n    /**\n     * Creates an instance of MenuToggleDirective.\n     */\n    constructor(\n        private overflowCtrl: OverflowControl,\n        private renderer: Renderer2,\n        private el: ElementRef\n    ) {\n        this.isDestroyed = new Subject();\n    }\n\n    /**\n     * display button if soft is true button has css property visibilty: hidden\n     */\n    public set display(display: boolean) {\n        this.renderer.setStyle(this.el.nativeElement, \"display\", display ? null : \"none\");\n    }\n\n    /**\n     * return native element from more button\n     */\n    public get nativeElement(): HTMLElement {\n        return this.el.nativeElement;\n    }\n\n    /**\n     * @inheritdoc\n     * @ignore\n     */\n    public ngAfterViewInit() {\n        fromEvent(this.el.nativeElement, \"click\")\n            .pipe(\n                takeUntil(this.isDestroyed)\n            )\n            .subscribe(() => this.openOverflow());\n    }\n\n    /**\n     * @inheritdoc\n     * @ignore\n     */\n    public ngOnDestroy() {\n        this.isDestroyed.next(true);\n        this.isDestroyed.complete();\n    }\n\n    /**\n     * get current width of button includes margin\n     */\n    public get width(): number {\n        const width = this.el.nativeElement.getBoundingClientRect().width;\n        const style = getComputedStyle( this.el.nativeElement );\n\n        const marginLeft  = parseInt(style.getPropertyValue(\"margin-left\") , 10);\n        const marginRight = parseInt(style.getPropertyValue(\"margin-right\"), 10);\n\n        return width + marginLeft + marginRight;\n    }\n\n    /**\n     * if we click on the button we want to open the overlay\n     */\n    private openOverflow() {\n        this.overflowCtrl.isOpen() ? this.overflowCtrl.close() : this.overflowCtrl.open();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/OverflowContentDirective.html":{"url":"directives/OverflowContentDirective.html","title":"directive - OverflowContentDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  OverflowContentDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-responsivemenu/directives/overflow.directive.ts\n        \n\n            \n                Description\n            \n            \n                renders overflow content if overflow items exists\n\n            \n\n            \n                Implements\n            \n            \n                            OnInit\n                            OnDestroy\n            \n\n            \n                Example\n            \n            \n                        \n                            \n   \n   \n     \n   \n\n\n\n   \n   \n\n                        \n            \n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        ngx-responsivemenu-overflow\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                el\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                afterRemove\n                            \n                            \n                                afterRender\n                            \n                            \n                                beforeRemove\n                            \n                            \n                                beforeRender\n                            \n                            \n                                finalizeRender\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(el: ElementRef, overflowCtrl: OverflowControl, renderer: Renderer2)\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-responsivemenu/directives/overflow.directive.ts:66\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        el\n                                                  \n                                                        \n                                                                        ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        overflowCtrl\n                                                  \n                                                        \n                                                                        OverflowControl\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                        Renderer2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    Outputs\n        \n            \n                \n                    \n                        \n                        afterRemove\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/directives/overflow.directive.ts:64\n                            \n                        \n                \n                    \n                        overflow container render hook after content has been removed.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        afterRender\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/directives/overflow.directive.ts:50\n                            \n                        \n                \n                    \n                        overflow container render hook after content has been applied.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        beforeRemove\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/directives/overflow.directive.ts:58\n                            \n                        \n                \n                    \n                        overflow container render hook before content will be removed.\nEmits AsyncEvent which should notfied with $event.done() after\nall operations are completed\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        beforeRender\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/directives/overflow.directive.ts:44\n                            \n                        \n                \n                    \n                        overflow container render hook before content will be applied.\nEmits AsyncEvent which should notfied with $event.done() after\nall operations are completed\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        finalizeRender\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/directives/overflow.directive.ts:36\n                            \n                        \n                \n                    \n                        triggers allways after rendering has been completed even if\nbeforeRender / beforeRemove canceled\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            el\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ElementRef\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/directives/overflow.directive.ts:69\n                            \n                        \n\n\n            \n        \n\n\n\n    \n\n\n    \n        import { Directive, OnInit, OnDestroy, Output, EventEmitter, Renderer2, ElementRef } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil, filter, tap } from \"rxjs/operators\";\nimport { OverflowControl } from \"../provider/overflow.control\";\nimport { MenuItemDirective } from \"./menu-item.directive\";\nimport { AsyncEvent } from \"../provider/async-event\";\n\n/**\n * renders overflow content if overflow items exists\n *\n * @example\n *\n * \n *   \n *   \n *     \n *   \n * \n *\n * \n *   \n *   \n * \n */\n@Directive( {\n    selector: \"ngx-responsivemenu-overflow\",\n    exportAs: \"overflowContent\"\n})\nexport class OverflowContentDirective implements OnInit, OnDestroy {\n\n    /**\n     * triggers allways after rendering has been completed even if\n     * beforeRender / beforeRemove canceled\n     */\n    @Output()\n    public finalizeRender: EventEmitter = new EventEmitter();\n\n    /**\n     * overflow container render hook before content will be applied.\n     * Emits AsyncEvent which should notfied with $event.done() after\n     * all operations are completed\n     */\n    @Output()\n    public beforeRender: EventEmitter = new EventEmitter();\n\n    /**\n     * overflow container render hook after content has been applied.\n     */\n    @Output()\n    public afterRender: EventEmitter = new EventEmitter();\n\n    /**\n     * overflow container render hook before content will be removed.\n     * Emits AsyncEvent which should notfied with $event.done() after\n     * all operations are completed\n     */\n    @Output()\n    public beforeRemove: EventEmitter = new EventEmitter();\n\n    /**\n     * overflow container render hook after content has been removed.\n     */\n    @Output()\n    public afterRemove: EventEmitter = new EventEmitter();\n\n    private isDestroyed: Subject;\n\n    constructor(\n        public el: ElementRef,\n        private overflowCtrl: OverflowControl,\n        private renderer: Renderer2,\n    ) {\n        this.isDestroyed = new Subject();\n    }\n\n    /**\n     * @ignore\n     */\n    public ngOnDestroy() {\n        this.isDestroyed.next(true);\n        this.isDestroyed.complete();\n    }\n\n    /**\n     * component initialized, if overflow is allready flag as open\n     * render directly.\n     * Register to show / hide\n     *\n     * @ignore\n     */\n    public ngOnInit() {\n        if (this.overflowCtrl.isOpen()) {\n            this.renderContent(this.overflowCtrl.data.items);\n        }\n\n        this.registerShowEvent();\n        this.registerHideEvent();\n    }\n\n    /**\n     * subscribe to overflowctrl show observeable\n     * only renders content if items exists\n     */\n    private registerShowEvent() {\n        this.overflowCtrl.show.pipe(\n            takeUntil(this.isDestroyed),\n            filter((items) => items.length > 0),\n        ).subscribe((items) => this.renderContent(items));\n    }\n\n    /**\n     * subscribe to overflowctrl hide observeable\n     * remove content from directive\n     */\n    private registerHideEvent() {\n        this.overflowCtrl.hide\n            .pipe(takeUntil(this.isDestroyed))\n            .subscribe((items) => this.removeContent(items));\n    }\n\n    /**\n     * render nodes into host view, calls beforeRender and afterRender hooks\n     */\n    private async renderContent(nodes: MenuItemDirective[]) {\n        let completed = true;\n        if (this.beforeRender.observers.length) {\n            const event = new AsyncEvent();\n            this.beforeRender.emit(event);\n            completed = await event.completed;\n        }\n\n        /** add content here */\n        if (completed) {\n            nodes.forEach((item) => item.addTo(this.el.nativeElement));\n            this.renderer.setStyle(this.el.nativeElement, \"display\", null);\n            this.afterRender.emit();\n        }\n\n        this.finalizeRender.emit(completed);\n    }\n\n    /**\n     * remove nodes from host view, calls beforeRemove, afterRemove\n     */\n    private async removeContent(nodes: MenuItemDirective[]) {\n\n        let completed = true;\n        if (this.beforeRemove.observers.length) {\n            const event = new AsyncEvent();\n            this.beforeRemove.emit(event);\n            completed = await event.completed;\n        }\n\n        if (completed) {\n            nodes.forEach((item) => item.remove());\n            this.renderer.setStyle(this.el.nativeElement, \"display\", \"none\");\n            this.afterRemove.emit();\n        }\n\n        this.finalizeRender.emit(completed);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OverflowControl.html":{"url":"injectables/OverflowControl.html","title":"injectable - OverflowControl","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  OverflowControl\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-responsivemenu/provider/overflow.control.ts\n        \n\n            \n                Description\n            \n            \n                overflow control to open / close overflow.\nEvery ResponsiveMenu will use this shared service. If you want display multiple\nresponsive menu components u should provide an own OverflowControl service in dependcy injection tree.\nIn this case both components got his own OverflowControl and dont affect each other.\n\n            \n\n\n            \n                Example\n            \n            \n                        \n                            Component({\n     selector: \"app-sub1-component\",\n     templateUrl: \"sub_1.component.html\",\n     styleUrls: [\"./sub_1.component.scss\"],\n     viewProviders: [OverflowControl]\n})\nexport class SubComponent1 implements AfterViewInit, AfterContentInit, OnDestroy {\n     ...\n}\n\nComponent({\n     selector: \"app-sub2-component\",\n     templateUrl: \"sub_2.component.html\",\n     styleUrls: [\"./sub_2.component.scss\"],\n     viewProviders: [OverflowControl]\n})\nexport class SubComponent2 implements AfterViewInit, AfterContentInit, OnDestroy {\n     ...\n}\n                        \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                close\n                            \n                            \n                                    Public\n                                isOpen\n                            \n                            \n                                    Public\n                                open\n                            \n                            \n                                    Public\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    forceOverflow\n                                \n                                \n                                    show\n                                \n                                \n                                    hide\n                                \n                                \n                                    data\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-responsivemenu/provider/overflow.control.ts:84\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            close\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    close()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-responsivemenu/provider/overflow.control.ts:129\n                \n            \n\n\n            \n                \n                    close overflow content\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isOpen\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isOpen()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-responsivemenu/provider/overflow.control.ts:100\n                \n            \n\n\n            \n                \n                    retursn true if overflow container is rendered\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            open\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    open()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-responsivemenu/provider/overflow.control.ts:119\n                \n            \n\n\n            \n                \n                    show overflow content\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-responsivemenu/provider/overflow.control.ts:108\n                \n            \n\n\n            \n                \n                    update overflow visibility, if no overflow items exists it will\nclose overflow automatically, unless overflow is forced\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        forceOverflow\n                    \n                \n\n\n                \n                    \n                        setforceOverflow(forced: boolean)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/provider/overflow.control.ts:68\n                                \n                            \n                    \n                        \n                                set force overflow, if set to true this will allways emits show\nfor overflow conainer even if no overflow items exits.\ndefault is set to false\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            forced\n                                                    \n                                                            \n                                                                            boolean\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        show\n                    \n                \n\n                \n                    \n                        getshow()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/provider/overflow.control.ts:75\n                                \n                            \n                    \n                        \n                                returns oberservable to get notified overflow should be shown\n\n\n                                \n                                    Returns :     Observable\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        hide\n                    \n                \n\n                \n                    \n                        gethide()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/provider/overflow.control.ts:82\n                                \n                            \n                    \n                        \n                                returns oberservable to get notified overflow should be hide\n\n\n                                \n                                    Returns :     Observable\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n\n                \n                    \n                        getdata()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/provider/overflow.control.ts:93\n                                \n                            \n                    \n                        \n                                returns overflow data model\n\n\n                                \n                                    Returns :         OverflowModel\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { OverflowModel } from \"../model/overflow.model\";\nimport { Injectable } from \"@angular/core\";\nimport { MenuItemDirective } from \"../directives/menu-item.directive\";\nimport { Observable, Subject } from \"rxjs\";\n\n/**\n * overflow control to open / close overflow.\n *\n * Every ResponsiveMenu will use this shared service. If you want display multiple\n * responsive menu components u should provide an own OverflowControl service in dependcy injection tree.\n * In this case both components got his own OverflowControl and dont affect each other.\n *\n * @example\n *\n * Component({\n *     selector: \"app-sub1-component\",\n *     templateUrl: \"sub_1.component.html\",\n *     styleUrls: [\"./sub_1.component.scss\"],\n *     viewProviders: [OverflowControl]\n * })\n * export class SubComponent1 implements AfterViewInit, AfterContentInit, OnDestroy {\n *     ...\n * }\n *\n * Component({\n *     selector: \"app-sub2-component\",\n *     templateUrl: \"sub_2.component.html\",\n *     styleUrls: [\"./sub_2.component.scss\"],\n *     viewProviders: [OverflowControl]\n * })\n * export class SubComponent2 implements AfterViewInit, AfterContentInit, OnDestroy {\n *     ...\n * }\n */\n@Injectable()\nexport class OverflowControl {\n\n    private rendered = false;\n\n    /**\n     * data model\n     */\n    private overflowModel: OverflowModel;\n\n    /**\n     * notify all observers if overflow should be rendered\n     * but only if overflow items exists\n     */\n    private show$: Subject = new Subject();\n\n    /**\n     * notify all observers if overflow should be removed\n     */\n    private hide$: Subject = new Subject();\n\n    /**\n     * if true show$ will allways notify oberservers even if no\n     * items exists\n     */\n    private forced: boolean;\n\n    /**\n     * set force overflow, if set to true this will allways emits show\n     * for overflow conainer even if no overflow items exits.\n     *\n     * default is set to false\n     */\n    public set forceOverflow(forced: boolean) {\n        this.forced = forced;\n    }\n\n    /**\n     * returns oberservable to get notified overflow should be shown\n     */\n    public get show(): Observable {\n        return this.show$.asObservable();\n    }\n\n    /**\n     * returns oberservable to get notified overflow should be hide\n     */\n    public get hide(): Observable {\n        return this.hide$.asObservable();\n    }\n\n    public constructor() {\n        this.overflowModel = new OverflowModel();\n    }\n\n    /**\n     * returns overflow data model\n     */\n    public get data(): OverflowModel {\n        return this.overflowModel;\n    }\n\n    /**\n     * retursn true if overflow container is rendered\n     */\n    public isOpen(): boolean {\n        return this.rendered;\n    }\n\n    /**\n     * update overflow visibility, if no overflow items exists it will\n     * close overflow automatically, unless overflow is forced\n     */\n    public update() {\n        if (this.rendered) {\n            this.data.items.length === 0 && !this.forced\n                ? this.close()\n                : this.show$.next(this.data.items);\n        }\n    }\n\n    /**\n     * show overflow content\n     */\n    public open() {\n        if (!this.rendered && (this.forced || this.data.items.length)) {\n            this.rendered = true;\n            this.show$.next(this.data.items);\n        }\n    }\n\n    /**\n     * close overflow content\n     */\n    public close() {\n        if (this.rendered) {\n            this.rendered = false;\n            this.hide$.next(this.data.items);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OverflowModel.html":{"url":"classes/OverflowModel.html","title":"class - OverflowModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OverflowModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-responsivemenu/model/overflow.model.ts\n        \n\n            \n                Description\n            \n            \n                holds informations which are used from overflow control\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isOverflow\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    items\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isOverflow\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isOverflow()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-responsivemenu/model/overflow.model.ts:30\n                \n            \n\n\n            \n                \n                    returns true if overflow is not empty\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        items\n                    \n                \n\n                \n                    \n                        getitems()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/model/overflow.model.ts:23\n                                \n                            \n                    \n                        \n                                get items which should rendered to overflow\n\n\n                                \n                                    Returns :     MenuItemDirective[]\n\n                                \n                        \n                    \n\n                \n                    \n                        setitems(items: [])\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/model/overflow.model.ts:16\n                                \n                            \n                    \n                        \n                                set items which should rendered to overflow\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            items\n                                                    \n                                                            \n                                                                        []\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import { MenuItemDirective } from \"../directives/menu-item.directive\";\n\n/**\n * holds informations which are used from overflow control\n */\nexport class OverflowModel {\n\n    /**\n     * hold all overflow items\n     */\n    private overflowItems: MenuItemDirective[] = [];\n\n    /**\n     * set items which should rendered to overflow\n     */\n    public set items(items: MenuItemDirective[]) {\n        this.overflowItems = items;\n    }\n\n    /**\n     * get items which should rendered to overflow\n     */\n    public get items(): MenuItemDirective[] {\n        return this.overflowItems;\n    }\n\n    /**\n     * returns true if overflow is not empty\n     */\n    public isOverflow() {\n        return this.items.length > 0;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ResponsiveMenuComponent.html":{"url":"components/ResponsiveMenuComponent.html","title":"component - ResponsiveMenuComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ResponsiveMenuComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    lib/ngx-responsivemenu/components/responsive-menu.component.ts\n\n\n    \n        Description\n    \n    \n        Responsive menu component, all items which are passed should be from type\nResponsiveMenuItem or ResponsiveMenuToggle. All other items will never rendered\ninto dom\n\n    \n\n\n    \n        Implements\n    \n    \n                    AfterViewInit\n                    AfterContentInit\n                    OnDestroy\n    \n\n    \n        Example\n    \n    \n                \n                    \nBtn\n\n                \n    \n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ngx-responsivemenu\n            \n\n            \n                styleUrls\n                ./responsive-menu.component.scss\n            \n\n\n\n            \n                templateUrl\n                responsive-menu.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                menuItems\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                update\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                alignToggle\n                            \n                            \n                                classBtnPane\n                            \n                            \n                                classOverflow\n                            \n                            \n                                customOverflow\n                            \n                            \n                                forceOverflow\n                            \n                            \n                                showMax\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                rendered\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    forceOverflow\n                                \n                                \n                                    classOverflow\n                                \n                                \n                                    defaultToggleBtn\n                                \n                                \n                                    customToggleButton\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(overflowCtrl: OverflowControl, renderer: Renderer2, hostEl: ElementRef, changeDetector: ChangeDetectorRef)\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-responsivemenu/components/responsive-menu.component.ts:225\n                            \n                        \n\n                \n                    \n                            Creates an instance of ResponsiveMenuComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        overflowCtrl\n                                                  \n                                                        \n                                                                        OverflowControl\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                        Renderer2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hostEl\n                                                  \n                                                        \n                                                                        ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        changeDetector\n                                                  \n                                                        \n                                                                        ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        alignToggle\n                    \n                \n                \n                    \n                        Type :         BtnAlign\n\n                    \n                \n                \n                    \n                        Default value : BtnAlign.RIGHT\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/components/responsive-menu.component.ts:149\n                            \n                        \n                \n                    \n                        set position of toggle btn, possible values are left or right\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        classBtnPane\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/components/responsive-menu.component.ts:128\n                            \n                        \n                \n                    \n                        add a class for the button pane as example for bootstrap btn-group\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        classOverflow\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/components/responsive-menu.component.ts:141\n                            \n                        \n                \n                    \n                        add class to overflow container, only for default overflow if option customOverflow is passed\nthis class will not added to custom overflow, simply use [ngClass]=\"'className'\" if you want to add\na custom class\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        customOverflow\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/components/responsive-menu.component.ts:107\n                            \n                        \n                \n                    \n                        if true content will not rendered longer in default container for overflow\ncontent and should rendered in a custom overflow container.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        forceOverflow\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/components/responsive-menu.component.ts:114\n                            \n                        \n                \n                    \n                        if true toggle button will allways be visible even if content\nfits into button pane\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        showMax\n                    \n                \n                \n                    \n                        Default value : -1\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/components/responsive-menu.component.ts:89\n                            \n                        \n                \n                    \n                        set maximal amount of items which could rendered into button pane\nall other items will automatically add to overflow container\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        rendered\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/components/responsive-menu.component.ts:155\n                            \n                        \n                \n                    \n                        emits if responsive menu has been completed rendering process\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(width?: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-responsivemenu/components/responsive-menu.component.ts:270\n                \n            \n\n\n            \n                \n                    update view, this will remove all\ncontents and rerender buttons\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    width\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            menuItems\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     QueryList\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ContentChildren(MenuItemDirective)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/components/responsive-menu.component.ts:82\n                            \n                        \n\n                \n                    \n                        Get querylist for all content items from type MenuItemDirective.\nWill also subscribe to querylist to get notified something changes so we can\nrerender menu\n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        forceOverflow\n                    \n                \n\n\n                \n                    \n                        setforceOverflow(forced: boolean)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/components/responsive-menu.component.ts:114\n                                \n                            \n                    \n                        \n                                if true toggle button will allways be visible even if content\nfits into button pane\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            forced\n                                                    \n                                                            \n                                                                            boolean\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        classOverflow\n                    \n                \n\n\n                \n                    \n                        setclassOverflow(name: string)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/components/responsive-menu.component.ts:141\n                                \n                            \n                    \n                        \n                                add class to overflow container, only for default overflow if option customOverflow is passed\nthis class will not added to custom overflow, simply use [ngClass]=\"'className'\" if you want to add\na custom class\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            name\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                        Example :\n                                            \n                                                &lt;ngx-responsive-menu [classOverflow]=&quot;&#39;overflow-container&#39;&quot;&gt;\n...\n\n                                            \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        defaultToggleBtn\n                    \n                \n\n\n                \n                    \n                        setdefaultToggleBtn(btn)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/components/responsive-menu.component.ts:163\n                                \n                            \n                    \n                        \n                                static: false wait until change detection loop has been finished in this case\nbutton el will not rendered to dom if a custom button is given but we have to wait\nuntil change detection finished before we get it\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            btn\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        customToggleButton\n                    \n                \n\n\n                \n                    \n                        setcustomToggleButton(btn)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/components/responsive-menu.component.ts:173\n                                \n                            \n                    \n                        \n                                check if custom button is defined so we dont need to render default more button\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            btn\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import {\n    AfterContentInit,\n    AfterViewInit,\n    Component,\n    ContentChildren,\n    ElementRef,\n    Input,\n    OnDestroy,\n    QueryList,\n    Renderer2,\n    ViewChild,\n    ContentChild,\n    ChangeDetectorRef,\n    Output,\n    EventEmitter,\n} from \"@angular/core\";\n\nimport { MenuItemDirective } from \"../directives/menu-item.directive\";\nimport { takeUntil } from \"rxjs/operators\";\nimport { Subject } from \"rxjs\";\nimport { OverflowControl } from \"../provider/overflow.control\";\nimport { MenuToggleDirective } from \"../directives/menu-toggle.directive\";\n\n/**\n * possible toggle button alignments\n */\nexport enum BtnAlign {\n    LEFT = \"left\",\n    RIGHT = \"right\"\n}\n\n/**\n * @ignore\n */\ninterface CssClasses {\n    [key: string]: boolean;\n}\n\n/**\n * Responsive menu component, all items which are passed should be from type\n * ResponsiveMenuItem or ResponsiveMenuToggle. All other items will never rendered\n * into dom\n *\n * @example\n * \n *     Btn\n * \n */\n@Component({\n    selector: \"ngx-responsivemenu\",\n    templateUrl: \"responsive-menu.component.html\",\n    styleUrls: [\"./responsive-menu.component.scss\"]\n})\nexport class ResponsiveMenuComponent implements AfterViewInit, AfterContentInit, OnDestroy {\n\n    /**\n     * if true default toggle button will not rendered anymore, will be set if a custom item\n     * has been added to content from type MenuToggleDirective\n     *\n     * @ignore\n     * @example\n     * \n     *     ...\n     *     Button\n     * \n     */\n    public isCustomButton = false;\n\n    /**\n     * overflow css classes\n     *\n     * @ignore\n     */\n    public overflowClasses: CssClasses = { overflow: true };\n\n    /**\n     * Get querylist for all content items from type MenuItemDirective.\n     * Will also subscribe to querylist to get notified something changes so we can\n     * rerender menu\n     */\n    @ContentChildren(MenuItemDirective)\n    public menuItems: QueryList;\n\n    /**\n     * set maximal amount of items which could rendered into button pane\n     * all other items will automatically add to overflow container\n     */\n    @Input()\n    public showMax = -1;\n\n    /**\n     * if true content will not rendered longer in default container for overflow\n     * content and should rendered in a custom overflow container.\n     *\n     * @example\n     *\n     * \n     *   {{label}}\n     * \n     *\n     * \n     *    \n     *    \n     * \n     */\n    @Input()\n    public customOverflow = false;\n\n    /**\n     * if true toggle button will allways be visible even if content\n     * fits into button pane\n     */\n    @Input()\n    public set forceOverflow(forced: boolean) {\n        this.isForcedOverflow = forced;\n        this.overflowCtrl.forceOverflow = forced;\n    }\n\n    /**\n     * add a class for the button pane as example for bootstrap btn-group\n     *\n     * @example\n     * \n     *   {{label}}\n     * \n     */\n    @Input()\n    public classBtnPane: string;\n\n    /**\n     * add class to overflow container, only for default overflow if option customOverflow is passed\n     * this class will not added to custom overflow, simply use [ngClass]=\"'className'\" if you want to add\n     * a custom class\n     *\n     * @example\n     * \n     *    ...\n     * \n     */\n    @Input()\n    public set classOverflow(name: string) {\n        this.overflowClasses[name] = true;\n    }\n\n    /**\n     * set position of toggle btn, possible values are left or right\n     */\n    @Input()\n    public alignToggle: BtnAlign = BtnAlign.RIGHT;\n\n    /**\n     * emits if responsive menu has been completed rendering process\n     */\n    @Output()\n    rendered: EventEmitter = new EventEmitter();\n\n    /**\n     * static: false wait until change detection loop has been finished in this case\n     * button el will not rendered to dom if a custom button is given but we have to wait\n     * until change detection finished before we get it\n     */\n    @ViewChild(MenuToggleDirective, {read: MenuToggleDirective, static: false})\n    protected set defaultToggleBtn( btn: MenuToggleDirective ) {\n        if ( !this.toggleBtn ) {\n            this.toggleBtn = btn;\n        }\n    }\n\n    /**\n     * check if custom button is defined so we dont need to render default more button\n     */\n    @ContentChild(MenuToggleDirective, {read: MenuToggleDirective, static: true})\n    protected set customToggleButton( btn: MenuToggleDirective ) {\n        this.isCustomButton = Boolean( btn );\n        if (btn) {\n            this.toggleBtn = btn;\n        }\n    }\n\n    /**\n     * button pane where items will be rendered if they fits into\n     */\n    @ViewChild( \"buttonPane\", { read: ElementRef, static: true } )\n    private buttonPane: ElementRef;\n\n    /**\n     * temporary button pane where buttons will be rendered on render process\n     * to avoid visualization errors\n     */\n    @ViewChild( \"tmpButtonPane\", { read: ElementRef, static: true } )\n    private tmpButtonPane: ElementRef;\n\n    /**\n     * if true toggle button will allways included to button pane and be visible\n     */\n    private isForcedOverflow = false;\n\n    /**\n     * emits true if component gets destroyed\n     */\n    private isDestroyed$: Subject = new Subject();\n\n    /**\n     * toggle button to show / close overflow\n     */\n    private toggleBtn: MenuToggleDirective;\n\n    /**\n     * possible overflow items, which fits into button bar but not with more button\n     * but since the next button could be the last button and be smaller then overflow button\n     * which could results into that all buttons fits into the bar we only have to mark this button\n     * for an overflow button\n     */\n    private possibleOverflowItems: MenuItemDirective[] = [];\n\n    /**\n     * all overflow items which exists\n     */\n    private overflowItems: MenuItemDirective[] = [];\n\n    /** max width of button bar */\n    private maxWidth: number;\n\n    /** reserved width which we will need to show more button */\n    private reservedWidth: number;\n\n    /**\n     * Creates an instance of ResponsiveMenuComponent.\n     */\n    public constructor(\n        private overflowCtrl: OverflowControl,\n        private renderer: Renderer2,\n        private hostEl: ElementRef,\n        private changeDetector: ChangeDetectorRef\n    ) {\n    }\n\n    /**\n     * component gets destroyed\n     */\n    public ngOnDestroy() {\n        this.isDestroyed$.next( true );\n    }\n\n    /**\n     * after content has initialized register to QueryList\n     * to get notified about changes\n     */\n    public ngAfterContentInit() {\n        this.menuItems.changes\n            .pipe(takeUntil(this.isDestroyed$))\n            .subscribe(() => this.update());\n    }\n\n    /**\n     * after view has been initialized and custom button exists\n     * append custom toggle button to button pane\n     */\n    public ngAfterViewInit() {\n        if (this.isCustomButton) {\n            this.renderer.appendChild( this.buttonPane.nativeElement, this.toggleBtn.nativeElement );\n        }\n        this.render();\n    }\n\n    /**\n     * update view, this will remove all\n     * contents and rerender buttons\n     */\n    public update(width?: number) {\n        this.render(width);\n        this.overflowCtrl.update();\n    }\n\n    /**\n     * remove old items from view so we ensure we have a clean tree\n     */\n    private clearView() {\n        this.menuItems.forEach((menuItem: MenuItemDirective) => {\n            menuItem.remove();\n        });\n        this.changeDetector.detectChanges();\n    }\n\n    /**\n     * render buttons to button menubar, if they not fits anymore or\n     * max show count is reached put them directly to the overflow container\n     */\n    private render(width?: number) {\n        this.initRenderProcess();\n        this.maxWidth = width || this.calcHostWidth();\n\n        const items = this.prepareMenuItems();\n        let isOverflow = false;\n\n        for ( let index = 0, count = 0, ln = items.length; index  -1 && count >= this.showMax;\n\n            if ( !isOverflow ) {\n                item.addTo(this.tmpButtonPane.nativeElement);\n                if (this.validateSize(item)) {\n                    continue;\n                }\n                isOverflow = true;\n            }\n            this.overflowItems.push(item);\n        }\n        this.finalizeRenderProcess();\n    }\n\n    /**\n     * initialize render process\n     * clean up all views, get dimensions from elements\n     */\n    private initRenderProcess() {\n        this.clearView();\n\n        this.overflowItems = [];\n        this.possibleOverflowItems = [];\n        this.overflowCtrl.data.items = [];\n\n        this.toggleBtn.display = true;\n        this.reservedWidth = this.toggleBtn.width;\n        this.toggleBtn.display = false;\n    }\n\n    /**\n     * finialize render process, enable more button if an overflow exists\n     */\n    private finalizeRenderProcess() {\n\n        const overflowData = this.finalizeMenuItems();\n        this.overflowCtrl.data.items =  overflowData;\n\n        this.toggleBtn.display = this.isForcedOverflow || overflowData.length > 0;\n\n        this.possibleOverflowItems = [];\n        this.overflowItems = [];\n        this.changeDetector.detectChanges();\n        this.rendered.emit();\n    }\n\n    /**\n     * prepare menu items, filter out items which should be hidden by default\n     * and put them to overflow\n     */\n    private prepareMenuItems(): MenuItemDirective[] {\n        return this.menuItems.reduce((itemCollection, menuItem) => {\n            menuItem.visible\n                ? itemCollection.push(menuItem)\n                : this.overflowItems.push(menuItem);\n\n            return itemCollection;\n        }, []);\n    }\n\n    /**\n     * finalize menu buttons after render process finished\n     * buttons which are in overflow will removed from dom and pushed to overflow array\n     * all others will added to buttonPane\n     */\n    private finalizeMenuItems(): MenuItemDirective[] {\n\n        const items = this.overflowItems.length\n            ? this.possibleOverflowItems.concat(this.overflowItems)\n            : [];\n\n        return this.menuItems.toArray().reduce((overflowItems, item) => {\n            // remove all items so they are not rendered anymore\n            item.remove();\n            if (!items.length || items.indexOf(item) === -1) {\n                this.alignToggle === BtnAlign.LEFT\n                    ? item.addTo(this.buttonPane.nativeElement)\n                    : item.addTo(this.buttonPane.nativeElement, this.toggleBtn.nativeElement);\n                return overflowItems;\n            }\n\n            /** push item to overflow */\n            overflowItems.push(item);\n            return overflowItems;\n        }, []);\n    }\n\n    /**\n     * validate rendered item fits into button container\n     */\n    private validateSize( item: MenuItemDirective ): boolean {\n        const usedSize = parseInt(this.tmpButtonPane.nativeElement.offsetWidth, 10);\n\n        /** item fits together with more button */\n        if (usedSize + this.reservedWidth \n    \n\n    \n        \n\n    \n    \n    \n        ...\n    \n\n\n\n\n    \n\n    \n                \n                    ./responsive-menu.component.scss\n                \n                :host {\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n\n    .buttonWrapper {\n        display: flex;\n        flex-direction: row;\n        justify-content: flex-end;\n    }\n\n    .buttonPane {\n        display: inline-flex;\n        flex-direction: row;\n        flex-wrap: nowrap;\n        flex-shrink: 0;\n    }\n\n    ::ng-deep {\n        .responsive-menu--item {\n            flex-shrink: 0 !important;\n        }\n    }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                    ...    '\n    var COMPONENTS = [{'name': 'ResponsiveMenuComponent', 'selector': 'ngx-responsivemenu'}];\n    var DIRECTIVES = [{'name': 'MenuItemDirective', 'selector': '[ngxResponsiveMenuItem]'},{'name': 'MenuToggleDirective', 'selector': '[ngxResponsiveMenuToggle]'},{'name': 'OverflowContentDirective', 'selector': 'ngx-responsivemenu-overflow'}];\n    var ACTUAL_COMPONENT = {'name': 'ResponsiveMenuComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ResponsiveMenuModule.html":{"url":"modules/ResponsiveMenuModule.html","title":"module - ResponsiveMenuModule","body":"\n                   \n\n\n\n\n    Modules\n    ResponsiveMenuModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ResponsiveMenuModule\n\n\n\ncluster_ResponsiveMenuModule_declarations\n\n\n\ncluster_ResponsiveMenuModule_exports\n\n\n\ncluster_ResponsiveMenuModule_providers\n\n\n\n\nMenuItemDirective\n\nMenuItemDirective\n\n\n\nResponsiveMenuModule\n\nResponsiveMenuModule\n\nResponsiveMenuModule -->\n\nMenuItemDirective->ResponsiveMenuModule\n\n\n\n\n\nMenuToggleDirective\n\nMenuToggleDirective\n\nResponsiveMenuModule -->\n\nMenuToggleDirective->ResponsiveMenuModule\n\n\n\n\n\nOverflowContentDirective\n\nOverflowContentDirective\n\nResponsiveMenuModule -->\n\nOverflowContentDirective->ResponsiveMenuModule\n\n\n\n\n\nResponsiveMenuComponent\n\nResponsiveMenuComponent\n\nResponsiveMenuModule -->\n\nResponsiveMenuComponent->ResponsiveMenuModule\n\n\n\n\n\nMenuItemDirective \n\nMenuItemDirective \n\nMenuItemDirective  -->\n\nResponsiveMenuModule->MenuItemDirective \n\n\n\n\n\nMenuToggleDirective \n\nMenuToggleDirective \n\nMenuToggleDirective  -->\n\nResponsiveMenuModule->MenuToggleDirective \n\n\n\n\n\nOverflowContentDirective \n\nOverflowContentDirective \n\nOverflowContentDirective  -->\n\nResponsiveMenuModule->OverflowContentDirective \n\n\n\n\n\nResponsiveMenuComponent \n\nResponsiveMenuComponent \n\nResponsiveMenuComponent  -->\n\nResponsiveMenuModule->ResponsiveMenuComponent \n\n\n\n\n\nOverflowControl\n\nOverflowControl\n\nResponsiveMenuModule -->\n\nOverflowControl->ResponsiveMenuModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            lib/ngx-responsivemenu/ngx-responsivemenu.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            MenuItemDirective\n                        \n                        \n                            MenuToggleDirective\n                        \n                        \n                            OverflowContentDirective\n                        \n                        \n                            ResponsiveMenuComponent\n                        \n                    \n                \n                \n                    Providers\n                    \n                        \n                            OverflowControl\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MenuItemDirective\n                        \n                        \n                            MenuToggleDirective\n                        \n                        \n                            OverflowContentDirective\n                        \n                        \n                            ResponsiveMenuComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from \"@angular/core\";\nimport { MenuItemDirective } from \"./directives/menu-item.directive\";\nimport { ResponsiveMenuComponent } from \"./components/responsive-menu.component\";\nimport { CommonModule } from \"@angular/common\";\nimport { OverflowContentDirective } from \"./directives/overflow.directive\";\nimport { OverflowControl } from \"./provider/overflow.control\";\nimport { MenuToggleDirective } from \"./directives/menu-toggle.directive\";\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    exports: [\n        MenuItemDirective,\n        MenuToggleDirective,\n        OverflowContentDirective,\n        ResponsiveMenuComponent,\n    ],\n    providers: [ OverflowControl ],\n    declarations: [\n        MenuItemDirective,\n        MenuToggleDirective,\n        OverflowContentDirective,\n        ResponsiveMenuComponent,\n    ]\n})\nexport class ResponsiveMenuModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                lib/ngx-responsivemenu/components/responsive-menu.component.ts\n            \n            component\n            ResponsiveMenuComponent\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                lib/ngx-responsivemenu/directives/menu-item.directive.ts\n            \n            directive\n            MenuItemDirective\n            \n                66 %\n                (4/6)\n            \n        \n        \n            \n                \n                lib/ngx-responsivemenu/directives/menu-toggle.directive.ts\n            \n            directive\n            MenuToggleDirective\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/ngx-responsivemenu/directives/overflow.directive.ts\n            \n            directive\n            OverflowContentDirective\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                lib/ngx-responsivemenu/model/overflow.model.ts\n            \n            class\n            OverflowModel\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                lib/ngx-responsivemenu/provider/async-event.ts\n            \n            class\n            AsyncEvent\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                lib/ngx-responsivemenu/provider/overflow.control.ts\n            \n            injectable\n            OverflowControl\n            \n                83 %\n                (5/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^8.0.0\n        \n            @angular/cdk : ^8.0.0\n        \n            @angular/common : ^8.0.0\n        \n            @angular/compiler : ^8.0.0\n        \n            @angular/core : ^8.0.0\n        \n            @angular/forms : ^8.0.0\n        \n            @angular/material : ^8.0.0\n        \n            @angular/platform-browser : ^8.0.0\n        \n            @angular/platform-browser-dynamic : ^8.0.0\n        \n            @angular/router : ^8.0.0\n        \n            @compodoc/compodoc : ^1.1.9\n        \n            angular-resizable-element : ^3.2.4\n        \n            bluebird : 3.5.5\n        \n            core-js : ^3.1.3\n        \n            font-awesome : ^4.7.0\n        \n            generate-changelog : ^1.7.1\n        \n            highlight.js : ^9.15.8\n        \n            ngx-highlightjs : ^3.0.3\n        \n            ngx-markdown : ^8.0.2\n        \n            rxjs : ~6.5.2\n        \n            tslib : ^1.9.0\n        \n            zone.js : ~0.9.1\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BtnAlign   (lib/.../responsive-menu.component.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/ngx-responsivemenu/components/responsive-menu.component.ts\n    \n        \n            \n                \n                    \n                        \n                        BtnAlign\n                    \n                \n                    \n                        \n                            possible toggle button alignments\n\n                        \n                    \n                        \n                            \n                                 LEFT\n                            \n                        \n                        \n                            \n                                Value : left\n                            \n                        \n                        \n                            \n                                 RIGHT\n                            \n                        \n                        \n                            \n                                Value : right\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ResponsiveMenuModule\n\n\n\ncluster_ResponsiveMenuModule_declarations\n\n\n\ncluster_ResponsiveMenuModule_exports\n\n\n\ncluster_ResponsiveMenuModule_providers\n\n\n\n\nMenuItemDirective\n\nMenuItemDirective\n\n\n\nResponsiveMenuModule\n\nResponsiveMenuModule\n\nResponsiveMenuModule -->\n\nMenuItemDirective->ResponsiveMenuModule\n\n\n\n\n\nMenuToggleDirective\n\nMenuToggleDirective\n\nResponsiveMenuModule -->\n\nMenuToggleDirective->ResponsiveMenuModule\n\n\n\n\n\nOverflowContentDirective\n\nOverflowContentDirective\n\nResponsiveMenuModule -->\n\nOverflowContentDirective->ResponsiveMenuModule\n\n\n\n\n\nResponsiveMenuComponent\n\nResponsiveMenuComponent\n\nResponsiveMenuModule -->\n\nResponsiveMenuComponent->ResponsiveMenuModule\n\n\n\n\n\nMenuItemDirective \n\nMenuItemDirective \n\nMenuItemDirective  -->\n\nResponsiveMenuModule->MenuItemDirective \n\n\n\n\n\nMenuToggleDirective \n\nMenuToggleDirective \n\nMenuToggleDirective  -->\n\nResponsiveMenuModule->MenuToggleDirective \n\n\n\n\n\nOverflowContentDirective \n\nOverflowContentDirective \n\nOverflowContentDirective  -->\n\nResponsiveMenuModule->OverflowContentDirective \n\n\n\n\n\nResponsiveMenuComponent \n\nResponsiveMenuComponent \n\nResponsiveMenuComponent  -->\n\nResponsiveMenuModule->ResponsiveMenuComponent \n\n\n\n\n\nOverflowControl\n\nOverflowControl\n\nResponsiveMenuModule -->\n\nOverflowControl->ResponsiveMenuModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Component\n                \n            \n        \n        \n            \n                \n                    \n                    3 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    1 Injectable\n                \n            \n        \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ResponsiveMenuModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
