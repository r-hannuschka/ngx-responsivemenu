var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/classes/AsyncEvent.html",[0,0.203,1,1.169]],["body/classes/AsyncEvent.html",[0,0.217,1,2.221,2,1.252,3,0.55,4,0.55,5,0.428,6,0.528,7,3.161,8,1.9,9,0.688,10,1.373,11,3.282,12,2.037,13,3.251,14,2.531,15,1.668,16,3.282,17,0.079,18,4.215,19,2.746,20,0.428,21,1.373,22,1.276,23,3.935,24,1.373,25,2.291,26,1.268,27,1.1,28,2.464,29,2.464,30,3.935,31,3.035,32,1.352,33,3.935,34,3.282,35,3.035,36,3.935,37,3.035,38,3.282,39,3.282,40,3.282,41,3.282,42,1.408,43,1.127,44,2.464,45,2.464,46,2.464,47,3.935,48,2.531,49,2.531,50,3.282,51,0.55,52,1.544,53,0.846,54,0.55,55,0.917,56,2.464,57,0.846,58,2.464,59,0.846,60,2.464,61,2.464,62,3.282,63,2.464,64,2.464,65,2.464,66,0.04,67,0.053,68,0.04]],["title/directives/MenuItemDirective.html",[69,0.514,70,0.399]],["body/directives/MenuItemDirective.html",[0,0.196,3,0.497,4,0.497,5,0.386,6,0.527,9,0.622,15,2.011,17,0.079,20,0.386,21,1.281,22,1.193,26,1.052,27,1.106,32,1.405,42,1.052,43,1.052,51,0.497,54,0.497,55,0.856,59,0.764,66,0.036,67,0.05,68,0.036,69,0.684,70,0.71,71,0.931,72,2.539,73,1.716,74,2.363,75,3.539,76,1.901,77,2.129,78,1.557,79,1.918,80,2.078,81,1.901,82,2.363,83,2.363,84,1.901,85,1.131,86,1.281,87,3.063,88,3.503,89,2.078,90,2.363,91,2.702,92,2.363,93,3.503,94,1.716,95,2.078,96,1.78,97,1.918,98,3.063,99,1.052,100,1.052,101,0.856,102,1.052,103,1.557,104,2.011,105,1.78,106,1.296,107,2.225,108,1.281,109,2.342,110,1.557,111,1.052,112,2.225,113,3.232,114,2.225,115,1.557,116,4.269,117,1.557,118,1.901,119,2.129,120,3.063,121,3.774,122,2.363,123,2.225,124,3.063,125,1.901,126,2.363,127,2.363,128,0.622,129,1.716,130,2.225,131,2.911,132,2.225,133,3.063,134,2.225,135,2.225]],["title/directives/MenuToggleDirective.html",[69,0.514,136,0.79]],["body/directives/MenuToggleDirective.html",[0,0.297,3,0.463,4,0.463,5,0.36,6,0.515,9,0.58,10,0.868,17,0.079,19,1.811,20,0.36,22,1.118,24,1.22,26,1.002,27,1.078,32,1.002,42,1.159,43,0.713,49,2.25,51,0.818,52,1.412,53,0.713,54,0.463,55,1.078,57,0.713,59,1.258,66,0.034,67,0.048,68,0.034,69,0.652,71,0.868,72,2.483,74,2.25,80,2.259,85,1.054,86,1.22,89,1.054,92,2.25,95,1.86,96,1.715,97,1.86,99,1.002,100,1.002,101,0.815,102,1.002,103,1.715,104,1.054,105,1.054,106,1.325,108,0.868,111,1.002,113,2.25,115,1.483,117,1.483,118,1.288,119,1.86,126,1.6,128,0.58,129,1.6,131,2.25,136,1.258,137,1.6,138,2.272,139,1.811,140,3.661,141,1.483,142,2.918,143,1.483,144,2.094,145,1.715,146,2.25,147,2.918,148,2.918,149,2.089,150,3.375,151,3.17,152,1.6,153,0.818,154,2.918,155,2.25,156,2.25,157,1.811,158,1.811,159,2.824,160,2.824,161,2.075,162,1.715,163,2.075,164,2.918,165,2.918,166,2.918,167,2.25,168,2.075,169,2.075,170,2.918,171,2.075,172,2.075,173,2.918,174,2.918,175,2.25,176,2.075,177,1.054,178,1.288,179,1.288,180,0.713,181,1.6,182,1.6,183,2.075,184,2.603,185,1.288,186,2.075,187,1.6,188,2.075,189,1.6,190,1.6,191,2.918,192,1.6,193,2.075,194,2.075,195,1.6,196,1.288,197,2.075,198,1.288,199,1.6,200,1.6,201,2.075,202,2.075,203,2.075,204,2.918,205,2.918,206,1.288,207,2.25,208,2.918,209,1.288,210,1.288,211,1.6,212,2.075,213,2.075,214,1.6,215,2.075,216,2.075]],["title/directives/OverflowContentDirective.html",[69,0.514,217,0.79]],["body/directives/OverflowContentDirective.html",[0,0.158,1,2.002,3,0.402,4,0.402,5,0.312,6,0.52,9,0.503,10,1.435,12,2.752,13,2.032,14,2.645,15,1.743,17,0.079,19,1.934,20,0.312,22,1.171,25,2.665,26,0.905,27,1.101,32,0.905,35,2.032,37,2.645,51,0.852,52,1.303,53,0.618,54,0.402,55,1.101,57,1.388,66,0.029,67,0.043,68,0.029,69,0.696,70,0.541,71,0.753,77,0.914,78,2.204,84,1.635,85,0.914,86,1.102,89,1.338,94,1.388,95,1.855,96,1.583,97,1.743,99,0.618,100,0.618,101,1.101,102,0.618,103,1.743,106,0.905,110,1.338,111,1.502,115,0.914,118,1.117,119,1.338,122,1.388,125,1.117,128,0.503,141,0.914,143,1.338,145,1.583,149,1.338,153,0.766,157,2.265,158,1.635,177,0.914,178,1.117,179,1.117,185,1.117,187,1.388,189,2.032,190,1.388,195,1.388,196,1.635,198,1.117,199,1.388,200,1.388,214,1.388,217,0.905,218,1.388,219,3.116,220,1.583,221,1.934,222,3.116,223,1.635,224,1.635,225,2.032,226,2.032,227,3.43,228,3.43,229,3.814,230,3.814,231,3.116,232,1.799,233,1.799,234,2.507,235,3.179,236,4.04,237,2.129,238,1.799,239,3.43,240,1.799,241,3.43,242,1.799,243,1.799,244,2.634,245,1.635,246,2.634,247,1.799,248,2.941,249,1.388,250,1.799,251,0.753,252,1.799,253,1.799,254,1.799,255,1.799,256,1.799,257,1.799,258,1.799,259,2.634,260,1.799,261,1.799,262,1.799,263,1.388,264,0.914,265,2.634,266,1.799,267,1.388,268,1.799,269,1.799,270,1.388,271,1.799,272,2.634,273,2.032,274,2.634,275,1.799,276,1.799,277,1.799,278,1.799,279,2.634,280,1.799,281,2.634,282,1.799,283,2.634,284,1.799,285,1.799,286,1.799,287,1.799]],["title/injectables/OverflowControl.html",[153,0.514,288,1.169]],["body/injectables/OverflowControl.html",[0,0.31,3,0.368,4,0.368,5,0.286,6,0.528,9,0.46,10,1.031,17,0.079,20,0.286,21,1.031,22,1.237,24,1.031,26,1.015,27,1.125,32,0.847,42,1.478,43,1.128,51,0.733,52,1.471,53,0.565,54,0.786,55,0.983,57,1.015,59,1.128,66,0.027,67,0.04,68,0.027,70,0.286,76,1.53,77,1.253,78,1.668,79,1.668,86,1.373,99,0.565,100,0.565,101,0.46,102,0.565,104,1.253,106,1.268,108,1.601,109,2.038,110,1.502,111,1.592,128,0.46,139,1.53,141,2.045,143,1.668,144,2.038,145,1.668,149,1.253,153,0.916,162,1.876,180,1.352,210,1.53,211,2.847,220,1.876,221,2.038,224,1.53,234,1.53,237,1.021,245,1.835,251,0.688,264,0.836,267,2.847,288,1.253,289,1.645,290,1.269,291,1.901,292,3.162,293,1.901,294,2.465,295,3.283,296,2.465,297,2.532,298,2.465,299,2.465,300,2.465,301,2.465,302,1.901,303,1.901,304,2.465,305,1.901,306,2.465,307,2.465,308,3.283,309,2.465,310,2.532,311,2.465,312,2.532,313,2.465,314,3.283,315,2.465,316,2.532,317,2.465,318,2.465,319,2.465,320,2.465,321,3.283,322,2.847,323,1.901,324,3.691,325,1.645,326,1.645,327,1.645,328,2.465,329,1.645,330,1.645,331,2.465,332,2.465,333,2.712,334,1.269,335,1.645,336,2.465,337,2.465,338,2.465,339,1.645,340,1.645,341,3.283,342,2.532,343,2.465,344,3.516,345,1.645,346,1.645,347,1.645,348,1.645,349,2.956,350,1.876,351,1.645,352,0.836,353,2.956,354,2.465,355,1.645,356,1.269,357,2.956,358,1.645,359,1.645,360,2.465,361,3.691,362,2.465,363,1.645,364,2.465,365,1.645]],["title/classes/OverflowModel.html",[0,0.203,350,1.169]],["body/classes/OverflowModel.html",[0,0.254,2,1.465,3,0.644,4,0.644,5,0.5,6,0.538,9,0.805,17,0.079,20,0.5,21,1.52,22,1.203,24,1.52,27,1.112,42,1.479,43,0.99,48,2.802,51,0.644,54,0.644,55,0.805,59,1.248,66,0.047,67,0.059,68,0.047,70,0.748,79,2.123,99,0.99,100,0.99,101,0.805,102,0.99,106,1.248,108,1.664,111,1.565,162,1.465,220,2.333,251,1.206,264,1.465,291,2.802,350,1.846,352,1.465,366,2.223,367,3.633,368,3.633,369,3.222,370,2.882,371,3.633,372,2.882,373,2.882,374,2.882,375,2.882,376,2.882,377,2.223,378,2.882,379,2.802,380,2.882]],["title/components/ResponsiveMenuComponent.html",[180,0.79,381,0.962]],["body/components/ResponsiveMenuComponent.html",[0,0.314,2,0.449,3,0.197,4,0.197,5,0.153,6,0.485,9,0.247,10,0.816,12,1.425,15,0.761,17,0.079,20,0.339,21,0.627,22,1.107,24,0.627,25,0.93,26,0.515,27,1.069,31,0.682,32,1.12,42,0.883,43,0.883,51,0.624,52,0.816,53,0.304,54,0.335,55,1.118,57,0.515,59,0.883,66,0.014,67,0.024,68,0.024,69,0.197,70,0.586,71,0.37,75,2.295,76,2.156,77,1.715,78,1.849,79,1.992,80,2.252,81,1.425,84,0.93,85,0.449,86,1.168,89,1.167,90,1.156,91,1.771,95,1.59,96,0.991,97,1.167,99,0.959,100,1.159,101,1.053,102,0.959,103,0.761,104,1.809,105,0.991,106,1.314,108,1.364,109,2.024,110,1.167,111,1.459,115,1.715,117,0.761,119,1.167,125,0.549,127,2.295,128,0.247,136,1.075,138,2.095,139,0.93,141,0.991,143,0.761,144,1.21,145,0.991,146,2.907,149,0.991,151,1.771,152,0.682,153,0.513,155,1.156,156,1.156,157,0.93,158,0.549,159,0.682,160,2.153,162,1.512,167,0.682,175,2.153,177,0.449,178,0.549,179,0.549,180,1.022,181,1.156,182,1.156,184,1.504,185,0.549,192,0.682,196,1.21,198,0.549,206,1.425,207,0.682,209,1.425,210,1.21,217,0.304,220,2.014,221,1.21,223,1.425,224,1.425,225,1.156,226,1.156,234,2.156,235,2.295,237,0.549,245,1.21,248,1.156,249,0.682,251,0.37,263,1.156,264,1.306,270,0.682,273,1.771,292,0.682,293,1.504,297,1.156,302,1.156,303,1.156,305,1.156,310,1.156,312,1.156,316,1.504,322,1.771,323,1.771,333,1.504,334,0.682,342,1.504,352,0.761,356,0.682,369,1.504,377,1.504,379,1.156,381,1.168,382,0.884,383,0.884,384,2.792,385,2.339,386,0.549,387,2.57,388,1.498,389,1.498,390,1.498,391,3.707,392,1.95,393,1.498,394,1.95,395,1.95,396,1.95,397,2.296,398,2.792,399,1.95,400,1.95,401,1.95,402,1.95,403,1.95,404,2.296,405,0.884,406,1.504,407,1.498,408,0.884,409,1.498,410,1.771,411,1.498,412,2.976,413,0.884,414,3.474,415,0.93,416,1.498,417,1.498,418,1.95,419,2.57,420,1.95,421,1.95,422,0.884,423,1.498,424,1.498,425,3.261,426,0.884,427,1.498,428,1.498,429,0.884,430,2.792,431,1.498,432,0.884,433,1.498,434,2.296,435,2.976,436,0.884,437,3.13,438,0.884,439,1.498,440,0.884,441,1.498,442,1.95,443,0.884,444,0.884,445,0.884,446,0.884,447,0.884,448,0.884,449,2.792,450,2.296,451,2.296,452,2.296,453,2.296,454,1.498,455,2.57,456,1.498,457,0.884,458,0.884,459,1.498,460,1.95,461,0.884,462,1.95,463,0.884,464,0.682,465,0.682,466,0.884,467,0.884,468,1.498,469,0.884,470,1.95,471,0.884,472,0.884,473,1.498,474,1.498,475,0.884,476,0.884,477,0.884,478,0.884,479,2.296,480,1.498,481,1.95,482,0.884,483,1.498,484,2.296,485,0.884,486,0.884,487,0.884,488,0.884,489,1.498,490,0.884,491,0.884,492,0.884,493,1.95,494,0.884,495,0.884,496,0.884,497,0.884,498,0.884,499,1.498,500,0.884,501,0.884,502,0.884,503,0.884,504,1.498,505,0.884,506,0.884,507,0.884,508,0.884,509,0.884,510,0.884,511,0.884,512,1.498,513,0.884,514,0.884,515,0.884,516,0.884,517,0.884,518,1.498,519,0.884,520,0.884,521,0.884,522,1.498,523,0.884,524,1.95,525,0.884,526,1.498,527,0.884,528,0.884,529,0.884,530,0.884,531,0.884,532,0.884,533,0.884,534,0.884,535,0.884,536,0.884,537,0.884,538,0.884,539,0.884,540,0.884,541,0.884,542,0.884,543,0.884,544,0.884,545,0.884,546,1.498,547,1.498,548,1.95,549,1.498,550,0.884,551,0.884,552,0.884,553,0.884,554,1.498,555,0.884,556,0.884,557,0.884,558,0.884,559,0.549,560,0.884,561,0.884,562,0.884,563,0.884,564,0.884,565,0.884,566,0.884,567,0.884,568,0.884,569,0.884,570,0.884,571,0.884,572,0.884,573,0.884,574,0.884,575,0.884,576,0.884,577,0.884,578,1.498,579,0.884,580,0.884,581,0.884,582,0.884,583,1.498,584,0.884,585,0.884,586,3.375,587,1.95,588,0.884,589,1.498,590,0.884,591,0.884,592,1.498,593,0.884,594,0.884,595,0.884,596,0.884,597,1.498,598,0.884,599,0.884,600,0.884,601,0.549,602,1.498,603,2.296,604,0.884,605,0.884,606,0.884,607,0.884]],["title/modules/ResponsiveMenuModule.html",[608,1.428,609,1.169]],["body/modules/ResponsiveMenuModule.html",[0,0.246,3,0.623,4,0.623,5,0.484,6,0.359,17,0.078,51,0.99,54,0.623,66,0.045,67,0.058,68,0.045,70,0.802,128,0.78,136,1.587,153,0.974,177,1.418,217,1.587,251,1.167,352,1.809,381,1.933,415,1.732,464,2.152,559,1.732,601,1.732,608,1.732,609,2.396,610,1.732,611,1.418,612,3.023,613,3.023,614,3.023,615,2.152,616,2.152,617,2.152,618,2.152,619,2.745,620,2.152,621,2.79,622,2.79,623,3.559,624,2.79,625,2.79,626,3.559,627,2.152,628,2.79,629,2.79]],["title/coverage.html",[630,2.417]],["body/coverage.html",[0,0.347,1,1.674,5,0.572,6,0.591,7,2.542,8,2.542,17,0.076,57,1.132,66,0.054,67,0.064,68,0.054,69,0.943,70,0.572,72,2.448,73,2.542,101,0.921,136,1.132,137,2.542,153,0.736,180,1.132,217,1.132,218,2.542,288,1.674,290,2.542,350,1.674,366,2.542,381,1.378,385,2.045,386,2.045,630,2.542,631,3.295,632,3.295,633,3.295,634,4.223,635,3.295,636,3.295,637,3.295,638,3.295,639,3.945,640,3.295,641,3.295,642,3.295,643,3.295,644,3.295,645,3.295,646,3.295]],["title/dependencies.html",[611,1.405,647,1.924]],["body/dependencies.html",[17,0.078,53,1.101,66,0.052,67,0.063,68,0.052,117,1.628,128,0.895,223,2.408,611,1.628,627,2.472,648,3.205,649,4.665,650,3.205,651,3.205,652,3.205,653,3.205,654,3.879,655,2.992,656,3.205,657,3.205,658,3.205,659,3.205,660,3.205,661,3.205,662,3.205,663,3.205,664,3.205,665,3.205,666,3.205,667,3.205,668,3.205,669,3.205,670,3.205,671,3.205,672,3.205,673,3.205,674,3.205,675,3.205,676,3.205,677,3.205,678,3.205,679,3.205,680,3.205,681,3.205,682,3.205,683,3.205,684,3.205]],["title/miscellaneous/enumerations.html",[685,1.484,686,2.133]],["body/miscellaneous/enumerations.html",[6,0.459,17,0.073,20,0.619,66,0.058,67,0.067,68,0.058,80,1.811,105,2.099,138,2.212,206,2.564,209,2.564,385,2.212,386,2.564,406,3.187,410,2.749,465,2.749,685,2.749,686,2.749,687,3.564]],["title/index.html",[20,0.399,688,1.775]],["body/index.html",[2,1.614,17,0.076,66,0.052,67,0.063,68,0.052,70,0.791,71,1.328,81,2.579,82,2.449,83,2.449,136,1.566,153,0.928,180,1.091,217,1.566,288,1.614,381,1.906,415,1.971,559,1.971,601,1.971,608,2.394,609,2.414,611,1.614,612,2.449,613,2.449,614,2.449,615,2.449,616,2.449,617,2.449,618,2.449,619,2.976,620,2.449,688,2.449]],["title/modules.html",[610,1.945]],["body/modules.html",[17,0.069,66,0.06,67,0.069,68,0.06,609,1.872,610,2.287,655,2.842,689,3.684,690,3.684,691,3.684]]],"invertedIndex":[["",{"_index":17,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{}}}],["0",{"_index":264,"title":{},"body":{"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["0.9.1",{"_index":684,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":81,"title":{},"body":{"directives/MenuItemDirective.html":{},"components/ResponsiveMenuComponent.html":{},"index.html":{}}}],["1.1.9",{"_index":659,"title":{},"body":{"dependencies.html":{}}}],["1.7.1",{"_index":673,"title":{},"body":{"dependencies.html":{}}}],["1.9.0",{"_index":682,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":207,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["100",{"_index":634,"title":{},"body":{"coverage.html":{}}}],["11/11",{"_index":635,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":82,"title":{},"body":{"directives/MenuItemDirective.html":{},"index.html":{}}}],["2/2",{"_index":641,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":83,"title":{},"body":{"directives/MenuItemDirective.html":{},"index.html":{}}}],["3.0.3",{"_index":677,"title":{},"body":{"dependencies.html":{}}}],["3.1.3",{"_index":667,"title":{},"body":{"dependencies.html":{}}}],["3.2.4",{"_index":662,"title":{},"body":{"dependencies.html":{}}}],["3.5.5",{"_index":664,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":638,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":642,"title":{},"body":{"coverage.html":{}}}],["4.7.0",{"_index":670,"title":{},"body":{"dependencies.html":{}}}],["4/6",{"_index":637,"title":{},"body":{"coverage.html":{}}}],["5/6",{"_index":644,"title":{},"body":{"coverage.html":{}}}],["6.5.2",{"_index":680,"title":{},"body":{"dependencies.html":{}}}],["6/8",{"_index":640,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":636,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":639,"title":{},"body":{"coverage.html":{}}}],["8.0.0",{"_index":649,"title":{},"body":{"dependencies.html":{}}}],["8.0.2",{"_index":679,"title":{},"body":{"dependencies.html":{}}}],["83",{"_index":643,"title":{},"body":{"coverage.html":{}}}],["9.15.8",{"_index":675,"title":{},"body":{"dependencies.html":{}}}],["accessors",{"_index":24,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuToggleDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["actual_component",{"_index":607,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["add",{"_index":115,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["added",{"_index":419,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["addto",{"_index":88,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["addto(parent",{"_index":112,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["affect",{"_index":306,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["aftercontentinit",{"_index":316,"title":{},"body":{"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["afterremove",{"_index":227,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["afterrender",{"_index":228,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["afterviewinit",{"_index":144,"title":{},"body":{"directives/MenuToggleDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["alignments",{"_index":465,"title":{},"body":{"components/ResponsiveMenuComponent.html":{},"miscellaneous/enumerations.html":{}}}],["aligntoggle",{"_index":395,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["allways",{"_index":110,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["amount",{"_index":428,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["angular",{"_index":660,"title":{},"body":{"dependencies.html":{}}}],["angular/animations",{"_index":648,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":650,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":627,"title":{},"body":{"modules/ResponsiveMenuModule.html":{},"dependencies.html":{}}}],["angular/compiler",{"_index":651,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":128,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":652,"title":{},"body":{"dependencies.html":{}}}],["angular/material",{"_index":653,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":654,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":657,"title":{},"body":{"dependencies.html":{}}}],["anymore",{"_index":470,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["app",{"_index":308,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["append",{"_index":509,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["applied",{"_index":239,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["array",{"_index":569,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["async",{"_index":13,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/OverflowContentDirective.html":{}}}],["asyncevent",{"_index":1,"title":{"classes/AsyncEvent.html":{}},"body":{"classes/AsyncEvent.html":{},"directives/OverflowContentDirective.html":{},"coverage.html":{}}}],["automatically",{"_index":139,"title":{},"body":{"directives/MenuToggleDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["avoid",{"_index":486,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["await",{"_index":35,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/OverflowContentDirective.html":{}}}],["awesome",{"_index":669,"title":{},"body":{"dependencies.html":{}}}],["bar",{"_index":493,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["before",{"_index":15,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["beforeremove",{"_index":229,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["beforerender",{"_index":230,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["bluebird",{"_index":663,"title":{},"body":{"dependencies.html":{}}}],["boolean",{"_index":162,"title":{},"body":{"directives/MenuToggleDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["bootstrap",{"_index":415,"title":{},"body":{"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"index.html":{}}}],["both",{"_index":304,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["browse",{"_index":691,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":655,"title":{},"body":{"dependencies.html":{},"modules.html":{}}}],["btn",{"_index":391,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["btnalign",{"_index":406,"title":{},"body":{"components/ResponsiveMenuComponent.html":{},"miscellaneous/enumerations.html":{}}}],["btnalign.left",{"_index":577,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["btnalign.right",{"_index":407,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["button",{"_index":80,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{},"miscellaneous/enumerations.html":{}}}],["buttonpane",{"_index":484,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["buttons",{"_index":435,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["buttonwrapper",{"_index":591,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["called",{"_index":30,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["calls",{"_index":274,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["cancel",{"_index":18,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["canceled",{"_index":246,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["case",{"_index":303,"title":{},"body":{"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["catch",{"_index":38,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["center",{"_index":590,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["change",{"_index":452,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["changedetector",{"_index":403,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["changedetectorref",{"_index":404,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["changelog",{"_index":672,"title":{},"body":{"dependencies.html":{}}}],["changes",{"_index":442,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["check",{"_index":459,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["children",{"_index":124,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["class",{"_index":0,"title":{"classes/AsyncEvent.html":{},"classes/OverflowModel.html":{}},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"coverage.html":{}}}],["class.responsive",{"_index":93,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["class.toggle",{"_index":148,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["classbtnpane",{"_index":396,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AsyncEvent.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"index.html":{}}}],["classname",{"_index":129,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{}}}],["classoverflow",{"_index":397,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["classoverflow(name",{"_index":476,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["classoverflow]=&quot;&#39;overflow",{"_index":445,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["clean",{"_index":518,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["clearview",{"_index":519,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["click",{"_index":140,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["close",{"_index":292,"title":{},"body":{"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["cluster_responsivemenumodule",{"_index":615,"title":{},"body":{"modules/ResponsiveMenuModule.html":{},"index.html":{}}}],["cluster_responsivemenumodule_declarations",{"_index":616,"title":{},"body":{"modules/ResponsiveMenuModule.html":{},"index.html":{}}}],["cluster_responsivemenumodule_exports",{"_index":617,"title":{},"body":{"modules/ResponsiveMenuModule.html":{},"index.html":{}}}],["cluster_responsivemenumodule_providers",{"_index":618,"title":{},"body":{"modules/ResponsiveMenuModule.html":{},"index.html":{}}}],["column",{"_index":588,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["commonmodule",{"_index":626,"title":{},"body":{"modules/ResponsiveMenuModule.html":{}}}],["complete",{"_index":64,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["completed",{"_index":25,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["compodoc/compodoc",{"_index":658,"title":{},"body":{"dependencies.html":{}}}],["component",{"_index":180,"title":{"components/ResponsiveMenuComponent.html":{}},"body":{"directives/MenuToggleDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{},"coverage.html":{},"index.html":{}}}],["component_template",{"_index":604,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["components",{"_index":297,"title":{},"body":{"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["components/responsive",{"_index":624,"title":{},"body":{"modules/ResponsiveMenuModule.html":{}}}],["conainer",{"_index":337,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["const",{"_index":119,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["constructor",{"_index":26,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["constructor(el",{"_index":94,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/OverflowContentDirective.html":{}}}],["constructor(overflowctrl",{"_index":152,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["container",{"_index":234,"title":{},"body":{"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["container&#39;&quot;&gt",{"_index":446,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["content",{"_index":78,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["contentchild",{"_index":463,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["contentchild(menutoggledirective",{"_index":482,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["contentchildren",{"_index":461,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["contentchildren(menuitemdirective",{"_index":439,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["contents",{"_index":433,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["continue",{"_index":31,"title":{},"body":{"classes/AsyncEvent.html":{},"components/ResponsiveMenuComponent.html":{}}}],["control",{"_index":291,"title":{},"body":{"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{}}}],["core",{"_index":665,"title":{},"body":{"dependencies.html":{}}}],["count",{"_index":524,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["coverage",{"_index":630,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["creates",{"_index":155,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["css",{"_index":159,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["cssclasses",{"_index":468,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["current",{"_index":49,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuToggleDirective.html":{}}}],["custom",{"_index":146,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["customoverflow",{"_index":398,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["customtogglebutton",{"_index":401,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["data",{"_index":324,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["declarations",{"_index":612,"title":{},"body":{"modules/ResponsiveMenuModule.html":{},"index.html":{}}}],["decorators",{"_index":438,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["deep",{"_index":599,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["default",{"_index":104,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["defaulttogglebtn",{"_index":400,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["defined",{"_index":27,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["dependcy",{"_index":300,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["dependencies",{"_index":611,"title":{"dependencies.html":{}},"body":{"modules/ResponsiveMenuModule.html":{},"dependencies.html":{},"index.html":{}}}],["description",{"_index":9,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["destroyed",{"_index":182,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["detection",{"_index":453,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["dimensions",{"_index":542,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["direction",{"_index":587,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["directive",{"_index":69,"title":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{}},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{},"coverage.html":{}}}],["directives",{"_index":71,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{},"index.html":{}}}],["directives/menu",{"_index":352,"title":{},"body":{"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{}}}],["directives/overflow.directive",{"_index":628,"title":{},"body":{"modules/ResponsiveMenuModule.html":{}}}],["directly",{"_index":527,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["display",{"_index":149,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["display(display",{"_index":188,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["documentation",{"_index":631,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":384,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["done",{"_index":23,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["dont",{"_index":305,"title":{},"body":{"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["dynamic",{"_index":656,"title":{},"body":{"dependencies.html":{}}}],["each",{"_index":307,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["el",{"_index":103,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["element",{"_index":117,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{},"dependencies.html":{}}}],["elementref",{"_index":95,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["elements",{"_index":543,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["emits",{"_index":10,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["empty",{"_index":371,"title":{},"body":{"classes/OverflowModel.html":{}}}],["enable",{"_index":552,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["end",{"_index":593,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["ensure",{"_index":517,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["enum",{"_index":466,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["enumerations",{"_index":686,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":40,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["errors",{"_index":488,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["even",{"_index":245,"title":{},"body":{"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["event",{"_index":19,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{}}}],["event.cancel",{"_index":41,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["event.completed",{"_index":279,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["event.done",{"_index":37,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/OverflowContentDirective.html":{}}}],["event.ts",{"_index":8,"title":{},"body":{"classes/AsyncEvent.html":{},"coverage.html":{}}}],["event.ts:11",{"_index":28,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["event.ts:21",{"_index":46,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["event.ts:35",{"_index":44,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["event.ts:54",{"_index":29,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["eventemitter",{"_index":12,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["example",{"_index":32,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["exists",{"_index":221,"title":{},"body":{"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["exits",{"_index":338,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["export",{"_index":54,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{}}}],["exportas",{"_index":253,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["exports",{"_index":614,"title":{},"body":{"modules/ResponsiveMenuModule.html":{},"index.html":{}}}],["false",{"_index":109,"title":{},"body":{"directives/MenuItemDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["fatalerror",{"_index":39,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"coverage.html":{}}}],["filter",{"_index":249,"title":{},"body":{"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["filter((items",{"_index":262,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["finalize",{"_index":567,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["finalizemenuitems",{"_index":571,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["finalizerender",{"_index":231,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["finalizerenderprocess",{"_index":553,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["finialize",{"_index":551,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["finished",{"_index":455,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["fits",{"_index":425,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["flex",{"_index":586,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["font",{"_index":668,"title":{},"body":{"dependencies.html":{}}}],["force",{"_index":336,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["forced",{"_index":333,"title":{},"body":{"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["forceoverflow",{"_index":323,"title":{},"body":{"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["forceoverflow(forced",{"_index":356,"title":{},"body":{"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["fromevent",{"_index":176,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["fromevent(this.el.nativeelement",{"_index":193,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["generate",{"_index":671,"title":{},"body":{"dependencies.html":{}}}],["getcompleted",{"_index":45,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["getcomputedstyle",{"_index":203,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["getdata",{"_index":347,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["gethide",{"_index":345,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["getitems",{"_index":372,"title":{},"body":{"classes/OverflowModel.html":{}}}],["getnativeelement",{"_index":168,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["gets",{"_index":181,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["getshow",{"_index":339,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["getwidth",{"_index":171,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["given",{"_index":456,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["group",{"_index":416,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["here",{"_index":280,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["hidden",{"_index":167,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["hide",{"_index":267,"title":{},"body":{"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{}}}],["highlight.js",{"_index":674,"title":{},"body":{"dependencies.html":{}}}],["highlightjs",{"_index":676,"title":{},"body":{"dependencies.html":{}}}],["hold",{"_index":376,"title":{},"body":{"classes/OverflowModel.html":{}}}],["holds",{"_index":48,"title":{},"body":{"classes/AsyncEvent.html":{},"classes/OverflowModel.html":{}}}],["hook",{"_index":236,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["hooks",{"_index":275,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["host",{"_index":158,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["hostbinding",{"_index":126,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{}}}],["hostbinding(\"class.toggle",{"_index":186,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["hostbindings",{"_index":92,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{}}}],["hostel",{"_index":402,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["html",{"_index":602,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["htmlelement",{"_index":113,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{}}}],["identifier",{"_index":632,"title":{},"body":{"coverage.html":{}}}],["ignore",{"_index":184,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["implements",{"_index":143,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["import",{"_index":51,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{}}}],["important",{"_index":600,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["imports",{"_index":629,"title":{},"body":{"modules/ResponsiveMenuModule.html":{}}}],["included",{"_index":490,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["includes",{"_index":173,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["index",{"_index":20,"title":{"index.html":{}},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"miscellaneous/enumerations.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{}}}],["informations",{"_index":367,"title":{},"body":{"classes/OverflowModel.html":{}}}],["inheritdoc",{"_index":191,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["initialize",{"_index":539,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["initialized",{"_index":504,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["initrenderprocess",{"_index":544,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["injectable",{"_index":288,"title":{"injectables/OverflowControl.html":{}},"body":{"injectables/OverflowControl.html":{},"coverage.html":{},"index.html":{}}}],["injectables",{"_index":289,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["injection",{"_index":301,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["inline",{"_index":594,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["input",{"_index":127,"title":{},"body":{"directives/MenuItemDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["inputs",{"_index":90,"title":{},"body":{"directives/MenuItemDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["instance",{"_index":156,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["interface",{"_index":467,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["internal",{"_index":58,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["iscustombutton",{"_index":471,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["isdestroyed",{"_index":185,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["isforcedoverflow",{"_index":491,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["isopen",{"_index":321,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["isoverflow",{"_index":369,"title":{},"body":{"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["item",{"_index":75,"title":{},"body":{"directives/MenuItemDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["item.addto(this.buttonpane.nativeelement",{"_index":578,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["item.addto(this.el.nativeelement",{"_index":122,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/OverflowContentDirective.html":{}}}],["item.addto(this.tmpbuttonpane.nativeelement",{"_index":535,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["item.directive",{"_index":251,"title":{},"body":{"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{}}}],["item.directive.ts",{"_index":73,"title":{},"body":{"directives/MenuItemDirective.html":{},"coverage.html":{}}}],["item.directive.ts:26",{"_index":107,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["item.directive.ts:29",{"_index":98,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["item.directive.ts:45",{"_index":114,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["item.directive.ts:61",{"_index":123,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["item.remove",{"_index":125,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["itemcollection",{"_index":566,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["itemcollection.push(menuitem",{"_index":564,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["items",{"_index":220,"title":{},"body":{"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["items(items",{"_index":378,"title":{},"body":{"classes/OverflowModel.html":{}}}],["items.indexof(item",{"_index":575,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["items.length",{"_index":263,"title":{},"body":{"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["js",{"_index":666,"title":{},"body":{"dependencies.html":{}}}],["justify",{"_index":589,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["key",{"_index":469,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["label",{"_index":473,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["last",{"_index":495,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["left",{"_index":206,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{},"miscellaneous/enumerations.html":{}}}],["legend",{"_index":601,"title":{},"body":{"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"index.html":{}}}],["lib/.../responsive",{"_index":687,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lib/ngx",{"_index":6,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["ln",{"_index":533,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["longer",{"_index":423,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["loop",{"_index":454,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["lt;ngx",{"_index":444,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["margin",{"_index":174,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["marginleft",{"_index":204,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["marginright",{"_index":208,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["mark",{"_index":497,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["markdown",{"_index":678,"title":{},"body":{"dependencies.html":{}}}],["matching",{"_index":67,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{}}}],["max",{"_index":499,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["maximal",{"_index":427,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["maxwidth",{"_index":500,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu",{"_index":77,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["menu.component",{"_index":625,"title":{},"body":{"modules/ResponsiveMenuModule.html":{}}}],["menu.component.html",{"_index":393,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu.component.scss",{"_index":392,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu.component.ts",{"_index":386,"title":{},"body":{"components/ResponsiveMenuComponent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["menu.component.ts:107",{"_index":422,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu.component.ts:114",{"_index":424,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu.component.ts:128",{"_index":413,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu.component.ts:141",{"_index":417,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu.component.ts:149",{"_index":408,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu.component.ts:155",{"_index":429,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu.component.ts:163",{"_index":448,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu.component.ts:173",{"_index":458,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu.component.ts:225",{"_index":405,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu.component.ts:270",{"_index":432,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu.component.ts:82",{"_index":440,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menu.component.ts:89",{"_index":426,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menubar",{"_index":523,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menuitem",{"_index":562,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menuitem.remove",{"_index":521,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menuitem.visible",{"_index":563,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menuitemdirective",{"_index":70,"title":{"directives/MenuItemDirective.html":{}},"body":{"directives/MenuItemDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"coverage.html":{},"index.html":{}}}],["menuitems",{"_index":394,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["menutoggledirective",{"_index":136,"title":{"directives/MenuToggleDirective.html":{}},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"coverage.html":{},"index.html":{}}}],["metadata",{"_index":85,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["methods",{"_index":21,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["miscellaneous",{"_index":685,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["model",{"_index":349,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["model/overflow.model",{"_index":351,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["module",{"_index":608,"title":{"modules/ResponsiveMenuModule.html":{}},"body":{"modules/ResponsiveMenuModule.html":{},"index.html":{}}}],["modules",{"_index":610,"title":{"modules.html":{}},"body":{"modules/ResponsiveMenuModule.html":{},"modules.html":{}}}],["more",{"_index":160,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["multiple",{"_index":296,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["name",{"_index":100,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["native",{"_index":170,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["nativeelement",{"_index":150,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["need",{"_index":460,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["never",{"_index":390,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["new",{"_index":57,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{},"coverage.html":{}}}],["next",{"_index":494,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["ng",{"_index":598,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["ngaftercontentinit",{"_index":506,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["ngafterviewinit",{"_index":192,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["ngclass]=\"'classname",{"_index":421,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["ngmodule",{"_index":623,"title":{},"body":{"modules/ResponsiveMenuModule.html":{}}}],["ngondestroy",{"_index":198,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["ngoninit",{"_index":255,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["ngx",{"_index":223,"title":{},"body":{"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{},"dependencies.html":{}}}],["ngxresponsivemenuitem",{"_index":87,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["ngxresponsivemenuitem]'},{'name",{"_index":605,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["ngxresponsivemenutoggle",{"_index":147,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["ngxresponsivemenutoggle]'},{'name",{"_index":606,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["nodes",{"_index":272,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["nodes.foreach((item",{"_index":281,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["none",{"_index":190,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{}}}],["notfied",{"_index":241,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["notified",{"_index":342,"title":{},"body":{"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["notify",{"_index":353,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["nowrap",{"_index":596,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["null",{"_index":118,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{}}}],["number",{"_index":175,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["oberservable",{"_index":341,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["oberservers",{"_index":355,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["observable",{"_index":344,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["observeable",{"_index":259,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["observers",{"_index":354,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["old",{"_index":516,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["onasynchook(event",{"_index":33,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["ondestroy",{"_index":145,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["oninit",{"_index":222,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["open",{"_index":211,"title":{},"body":{"directives/MenuToggleDirective.html":{},"injectables/OverflowControl.html":{}}}],["openoverflow",{"_index":213,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["operations",{"_index":14,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/OverflowContentDirective.html":{}}}],["option",{"_index":418,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["optional",{"_index":102,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["others",{"_index":570,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["out",{"_index":559,"title":{},"body":{"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"index.html":{}}}],["output",{"_index":248,"title":{},"body":{"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["outputs",{"_index":226,"title":{},"body":{"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["overflow",{"_index":111,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["overflowclasses",{"_index":472,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["overflowcontent",{"_index":254,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["overflowcontentdirective",{"_index":217,"title":{"directives/OverflowContentDirective.html":{}},"body":{"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"coverage.html":{},"index.html":{}}}],["overflowcontrol",{"_index":153,"title":{"injectables/OverflowControl.html":{}},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"coverage.html":{},"index.html":{}}}],["overflowctrl",{"_index":157,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["overflowdata",{"_index":554,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["overflowdata.length",{"_index":556,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["overflowitems",{"_index":377,"title":{},"body":{"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["overflowitems.push(item",{"_index":580,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["overflowmodel",{"_index":350,"title":{"classes/OverflowModel.html":{}},"body":{"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"coverage.html":{}}}],["overlay",{"_index":212,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["overview",{"_index":688,"title":{"index.html":{}},"body":{"index.html":{}}}],["package",{"_index":647,"title":{"dependencies.html":{}},"body":{}}],["pane",{"_index":414,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["parameters",{"_index":99,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["parent",{"_index":116,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["parseint(style.getpropertyvalue(\"margin",{"_index":205,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["parseint(this.tmpbuttonpane.nativeelement.offsetwidth",{"_index":584,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["pass",{"_index":16,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["passed",{"_index":387,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["pipe",{"_index":194,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["pipe(takeuntil(this.isdestroyed",{"_index":270,"title":{},"body":{"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["position",{"_index":409,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["possible",{"_index":410,"title":{},"body":{"components/ResponsiveMenuComponent.html":{},"miscellaneous/enumerations.html":{}}}],["possibleoverflowitems",{"_index":498,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["prepare",{"_index":558,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["preparemenuitems",{"_index":560,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["private",{"_index":55,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["process",{"_index":430,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["promise",{"_index":47,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["properties",{"_index":225,"title":{},"body":{"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["property",{"_index":165,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["protected",{"_index":480,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["provide",{"_index":299,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["provider/async",{"_index":252,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["provider/overflow.control",{"_index":177,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{}}}],["providers",{"_index":613,"title":{},"body":{"modules/ResponsiveMenuModule.html":{},"index.html":{}}}],["public",{"_index":22,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["push",{"_index":579,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["pushed",{"_index":568,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["put",{"_index":526,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["querylist",{"_index":437,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["reached",{"_index":525,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["read",{"_index":479,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["register",{"_index":505,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["registerhideevent",{"_index":268,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["registers",{"_index":74,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{}}}],["registershowevent",{"_index":260,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["remove",{"_index":89,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["removecontent(nodes",{"_index":284,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["removed",{"_index":237,"title":{},"body":{"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["render",{"_index":235,"title":{},"body":{"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["render(width",{"_index":528,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["rendercontent(nodes",{"_index":276,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["rendered",{"_index":79,"title":{},"body":{"directives/MenuItemDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["renderer",{"_index":96,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["renderer2",{"_index":97,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["rendering",{"_index":84,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["renders",{"_index":219,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["required",{"_index":142,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["rerender",{"_index":434,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["reserved",{"_index":501,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["reservedwidth",{"_index":502,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["reset",{"_index":620,"title":{},"body":{"modules/ResponsiveMenuModule.html":{},"index.html":{}}}],["resizable",{"_index":661,"title":{},"body":{"dependencies.html":{}}}],["responsive",{"_index":76,"title":{},"body":{"directives/MenuItemDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["responsivemenu",{"_index":224,"title":{},"body":{"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["responsivemenu.module.ts",{"_index":622,"title":{},"body":{"modules/ResponsiveMenuModule.html":{}}}],["responsivemenu/components/responsive",{"_index":385,"title":{},"body":{"components/ResponsiveMenuComponent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["responsivemenu/directives/menu",{"_index":72,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"coverage.html":{}}}],["responsivemenu/directives/overflow.directive.ts",{"_index":218,"title":{},"body":{"directives/OverflowContentDirective.html":{},"coverage.html":{}}}],["responsivemenu/directives/overflow.directive.ts:36",{"_index":243,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["responsivemenu/directives/overflow.directive.ts:44",{"_index":242,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["responsivemenu/directives/overflow.directive.ts:50",{"_index":238,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["responsivemenu/directives/overflow.directive.ts:58",{"_index":240,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["responsivemenu/directives/overflow.directive.ts:64",{"_index":233,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["responsivemenu/directives/overflow.directive.ts:66",{"_index":232,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["responsivemenu/directives/overflow.directive.ts:69",{"_index":247,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["responsivemenu/model/overflow.model.ts",{"_index":366,"title":{},"body":{"classes/OverflowModel.html":{},"coverage.html":{}}}],["responsivemenu/model/overflow.model.ts:16",{"_index":375,"title":{},"body":{"classes/OverflowModel.html":{}}}],["responsivemenu/model/overflow.model.ts:23",{"_index":373,"title":{},"body":{"classes/OverflowModel.html":{}}}],["responsivemenu/model/overflow.model.ts:30",{"_index":370,"title":{},"body":{"classes/OverflowModel.html":{}}}],["responsivemenu/ngx",{"_index":621,"title":{},"body":{"modules/ResponsiveMenuModule.html":{}}}],["responsivemenu/provider/async",{"_index":7,"title":{},"body":{"classes/AsyncEvent.html":{},"coverage.html":{}}}],["responsivemenu/provider/overflow.control.ts",{"_index":290,"title":{},"body":{"injectables/OverflowControl.html":{},"coverage.html":{}}}],["responsivemenu/provider/overflow.control.ts:100",{"_index":327,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["responsivemenu/provider/overflow.control.ts:108",{"_index":330,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["responsivemenu/provider/overflow.control.ts:119",{"_index":329,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["responsivemenu/provider/overflow.control.ts:129",{"_index":326,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["responsivemenu/provider/overflow.control.ts:68",{"_index":335,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["responsivemenu/provider/overflow.control.ts:75",{"_index":340,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["responsivemenu/provider/overflow.control.ts:82",{"_index":346,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["responsivemenu/provider/overflow.control.ts:84",{"_index":325,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["responsivemenu/provider/overflow.control.ts:93",{"_index":348,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["responsivemenucomponent",{"_index":381,"title":{"components/ResponsiveMenuComponent.html":{}},"body":{"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"coverage.html":{},"index.html":{}}}],["responsivemenuitem",{"_index":388,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["responsivemenumodule",{"_index":609,"title":{"modules/ResponsiveMenuModule.html":{}},"body":{"modules/ResponsiveMenuModule.html":{},"index.html":{},"modules.html":{}}}],["responsivemenutoggle",{"_index":389,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["result",{"_index":66,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{}}}],["results",{"_index":68,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{}}}],["return",{"_index":59,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["returns",{"_index":42,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["retursn",{"_index":328,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["right",{"_index":209,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{},"miscellaneous/enumerations.html":{}}}],["root",{"_index":133,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["row",{"_index":592,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["rxjs",{"_index":53,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":179,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["selector",{"_index":86,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["service",{"_index":295,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["set",{"_index":108,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["setclassoverflow(name",{"_index":443,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["setcustomtogglebutton(btn",{"_index":457,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["setdefaulttogglebtn(btn",{"_index":447,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["setdisplay(display",{"_index":161,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["setforceoverflow(forced",{"_index":334,"title":{},"body":{"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["setitems(items",{"_index":374,"title":{},"body":{"classes/OverflowModel.html":{}}}],["shared",{"_index":294,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["show",{"_index":141,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["showmax",{"_index":399,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["shown",{"_index":343,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["shrink",{"_index":597,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["simply",{"_index":420,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["smaller",{"_index":496,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["soft",{"_index":164,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["something",{"_index":441,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{}}}],["state",{"_index":50,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["statements",{"_index":633,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":449,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["string",{"_index":412,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["style",{"_index":202,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["styles",{"_index":383,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["styleurls",{"_index":312,"title":{},"body":{"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["sub1",{"_index":309,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["sub2",{"_index":317,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["sub_1.component.html",{"_index":311,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["sub_1.component.scss",{"_index":313,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["sub_2.component.html",{"_index":318,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["sub_2.component.scss",{"_index":319,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["subcomponent1",{"_index":315,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["subcomponent2",{"_index":320,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["subject",{"_index":52,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["subscribe",{"_index":196,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["subscribe((items",{"_index":265,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["subscriptions",{"_index":183,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["support",{"_index":689,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":690,"title":{},"body":{"modules.html":{}}}],["table",{"_index":646,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":645,"title":{},"body":{"coverage.html":{}}}],["takeuntil",{"_index":178,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["takeuntil(this.isdestroyed",{"_index":195,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{}}}],["tap",{"_index":250,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["template",{"_index":382,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["templateurl",{"_index":310,"title":{},"body":{"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["temporary",{"_index":485,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.afterremove.emit",{"_index":287,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["this.afterrender.emit",{"_index":282,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["this.aligntoggle",{"_index":576,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.beforeremove.emit(event",{"_index":286,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["this.beforeremove.observers.length",{"_index":285,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["this.beforerender.emit(event",{"_index":278,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["this.beforerender.observers.length",{"_index":277,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["this.buttonpane.nativeelement",{"_index":511,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.calchostwidth",{"_index":531,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.changedetector.detectchanges",{"_index":522,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.clearview",{"_index":545,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.close",{"_index":363,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["this.complete",{"_index":62,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["this.data.items.length",{"_index":362,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["this.doasyncoperation",{"_index":36,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["this.el",{"_index":120,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["this.el.nativeelement",{"_index":131,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{}}}],["this.el.nativeelement.getboundingclientrect().width",{"_index":201,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["this.event",{"_index":56,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["this.event$.complete",{"_index":65,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["this.event$.next(false",{"_index":63,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["this.event$.next(true",{"_index":61,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["this.event$.topromise",{"_index":60,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["this.finalizemenuitems",{"_index":555,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.finalizerender.emit(completed",{"_index":283,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["this.finalizerenderprocess",{"_index":538,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.forced",{"_index":357,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["this.hide$.asobservable",{"_index":359,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["this.hide$.next(this.data.items",{"_index":365,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["this.initrenderprocess",{"_index":529,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.iscustombutton",{"_index":483,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.isdestroyed",{"_index":187,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{}}}],["this.isdestroyed$.next",{"_index":503,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.isdestroyed.complete",{"_index":200,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{}}}],["this.isdestroyed.next(true",{"_index":199,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{}}}],["this.isforcedoverflow",{"_index":474,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.items.length",{"_index":380,"title":{},"body":{"classes/OverflowModel.html":{}}}],["this.maxwidth",{"_index":530,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.menuitem",{"_index":121,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["this.menuitems.changes",{"_index":507,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.menuitems.foreach((menuitem",{"_index":520,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.menuitems.reduce((itemcollection",{"_index":561,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.menuitems.toarray().reduce((overflowitems",{"_index":574,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.openoverflow",{"_index":197,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["this.overflowclasses[name",{"_index":477,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.overflowctrl.close",{"_index":215,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["this.overflowctrl.data.items",{"_index":547,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.overflowctrl.forceoverflow",{"_index":475,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.overflowctrl.hide",{"_index":269,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["this.overflowctrl.isopen",{"_index":214,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{}}}],["this.overflowctrl.open",{"_index":216,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["this.overflowctrl.show.pipe",{"_index":261,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["this.overflowctrl.update",{"_index":515,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.overflowitems",{"_index":379,"title":{},"body":{"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["this.overflowitems.length",{"_index":572,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.overflowitems.push(item",{"_index":537,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.overflowitems.push(menuitem",{"_index":565,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.overflowmodel",{"_index":360,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["this.possibleoverflowitems",{"_index":546,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.possibleoverflowitems.concat(this.overflowitems",{"_index":573,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.preparemenuitems",{"_index":532,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.registerhideevent",{"_index":258,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["this.registershowevent",{"_index":257,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["this.removecontent(items",{"_index":271,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["this.render",{"_index":513,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.render(width",{"_index":514,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.rendercontent(items",{"_index":266,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["this.rendercontent(this.overflowctrl.data.items",{"_index":256,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["this.rendered",{"_index":361,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["this.rendered.emit",{"_index":557,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.renderer.appendchild",{"_index":510,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.renderer.appendchild(parent",{"_index":132,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["this.renderer.insertbefore(parent",{"_index":130,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["this.renderer.parentnode",{"_index":134,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["this.renderer.removechild",{"_index":135,"title":{},"body":{"directives/MenuItemDirective.html":{}}}],["this.renderer.setstyle(this.el.nativeelement",{"_index":189,"title":{},"body":{"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{}}}],["this.reservedwidth",{"_index":549,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.show$.asobservable",{"_index":358,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["this.show$.next(this.data.items",{"_index":364,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["this.showmax",{"_index":534,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.togglebtn",{"_index":481,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.togglebtn.display",{"_index":548,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.togglebtn.nativeelement",{"_index":512,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.togglebtn.width",{"_index":550,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.update",{"_index":508,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["this.validatesize(item",{"_index":536,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["through",{"_index":11,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["tmpbuttonpane",{"_index":489,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["together",{"_index":585,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["toggle",{"_index":138,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{},"miscellaneous/enumerations.html":{}}}],["toggle.directive",{"_index":464,"title":{},"body":{"components/ResponsiveMenuComponent.html":{},"modules/ResponsiveMenuModule.html":{}}}],["toggle.directive.ts",{"_index":137,"title":{},"body":{"directives/MenuToggleDirective.html":{},"coverage.html":{}}}],["toggle.directive.ts:32",{"_index":154,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["toggle.directive.ts:48",{"_index":163,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["toggle.directive.ts:55",{"_index":169,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["toggle.directive.ts:83",{"_index":172,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["togglebtn",{"_index":492,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["tree",{"_index":302,"title":{},"body":{"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["triggers",{"_index":244,"title":{},"body":{"directives/OverflowContentDirective.html":{}}}],["true",{"_index":106,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["try",{"_index":34,"title":{},"body":{"classes/AsyncEvent.html":{}}}],["tslib",{"_index":681,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":101,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"directives/OverflowContentDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{},"coverage.html":{}}}],["u",{"_index":298,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["unless",{"_index":332,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["until",{"_index":451,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["up",{"_index":540,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["update",{"_index":322,"title":{},"body":{"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["update(width",{"_index":431,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["use",{"_index":293,"title":{},"body":{"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["used",{"_index":368,"title":{},"body":{"classes/OverflowModel.html":{}}}],["usedsize",{"_index":583,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["validate",{"_index":581,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["validatesize",{"_index":582,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["value",{"_index":105,"title":{},"body":{"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{},"miscellaneous/enumerations.html":{}}}],["values",{"_index":411,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["var",{"_index":603,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["view",{"_index":273,"title":{},"body":{"directives/OverflowContentDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["viewchild",{"_index":462,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["viewchild(menutoggledirective",{"_index":478,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["viewproviders",{"_index":314,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["views",{"_index":541,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["visibility",{"_index":331,"title":{},"body":{"injectables/OverflowControl.html":{}}}],["visibilty",{"_index":166,"title":{},"body":{"directives/MenuToggleDirective.html":{}}}],["visible",{"_index":91,"title":{},"body":{"directives/MenuItemDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["visualization",{"_index":487,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["void",{"_index":43,"title":{},"body":{"classes/AsyncEvent.html":{},"directives/MenuItemDirective.html":{},"directives/MenuToggleDirective.html":{},"injectables/OverflowControl.html":{},"classes/OverflowModel.html":{},"components/ResponsiveMenuComponent.html":{}}}],["wait",{"_index":450,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["want",{"_index":210,"title":{},"body":{"directives/MenuToggleDirective.html":{},"injectables/OverflowControl.html":{},"components/ResponsiveMenuComponent.html":{}}}],["width",{"_index":151,"title":{},"body":{"directives/MenuToggleDirective.html":{},"components/ResponsiveMenuComponent.html":{}}}],["wrap",{"_index":595,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["yes",{"_index":436,"title":{},"body":{"components/ResponsiveMenuComponent.html":{}}}],["zone.js",{"_index":683,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":619,"title":{},"body":{"modules/ResponsiveMenuModule.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AsyncEvent.html":{"url":"classes/AsyncEvent.html","title":"class - AsyncEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AsyncEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-responsivemenu/provider/async-event.ts\n        \n\n            \n                Description\n            \n            \n                AsyncEvent which will emits through EventEmitter\nso we can do some (async) operations before we\nlet pass / cancel the event.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cancel\n                            \n                            \n                                    Public\n                                done\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    completed\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-responsivemenu/provider/async-event.ts:11\n                            \n                        \n\n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            cancel\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    cancel()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-responsivemenu/provider/async-event.ts:54\n                \n            \n\n\n            \n                \n                    should be called to continue event\n\n\n                    \n                        Example :\n                        \n                            public async onAsyncHook(event: AsyncEvent) {\n     try {\n         await this.doAsyncOperation();\n         event.done();\n     } catch (fatalError: Error) {\n         event.cancel();\n     }\n}\n                        \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            done\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    done()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-responsivemenu/provider/async-event.ts:35\n                \n            \n\n\n            \n                \n                    should be called to continue event\n\n\n                    \n                        Example :\n                        \n                            public async onAsyncHook(event: AsyncEvent) {\n     await this.doAsyncOperation();\n     event.done();\n}\n                        \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        completed\n                    \n                \n\n                \n                    \n                        getcompleted()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/provider/async-event.ts:21\n                                \n                            \n                    \n                        \n                                returns promise which holds current state from event\n\n\n                                \n                                \n                                \n                                    Returns :     Promise\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Subject } from \"rxjs\";\n\n/**\n * AsyncEvent which will emits through EventEmitter\n * so we can do some (async) operations before we\n * let pass / cancel the event.\n *\n */\nexport class AsyncEvent {\n\n    private event$: Subject;\n\n    public constructor() {\n        this.event$ = new Subject();\n    }\n\n    /**\n     * returns promise which holds current state from event\n     * @internal\n     */\n    public get completed(): Promise {\n        return this.event$.toPromise();\n    }\n\n    /**\n     * should be called to continue event\n     *\n     * @example\n     *\n     * public async onAsyncHook(event: AsyncEvent) {\n     *     await this.doAsyncOperation();\n     *     event.done();\n     * }\n     */\n    public done() {\n        this.event$.next(true);\n        this.complete();\n    }\n\n    /**\n     * should be called to continue event\n     *\n     * @example\n     *\n     * public async onAsyncHook(event: AsyncEvent) {\n     *     try {\n     *         await this.doAsyncOperation();\n     *         event.done();\n     *     } catch (fatalError: Error) {\n     *         event.cancel();\n     *     }\n     * }\n     */\n    public cancel() {\n        this.event$.next(false);\n        this.complete();\n    }\n\n    private complete() {\n        this.event$.complete();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/MenuItemDirective.html":{"url":"directives/MenuItemDirective.html","title":"directive - MenuItemDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  MenuItemDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-responsivemenu/directives/menu-item.directive.ts\n        \n\n            \n                Description\n            \n            \n                registers item as responsive menu item, all other content will not rendered\n\n            \n\n\n            \n                Example\n            \n            \n                        \n                            \n     Button 1\n     Button 2\n     Button 3\n     \n     Not rendering\n\n                        \n            \n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxResponsiveMenuItem]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addTo\n                            \n                            \n                                    Public\n                                remove\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                visible\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                class.responsive-menu--item\n                            \n                        \n                    \n                \n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(el: ElementRef, renderer: Renderer2)\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-responsivemenu/directives/menu-item.directive.ts:29\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        el\n                                                  \n                                                        \n                                                                        ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                        Renderer2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        visible\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/directives/menu-item.directive.ts:26\n                            \n                        \n                \n                    \n                        if set to false menu item will allways rendered to overflow\ndefault false\n\n                    \n                \n            \n        \n\n\n            \n    HostBindings        \n            \n                \n                    \n                        \n                        \n                            \n                            class.responsive-menu--item\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/directives/menu-item.directive.ts:29\n                            \n                        \n\n\n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addTo\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addTo(parent: HTMLElement, before: HTMLElement)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-responsivemenu/directives/menu-item.directive.ts:45\n                \n            \n\n\n            \n                \n                    add item to parent element\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    parent\n                                    \n                                            HTMLElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    before\n                                    \n                                            HTMLElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        null\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            const parent: ElementRef = this.el;\nconst item: MenuItemDirective = this.menuItem;\nitem.addTo(this.el.nativeElement);\n                        \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-responsivemenu/directives/menu-item.directive.ts:61\n                \n            \n\n\n            \n                \n                    remove item from parent children\n\n\n                    \n                        Example :\n                        \n                            const item: MenuItemDirective = this.menuItem;\nitem.remove();\n                        \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, ElementRef, HostBinding, Input, Renderer2 } from \"@angular/core\";\n\n/**\n * registers item as responsive menu item, all other content will not rendered\n *\n * @example\n *\n * \n *     Button 1\n *     Button 2\n *     Button 3\n *     \n *     Not rendering\n * \n */\n@Directive( {\n    selector: \"[ngxResponsiveMenuItem]\"\n} )\nexport class MenuItemDirective  {\n\n    /**\n     * if set to false menu item will allways rendered to overflow\n     * default false\n     */\n    @Input()\n    public visible = true;\n\n    @HostBinding( \"class.responsive-menu--item\" )\n    public className = true;\n\n    constructor(\n        private el: ElementRef,\n        private renderer: Renderer2\n    ) { }\n\n    /**\n     * add item to parent element\n     *\n     * @example\n     *\n     * const parent: ElementRef = this.el;\n     * const item: MenuItemDirective = this.menuItem;\n     * item.addTo(this.el.nativeElement);\n     */\n    public addTo( parent: HTMLElement, before: HTMLElement = null ) {\n        if (before) {\n            this.renderer.insertBefore(parent, this.el.nativeElement, before);\n            return;\n        }\n        this.renderer.appendChild(parent, this.el.nativeElement);\n    }\n\n    /**\n     * remove item from parent children\n     *\n     * @example\n     *\n     * const item: MenuItemDirective = this.menuItem;\n     * item.remove();\n     */\n    public remove() {\n        const root: HTMLElement = this.renderer.parentNode( this.el.nativeElement );\n        this.renderer.removeChild( root, this.el.nativeElement );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/MenuToggleDirective.html":{"url":"directives/MenuToggleDirective.html","title":"directive - MenuToggleDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  MenuToggleDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-responsivemenu/directives/menu-toggle.directive.ts\n        \n\n            \n                Description\n            \n            \n                toggle button which automatically registers on click event an show overflow if required\n\n            \n\n            \n                Implements\n            \n            \n                            AfterViewInit\n                            OnDestroy\n            \n\n            \n                Example\n            \n            \n                        \n                            \n     ...\n     Custom Toggle Button\n\n                        \n            \n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxResponsiveMenuToggle]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n\n\n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                class.toggle\n                            \n                        \n                    \n                \n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    display\n                                \n                                \n                                    nativeElement\n                                \n                                \n                                    width\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(overflowCtrl: OverflowControl, renderer: Renderer2, el: ElementRef)\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-responsivemenu/directives/menu-toggle.directive.ts:32\n                            \n                        \n\n                \n                    \n                            Creates an instance of MenuToggleDirective.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        overflowCtrl\n                                                  \n                                                        \n                                                                        OverflowControl\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                        Renderer2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        el\n                                                  \n                                                        \n                                                                        ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n            \n    HostBindings        \n            \n                \n                    \n                        \n                        \n                            \n                            class.toggle\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/directives/menu-toggle.directive.ts:32\n                            \n                        \n\n                \n                    \n                        add host css class more\n\n                    \n                \n\n            \n        \n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        display\n                    \n                \n\n\n                \n                    \n                        setdisplay(display: boolean)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/directives/menu-toggle.directive.ts:48\n                                \n                            \n                    \n                        \n                                display button if soft is true button has css property visibilty: hidden\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            display\n                                                    \n                                                            \n                                                                            boolean\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        nativeElement\n                    \n                \n\n                \n                    \n                        getnativeElement()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/directives/menu-toggle.directive.ts:55\n                                \n                            \n                    \n                        \n                                return native element from more button\n\n\n                                \n                                    Returns :     HTMLElement\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        width\n                    \n                \n\n                \n                    \n                        getwidth()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/directives/menu-toggle.directive.ts:83\n                                \n                            \n                    \n                        \n                                get current width of button includes margin\n\n\n                                \n                                    Returns :         number\n\n                                \n                        \n                    \n\n            \n        \n\n\n    \n\n\n    \n        import { Directive, ElementRef, AfterViewInit, OnDestroy, Renderer2, HostBinding } from \"@angular/core\";\nimport { fromEvent, Subject } from \"rxjs\";\nimport { OverflowControl } from \"../provider/overflow.control\";\nimport { takeUntil } from \"rxjs/operators\";\n\n/**\n * toggle button which automatically registers on click event an show overflow if required\n *\n * @example\n *\n * \n *     ...\n *     Custom Toggle Button\n * \n */\n@Directive({\n    selector: \"[ngxResponsiveMenuToggle]\"\n})\nexport class MenuToggleDirective implements AfterViewInit, OnDestroy {\n\n    /**\n     * emits true if component gets destroyed to remove from subscriptions\n     *\n     * @ignore\n     */\n    private isDestroyed: Subject;\n\n    /**\n     * add host css class more\n     */\n    @HostBinding(\"class.toggle\")\n    public className = true;\n\n    /**\n     * Creates an instance of MenuToggleDirective.\n     */\n    constructor(\n        private overflowCtrl: OverflowControl,\n        private renderer: Renderer2,\n        private el: ElementRef\n    ) {\n        this.isDestroyed = new Subject();\n    }\n\n    /**\n     * display button if soft is true button has css property visibilty: hidden\n     */\n    public set display(display: boolean) {\n        this.renderer.setStyle(this.el.nativeElement, \"display\", display ? null : \"none\");\n    }\n\n    /**\n     * return native element from more button\n     */\n    public get nativeElement(): HTMLElement {\n        return this.el.nativeElement;\n    }\n\n    /**\n     * @inheritdoc\n     * @ignore\n     */\n    public ngAfterViewInit() {\n        fromEvent(this.el.nativeElement, \"click\")\n            .pipe(\n                takeUntil(this.isDestroyed)\n            )\n            .subscribe(() => this.openOverflow());\n    }\n\n    /**\n     * @inheritdoc\n     * @ignore\n     */\n    public ngOnDestroy() {\n        this.isDestroyed.next(true);\n        this.isDestroyed.complete();\n    }\n\n    /**\n     * get current width of button includes margin\n     */\n    public get width(): number {\n        const width = this.el.nativeElement.getBoundingClientRect().width;\n        const style = getComputedStyle( this.el.nativeElement );\n\n        const marginLeft  = parseInt(style.getPropertyValue(\"margin-left\") , 10);\n        const marginRight = parseInt(style.getPropertyValue(\"margin-right\"), 10);\n\n        return width + marginLeft + marginRight;\n    }\n\n    /**\n     * if we click on the button we want to open the overlay\n     */\n    private openOverflow() {\n        this.overflowCtrl.isOpen() ? this.overflowCtrl.close() : this.overflowCtrl.open();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/OverflowContentDirective.html":{"url":"directives/OverflowContentDirective.html","title":"directive - OverflowContentDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  OverflowContentDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-responsivemenu/directives/overflow.directive.ts\n        \n\n            \n                Description\n            \n            \n                renders overflow content if overflow items exists\n\n            \n\n            \n                Implements\n            \n            \n                            OnInit\n                            OnDestroy\n            \n\n            \n                Example\n            \n            \n                        \n                            \n   \n   \n     \n   \n\n\n\n   \n   \n\n                        \n            \n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        ngx-responsivemenu-overflow\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                el\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                afterRemove\n                            \n                            \n                                afterRender\n                            \n                            \n                                beforeRemove\n                            \n                            \n                                beforeRender\n                            \n                            \n                                finalizeRender\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(el: ElementRef, overflowCtrl: OverflowControl, renderer: Renderer2)\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-responsivemenu/directives/overflow.directive.ts:66\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        el\n                                                  \n                                                        \n                                                                        ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        overflowCtrl\n                                                  \n                                                        \n                                                                        OverflowControl\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                        Renderer2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    Outputs\n        \n            \n                \n                    \n                        \n                        afterRemove\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/directives/overflow.directive.ts:64\n                            \n                        \n                \n                    \n                        overflow container render hook after content has been removed.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        afterRender\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/directives/overflow.directive.ts:50\n                            \n                        \n                \n                    \n                        overflow container render hook after content has been applied.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        beforeRemove\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/directives/overflow.directive.ts:58\n                            \n                        \n                \n                    \n                        overflow container render hook before content will be removed.\nEmits AsyncEvent which should notfied with $event.done() after\nall operations are completed\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        beforeRender\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/directives/overflow.directive.ts:44\n                            \n                        \n                \n                    \n                        overflow container render hook before content will be applied.\nEmits AsyncEvent which should notfied with $event.done() after\nall operations are completed\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        finalizeRender\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/directives/overflow.directive.ts:36\n                            \n                        \n                \n                    \n                        triggers allways after rendering has been completed even if\nbeforeRender / beforeRemove canceled\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            el\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ElementRef\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/directives/overflow.directive.ts:69\n                            \n                        \n\n\n            \n        \n\n\n\n    \n\n\n    \n        import { Directive, OnInit, OnDestroy, Output, EventEmitter, Renderer2, ElementRef } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil, filter, tap } from \"rxjs/operators\";\nimport { OverflowControl } from \"../provider/overflow.control\";\nimport { MenuItemDirective } from \"./menu-item.directive\";\nimport { AsyncEvent } from \"../provider/async-event\";\n\n/**\n * renders overflow content if overflow items exists\n *\n * @example\n *\n * \n *   \n *   \n *     \n *   \n * \n *\n * \n *   \n *   \n * \n */\n@Directive( {\n    selector: \"ngx-responsivemenu-overflow\",\n    exportAs: \"overflowContent\"\n})\nexport class OverflowContentDirective implements OnInit, OnDestroy {\n\n    /**\n     * triggers allways after rendering has been completed even if\n     * beforeRender / beforeRemove canceled\n     */\n    @Output()\n    public finalizeRender: EventEmitter = new EventEmitter();\n\n    /**\n     * overflow container render hook before content will be applied.\n     * Emits AsyncEvent which should notfied with $event.done() after\n     * all operations are completed\n     */\n    @Output()\n    public beforeRender: EventEmitter = new EventEmitter();\n\n    /**\n     * overflow container render hook after content has been applied.\n     */\n    @Output()\n    public afterRender: EventEmitter = new EventEmitter();\n\n    /**\n     * overflow container render hook before content will be removed.\n     * Emits AsyncEvent which should notfied with $event.done() after\n     * all operations are completed\n     */\n    @Output()\n    public beforeRemove: EventEmitter = new EventEmitter();\n\n    /**\n     * overflow container render hook after content has been removed.\n     */\n    @Output()\n    public afterRemove: EventEmitter = new EventEmitter();\n\n    private isDestroyed: Subject;\n\n    constructor(\n        public el: ElementRef,\n        private overflowCtrl: OverflowControl,\n        private renderer: Renderer2,\n    ) {\n        this.isDestroyed = new Subject();\n    }\n\n    public ngOnDestroy() {\n        this.isDestroyed.next(true);\n        this.isDestroyed.complete();\n    }\n\n    public ngOnInit() {\n        if (this.overflowCtrl.isOpen()) {\n            this.renderContent(this.overflowCtrl.data.items);\n        }\n\n        this.registerShowEvent();\n        this.registerHideEvent();\n    }\n\n    /**\n     * subscribe to overflowctrl show observeable\n     * only renders content if items exists\n     */\n    private registerShowEvent() {\n        this.overflowCtrl.show.pipe(\n            takeUntil(this.isDestroyed),\n            filter((items) => items.length > 0),\n        ).subscribe((items) => this.renderContent(items));\n    }\n\n    /**\n     * subscribe to overflowctrl hide observeable\n     * remove content from directive\n     */\n    private registerHideEvent() {\n        this.overflowCtrl.hide\n            .pipe(takeUntil(this.isDestroyed))\n            .subscribe((items) => this.removeContent(items));\n    }\n\n    /**\n     * render nodes into host view, calls beforeRender and afterRender hooks\n     */\n    private async renderContent(nodes: MenuItemDirective[]) {\n        let completed = true;\n        if (this.beforeRender.observers.length) {\n            const event = new AsyncEvent();\n            this.beforeRender.emit(event);\n            completed = await event.completed;\n        }\n\n        /** add content here */\n        if (completed) {\n            nodes.forEach((item) => item.addTo(this.el.nativeElement));\n            this.renderer.setStyle(this.el.nativeElement, \"display\", null);\n            this.afterRender.emit();\n        }\n\n        this.finalizeRender.emit(completed);\n    }\n\n    /**\n     * remove nodes from host view, calls beforeRemove, afterRemove\n     */\n    private async removeContent(nodes: MenuItemDirective[]) {\n\n        let completed = true;\n        if (this.beforeRemove.observers.length) {\n            const event = new AsyncEvent();\n            this.beforeRemove.emit(event);\n            completed = await event.completed;\n        }\n\n        if (completed) {\n            nodes.forEach((item) => item.remove());\n            this.renderer.setStyle(this.el.nativeElement, \"display\", \"none\");\n            this.afterRemove.emit();\n        }\n\n        this.finalizeRender.emit(completed);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OverflowControl.html":{"url":"injectables/OverflowControl.html","title":"injectable - OverflowControl","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  OverflowControl\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-responsivemenu/provider/overflow.control.ts\n        \n\n            \n                Description\n            \n            \n                overflow control to open / close overflow.\nEvery ResponsiveMenu will use this shared service. If you want display multiple\nresponsive menu components u should provide an own OverflowControl service in dependcy injection tree.\nIn this case both components got his own OverflowControl and dont affect each other.\n\n            \n\n\n            \n                Example\n            \n            \n                        \n                            Component({\n     selector: \"app-sub1-component\",\n     templateUrl: \"sub_1.component.html\",\n     styleUrls: [\"./sub_1.component.scss\"],\n     viewProviders: [OverflowControl]\n})\nexport class SubComponent1 implements AfterViewInit, AfterContentInit, OnDestroy {\n     ...\n}\n\nComponent({\n     selector: \"app-sub2-component\",\n     templateUrl: \"sub_2.component.html\",\n     styleUrls: [\"./sub_2.component.scss\"],\n     viewProviders: [OverflowControl]\n})\nexport class SubComponent2 implements AfterViewInit, AfterContentInit, OnDestroy {\n     ...\n}\n                        \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                close\n                            \n                            \n                                    Public\n                                isOpen\n                            \n                            \n                                    Public\n                                open\n                            \n                            \n                                    Public\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    forceOverflow\n                                \n                                \n                                    show\n                                \n                                \n                                    hide\n                                \n                                \n                                    data\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-responsivemenu/provider/overflow.control.ts:84\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            close\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    close()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-responsivemenu/provider/overflow.control.ts:129\n                \n            \n\n\n            \n                \n                    close overflow content\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isOpen\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isOpen()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-responsivemenu/provider/overflow.control.ts:100\n                \n            \n\n\n            \n                \n                    retursn true if overflow container is rendered\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            open\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    open()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-responsivemenu/provider/overflow.control.ts:119\n                \n            \n\n\n            \n                \n                    show overflow content\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-responsivemenu/provider/overflow.control.ts:108\n                \n            \n\n\n            \n                \n                    update overflow visibility, if no overflow items exists it will\nclose overflow automatically, unless overflow is forced\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        forceOverflow\n                    \n                \n\n\n                \n                    \n                        setforceOverflow(forced: boolean)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/provider/overflow.control.ts:68\n                                \n                            \n                    \n                        \n                                set force overflow, if set to true this will allways emits show\nfor overflow conainer even if no overflow items exits.\ndefault is set to false\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            forced\n                                                    \n                                                            \n                                                                            boolean\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        show\n                    \n                \n\n                \n                    \n                        getshow()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/provider/overflow.control.ts:75\n                                \n                            \n                    \n                        \n                                returns oberservable to get notified overflow should be shown\n\n\n                                \n                                    Returns :     Observable\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        hide\n                    \n                \n\n                \n                    \n                        gethide()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/provider/overflow.control.ts:82\n                                \n                            \n                    \n                        \n                                returns oberservable to get notified overflow should be hide\n\n\n                                \n                                    Returns :     Observable\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n\n                \n                    \n                        getdata()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/provider/overflow.control.ts:93\n                                \n                            \n                    \n                        \n                                returns overflow data model\n\n\n                                \n                                    Returns :         OverflowModel\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { OverflowModel } from \"../model/overflow.model\";\nimport { Injectable } from \"@angular/core\";\nimport { MenuItemDirective } from \"../directives/menu-item.directive\";\nimport { Observable, Subject } from \"rxjs\";\n\n/**\n * overflow control to open / close overflow.\n *\n * Every ResponsiveMenu will use this shared service. If you want display multiple\n * responsive menu components u should provide an own OverflowControl service in dependcy injection tree.\n * In this case both components got his own OverflowControl and dont affect each other.\n *\n * @example\n *\n * Component({\n *     selector: \"app-sub1-component\",\n *     templateUrl: \"sub_1.component.html\",\n *     styleUrls: [\"./sub_1.component.scss\"],\n *     viewProviders: [OverflowControl]\n * })\n * export class SubComponent1 implements AfterViewInit, AfterContentInit, OnDestroy {\n *     ...\n * }\n *\n * Component({\n *     selector: \"app-sub2-component\",\n *     templateUrl: \"sub_2.component.html\",\n *     styleUrls: [\"./sub_2.component.scss\"],\n *     viewProviders: [OverflowControl]\n * })\n * export class SubComponent2 implements AfterViewInit, AfterContentInit, OnDestroy {\n *     ...\n * }\n */\n@Injectable()\nexport class OverflowControl {\n\n    private rendered = false;\n\n    /**\n     * data model\n     */\n    private overflowModel: OverflowModel;\n\n    /**\n     * notify all observers if overflow should be rendered\n     * but only if overflow items exists\n     */\n    private show$: Subject = new Subject();\n\n    /**\n     * notify all observers if overflow should be removed\n     */\n    private hide$: Subject = new Subject();\n\n    /**\n     * if true show$ will allways notify oberservers even if no\n     * items exists\n     */\n    private forced: boolean;\n\n    /**\n     * set force overflow, if set to true this will allways emits show\n     * for overflow conainer even if no overflow items exits.\n     *\n     * default is set to false\n     */\n    public set forceOverflow(forced: boolean) {\n        this.forced = forced;\n    }\n\n    /**\n     * returns oberservable to get notified overflow should be shown\n     */\n    public get show(): Observable {\n        return this.show$.asObservable();\n    }\n\n    /**\n     * returns oberservable to get notified overflow should be hide\n     */\n    public get hide(): Observable {\n        return this.hide$.asObservable();\n    }\n\n    public constructor() {\n        this.overflowModel = new OverflowModel();\n    }\n\n    /**\n     * returns overflow data model\n     */\n    public get data(): OverflowModel {\n        return this.overflowModel;\n    }\n\n    /**\n     * retursn true if overflow container is rendered\n     */\n    public isOpen(): boolean {\n        return this.rendered;\n    }\n\n    /**\n     * update overflow visibility, if no overflow items exists it will\n     * close overflow automatically, unless overflow is forced\n     */\n    public update() {\n        if (this.rendered) {\n            this.data.items.length === 0 && !this.forced\n                ? this.close()\n                : this.show$.next(this.data.items);\n        }\n    }\n\n    /**\n     * show overflow content\n     */\n    public open() {\n        if (!this.rendered && (this.forced || this.data.items.length)) {\n            this.rendered = true;\n            this.show$.next(this.data.items);\n        }\n    }\n\n    /**\n     * close overflow content\n     */\n    public close() {\n        if (this.rendered) {\n            this.rendered = false;\n            this.hide$.next(this.data.items);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OverflowModel.html":{"url":"classes/OverflowModel.html","title":"class - OverflowModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OverflowModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-responsivemenu/model/overflow.model.ts\n        \n\n            \n                Description\n            \n            \n                holds informations which are used from overflow control\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isOverflow\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    items\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isOverflow\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isOverflow()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-responsivemenu/model/overflow.model.ts:30\n                \n            \n\n\n            \n                \n                    returns true if overflow is not empty\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        items\n                    \n                \n\n                \n                    \n                        getitems()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/model/overflow.model.ts:23\n                                \n                            \n                    \n                        \n                                get items which should rendered to overflow\n\n\n                                \n                                    Returns :     MenuItemDirective[]\n\n                                \n                        \n                    \n\n                \n                    \n                        setitems(items: [])\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/model/overflow.model.ts:16\n                                \n                            \n                    \n                        \n                                set items which should rendered to overflow\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            items\n                                                    \n                                                            \n                                                                        []\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import { MenuItemDirective } from \"../directives/menu-item.directive\";\n\n/**\n * holds informations which are used from overflow control\n */\nexport class OverflowModel {\n\n    /**\n     * hold all overflow items\n     */\n    private overflowItems: MenuItemDirective[] = [];\n\n    /**\n     * set items which should rendered to overflow\n     */\n    public set items(items: MenuItemDirective[]) {\n        this.overflowItems = items;\n    }\n\n    /**\n     * get items which should rendered to overflow\n     */\n    public get items(): MenuItemDirective[] {\n        return this.overflowItems;\n    }\n\n    /**\n     * returns true if overflow is not empty\n     */\n    public isOverflow() {\n        return this.items.length > 0;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ResponsiveMenuComponent.html":{"url":"components/ResponsiveMenuComponent.html","title":"component - ResponsiveMenuComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ResponsiveMenuComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    lib/ngx-responsivemenu/components/responsive-menu.component.ts\n\n\n    \n        Description\n    \n    \n        Responsive menu component, all items which are passed should be from type\nResponsiveMenuItem or ResponsiveMenuToggle. All other items will never rendered\ninto dom\n\n    \n\n\n    \n        Implements\n    \n    \n                    AfterViewInit\n                    AfterContentInit\n                    OnDestroy\n    \n\n    \n        Example\n    \n    \n                \n                    \nBtn\n\n                \n    \n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ngx-responsivemenu\n            \n\n            \n                styleUrls\n                ./responsive-menu.component.scss\n            \n\n\n\n            \n                templateUrl\n                responsive-menu.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                menuItems\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                update\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                alignToggle\n                            \n                            \n                                classBtnPane\n                            \n                            \n                                classOverflow\n                            \n                            \n                                customOverflow\n                            \n                            \n                                forceOverflow\n                            \n                            \n                                showMax\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                rendered\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    forceOverflow\n                                \n                                \n                                    classOverflow\n                                \n                                \n                                    defaultToggleBtn\n                                \n                                \n                                    customToggleButton\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(overflowCtrl: OverflowControl, renderer: Renderer2, hostEl: ElementRef, changeDetector: ChangeDetectorRef)\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-responsivemenu/components/responsive-menu.component.ts:225\n                            \n                        \n\n                \n                    \n                            Creates an instance of ResponsiveMenuComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        overflowCtrl\n                                                  \n                                                        \n                                                                        OverflowControl\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                        Renderer2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hostEl\n                                                  \n                                                        \n                                                                        ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        changeDetector\n                                                  \n                                                        \n                                                                        ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        alignToggle\n                    \n                \n                \n                    \n                        Type :         BtnAlign\n\n                    \n                \n                \n                    \n                        Default value : BtnAlign.RIGHT\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/components/responsive-menu.component.ts:149\n                            \n                        \n                \n                    \n                        set position of toggle btn, possible values are left or right\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        classBtnPane\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/components/responsive-menu.component.ts:128\n                            \n                        \n                \n                    \n                        add a class for the button pane as example for bootstrap btn-group\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        classOverflow\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/components/responsive-menu.component.ts:141\n                            \n                        \n                \n                    \n                        add class to overflow container, only for default overflow if option customOverflow is passed\nthis class will not added to custom overflow, simply use [ngClass]=\"'className'\" if you want to add\na custom class\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        customOverflow\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/components/responsive-menu.component.ts:107\n                            \n                        \n                \n                    \n                        if true content will not rendered longer in default container for overflow\ncontent and should rendered in a custom overflow container.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        forceOverflow\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/components/responsive-menu.component.ts:114\n                            \n                        \n                \n                    \n                        if true toggle button will allways be visible even if content\nfits into button pane\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        showMax\n                    \n                \n                \n                    \n                        Default value : -1\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/components/responsive-menu.component.ts:89\n                            \n                        \n                \n                    \n                        set maximal amount of items which could rendered into button pane\nall other items will automatically add to overflow container\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        rendered\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/components/responsive-menu.component.ts:155\n                            \n                        \n                \n                    \n                        emits if responsive menu has been completed rendering process\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(width?: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-responsivemenu/components/responsive-menu.component.ts:270\n                \n            \n\n\n            \n                \n                    update view, this will remove all\ncontents and rerender buttons\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    width\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            menuItems\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     QueryList\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ContentChildren(MenuItemDirective)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in lib/ngx-responsivemenu/components/responsive-menu.component.ts:82\n                            \n                        \n\n                \n                    \n                        Get querylist for all content items from type MenuItemDirective.\nWill also subscribe to querylist to get notified something changes so we can\nrerender menu\n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        forceOverflow\n                    \n                \n\n\n                \n                    \n                        setforceOverflow(forced: boolean)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/components/responsive-menu.component.ts:114\n                                \n                            \n                    \n                        \n                                if true toggle button will allways be visible even if content\nfits into button pane\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            forced\n                                                    \n                                                            \n                                                                            boolean\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        classOverflow\n                    \n                \n\n\n                \n                    \n                        setclassOverflow(name: string)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/components/responsive-menu.component.ts:141\n                                \n                            \n                    \n                        \n                                add class to overflow container, only for default overflow if option customOverflow is passed\nthis class will not added to custom overflow, simply use [ngClass]=\"'className'\" if you want to add\na custom class\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            name\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                        Example :\n                                            \n                                                &lt;ngx-responsive-menu [classOverflow]=&quot;&#39;overflow-container&#39;&quot;&gt;\n...\n\n                                            \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        defaultToggleBtn\n                    \n                \n\n\n                \n                    \n                        setdefaultToggleBtn(btn)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/components/responsive-menu.component.ts:163\n                                \n                            \n                    \n                        \n                                static: false wait until change detection loop has been finished in this case\nbutton el will not rendered to dom if a custom button is given but we have to wait\nuntil change detection finished before we get it\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            btn\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        customToggleButton\n                    \n                \n\n\n                \n                    \n                        setcustomToggleButton(btn)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-responsivemenu/components/responsive-menu.component.ts:173\n                                \n                            \n                    \n                        \n                                check if custom button is defined so we dont need to render default more button\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            btn\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import {\n    AfterContentInit,\n    AfterViewInit,\n    Component,\n    ContentChildren,\n    ElementRef,\n    Input,\n    OnDestroy,\n    QueryList,\n    Renderer2,\n    ViewChild,\n    ContentChild,\n    ChangeDetectorRef,\n    Output,\n    EventEmitter,\n} from \"@angular/core\";\n\nimport { MenuItemDirective } from \"../directives/menu-item.directive\";\nimport { takeUntil } from \"rxjs/operators\";\nimport { Subject } from \"rxjs\";\nimport { OverflowControl } from \"../provider/overflow.control\";\nimport { MenuToggleDirective } from \"../directives/menu-toggle.directive\";\n\n/**\n * possible toggle button alignments\n */\nexport enum BtnAlign {\n    LEFT = \"left\",\n    RIGHT = \"right\"\n}\n\n/**\n * @ignore\n */\ninterface CssClasses {\n    [key: string]: boolean;\n}\n\n/**\n * Responsive menu component, all items which are passed should be from type\n * ResponsiveMenuItem or ResponsiveMenuToggle. All other items will never rendered\n * into dom\n *\n * @example\n * \n *     Btn\n * \n */\n@Component({\n    selector: \"ngx-responsivemenu\",\n    templateUrl: \"responsive-menu.component.html\",\n    styleUrls: [\"./responsive-menu.component.scss\"]\n})\nexport class ResponsiveMenuComponent implements AfterViewInit, AfterContentInit, OnDestroy {\n\n    /**\n     * if true default toggle button will not rendered anymore, will be set if a custom item\n     * has been added to content from type MenuToggleDirective\n     *\n     * @ignore\n     * @example\n     * \n     *     ...\n     *     Button\n     * \n     */\n    public isCustomButton = false;\n\n    /**\n     * overflow css classes\n     *\n     * @ignore\n     */\n    public overflowClasses: CssClasses = { overflow: true };\n\n    /**\n     * Get querylist for all content items from type MenuItemDirective.\n     * Will also subscribe to querylist to get notified something changes so we can\n     * rerender menu\n     */\n    @ContentChildren(MenuItemDirective)\n    public menuItems: QueryList;\n\n    /**\n     * set maximal amount of items which could rendered into button pane\n     * all other items will automatically add to overflow container\n     */\n    @Input()\n    public showMax = -1;\n\n    /**\n     * if true content will not rendered longer in default container for overflow\n     * content and should rendered in a custom overflow container.\n     *\n     * @example\n     *\n     * \n     *   {{label}}\n     * \n     *\n     * \n     *    \n     *    \n     * \n     */\n    @Input()\n    public customOverflow = false;\n\n    /**\n     * if true toggle button will allways be visible even if content\n     * fits into button pane\n     */\n    @Input()\n    public set forceOverflow(forced: boolean) {\n        this.isForcedOverflow = forced;\n        this.overflowCtrl.forceOverflow = forced;\n    }\n\n    /**\n     * add a class for the button pane as example for bootstrap btn-group\n     *\n     * @example\n     * \n     *   {{label}}\n     * \n     */\n    @Input()\n    public classBtnPane: string;\n\n    /**\n     * add class to overflow container, only for default overflow if option customOverflow is passed\n     * this class will not added to custom overflow, simply use [ngClass]=\"'className'\" if you want to add\n     * a custom class\n     *\n     * @example\n     * \n     *    ...\n     * \n     */\n    @Input()\n    public set classOverflow(name: string) {\n        this.overflowClasses[name] = true;\n    }\n\n    /**\n     * set position of toggle btn, possible values are left or right\n     */\n    @Input()\n    public alignToggle: BtnAlign = BtnAlign.RIGHT;\n\n    /**\n     * emits if responsive menu has been completed rendering process\n     */\n    @Output()\n    rendered: EventEmitter = new EventEmitter();\n\n    /**\n     * static: false wait until change detection loop has been finished in this case\n     * button el will not rendered to dom if a custom button is given but we have to wait\n     * until change detection finished before we get it\n     */\n    @ViewChild(MenuToggleDirective, {read: MenuToggleDirective, static: false})\n    protected set defaultToggleBtn( btn: MenuToggleDirective ) {\n        if ( !this.toggleBtn ) {\n            this.toggleBtn = btn;\n        }\n    }\n\n    /**\n     * check if custom button is defined so we dont need to render default more button\n     */\n    @ContentChild(MenuToggleDirective, {read: MenuToggleDirective, static: true})\n    protected set customToggleButton( btn: MenuToggleDirective ) {\n        this.isCustomButton = Boolean( btn );\n        if (btn) {\n            this.toggleBtn = btn;\n        }\n    }\n\n    /**\n     * button pane where items will be rendered if they fits into\n     */\n    @ViewChild( \"buttonPane\", { read: ElementRef, static: true } )\n    private buttonPane: ElementRef;\n\n    /**\n     * temporary button pane where buttons will be rendered on render process\n     * to avoid visualization errors\n     */\n    @ViewChild( \"tmpButtonPane\", { read: ElementRef, static: true } )\n    private tmpButtonPane: ElementRef;\n\n    /**\n     * if true toggle button will allways included to button pane and be visible\n     */\n    private isForcedOverflow = false;\n\n    /**\n     * emits true if component gets destroyed\n     */\n    private isDestroyed$: Subject = new Subject();\n\n    /**\n     * toggle button to show / close overflow\n     */\n    private toggleBtn: MenuToggleDirective;\n\n    /**\n     * possible overflow items, which fits into button bar but not with more button\n     * but since the next button could be the last button and be smaller then overflow button\n     * which could results into that all buttons fits into the bar we only have to mark this button\n     * for an overflow button\n     */\n    private possibleOverflowItems: MenuItemDirective[] = [];\n\n    /**\n     * all overflow items which exists\n     */\n    private overflowItems: MenuItemDirective[] = [];\n\n    /** max width of button bar */\n    private maxWidth: number;\n\n    /** reserved width which we will need to show more button */\n    private reservedWidth: number;\n\n    /**\n     * Creates an instance of ResponsiveMenuComponent.\n     */\n    public constructor(\n        private overflowCtrl: OverflowControl,\n        private renderer: Renderer2,\n        private hostEl: ElementRef,\n        private changeDetector: ChangeDetectorRef\n    ) {\n    }\n\n    /**\n     * component gets destroyed\n     */\n    public ngOnDestroy() {\n        this.isDestroyed$.next( true );\n    }\n\n    /**\n     * after content has initialized register to QueryList\n     * to get notified about changes\n     */\n    public ngAfterContentInit() {\n        this.menuItems.changes\n            .pipe(takeUntil(this.isDestroyed$))\n            .subscribe(() => this.update());\n    }\n\n    /**\n     * after view has been initialized and custom button exists\n     * append custom toggle button to button pane\n     */\n    public ngAfterViewInit() {\n        if (this.isCustomButton) {\n            this.renderer.appendChild( this.buttonPane.nativeElement, this.toggleBtn.nativeElement );\n        }\n        this.render();\n    }\n\n    /**\n     * update view, this will remove all\n     * contents and rerender buttons\n     */\n    public update(width?: number) {\n        this.render(width);\n        this.overflowCtrl.update();\n    }\n\n    /**\n     * remove old items from view so we ensure we have a clean tree\n     */\n    private clearView() {\n        this.menuItems.forEach((menuItem: MenuItemDirective) => {\n            menuItem.remove();\n        });\n        this.changeDetector.detectChanges();\n    }\n\n    /**\n     * render buttons to button menubar, if they not fits anymore or\n     * max show count is reached put them directly to the overflow container\n     */\n    private render(width?: number) {\n        this.initRenderProcess();\n        this.maxWidth = width || this.calcHostWidth();\n\n        const items = this.prepareMenuItems();\n        let isOverflow = false;\n\n        for ( let index = 0, count = 0, ln = items.length; index  -1 && count >= this.showMax;\n\n            if ( !isOverflow ) {\n                item.addTo(this.tmpButtonPane.nativeElement);\n                if (this.validateSize(item)) {\n                    continue;\n                }\n                isOverflow = true;\n            }\n            this.overflowItems.push(item);\n        }\n        this.finalizeRenderProcess();\n    }\n\n    /**\n     * initialize render process\n     * clean up all views, get dimensions from elements\n     */\n    private initRenderProcess() {\n        this.clearView();\n\n        this.overflowItems = [];\n        this.possibleOverflowItems = [];\n        this.overflowCtrl.data.items = [];\n\n        this.toggleBtn.display = true;\n        this.reservedWidth = this.toggleBtn.width;\n        this.toggleBtn.display = false;\n    }\n\n    /**\n     * finialize render process, enable more button if an overflow exists\n     */\n    private finalizeRenderProcess() {\n\n        const overflowData = this.finalizeMenuItems();\n        this.overflowCtrl.data.items =  overflowData;\n\n        this.toggleBtn.display = this.isForcedOverflow || overflowData.length > 0;\n\n        this.possibleOverflowItems = [];\n        this.overflowItems = [];\n        this.changeDetector.detectChanges();\n        this.rendered.emit();\n    }\n\n    /**\n     * prepare menu items, filter out items which should be hidden by default\n     * and put them to overflow\n     */\n    private prepareMenuItems(): MenuItemDirective[] {\n        return this.menuItems.reduce((itemCollection, menuItem) => {\n            menuItem.visible\n                ? itemCollection.push(menuItem)\n                : this.overflowItems.push(menuItem);\n\n            return itemCollection;\n        }, []);\n    }\n\n    /**\n     * finalize menu buttons after render process finished\n     * buttons which are in overflow will removed from dom and pushed to overflow array\n     * all others will added to buttonPane\n     */\n    private finalizeMenuItems(): MenuItemDirective[] {\n\n        const items = this.overflowItems.length\n            ? this.possibleOverflowItems.concat(this.overflowItems)\n            : [];\n\n        return this.menuItems.toArray().reduce((overflowItems, item) => {\n            // remove all items so they are not rendered anymore\n            item.remove();\n            if (!items.length || items.indexOf(item) === -1) {\n                this.alignToggle === BtnAlign.LEFT\n                    ? item.addTo(this.buttonPane.nativeElement)\n                    : item.addTo(this.buttonPane.nativeElement, this.toggleBtn.nativeElement);\n                return overflowItems;\n            }\n\n            /** push item to overflow */\n            overflowItems.push(item);\n            return overflowItems;\n        }, []);\n    }\n\n    /**\n     * validate rendered item fits into button container\n     */\n    private validateSize( item: MenuItemDirective ): boolean {\n        const usedSize = parseInt(this.tmpButtonPane.nativeElement.offsetWidth, 10);\n\n        /** item fits together with more button */\n        if (usedSize + this.reservedWidth \n    \n\n    \n        \n\n    \n    \n    \n        ...\n    \n\n\n\n\n    \n\n    \n                \n                    ./responsive-menu.component.scss\n                \n                :host {\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n\n    .buttonWrapper {\n        display: flex;\n        flex-direction: row;\n        justify-content: flex-end;\n    }\n\n    .buttonPane {\n        display: inline-flex;\n        flex-direction: row;\n        flex-wrap: nowrap;\n        flex-shrink: 0;\n    }\n\n    ::ng-deep {\n        .responsive-menu--item {\n            flex-shrink: 0 !important;\n        }\n    }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                    ...    '\n    var COMPONENTS = [{'name': 'ResponsiveMenuComponent', 'selector': 'ngx-responsivemenu'}];\n    var DIRECTIVES = [{'name': 'MenuItemDirective', 'selector': '[ngxResponsiveMenuItem]'},{'name': 'MenuToggleDirective', 'selector': '[ngxResponsiveMenuToggle]'},{'name': 'OverflowContentDirective', 'selector': 'ngx-responsivemenu-overflow'}];\n    var ACTUAL_COMPONENT = {'name': 'ResponsiveMenuComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ResponsiveMenuModule.html":{"url":"modules/ResponsiveMenuModule.html","title":"module - ResponsiveMenuModule","body":"\n                   \n\n\n\n\n    Modules\n    ResponsiveMenuModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ResponsiveMenuModule\n\n\n\ncluster_ResponsiveMenuModule_declarations\n\n\n\ncluster_ResponsiveMenuModule_exports\n\n\n\ncluster_ResponsiveMenuModule_providers\n\n\n\n\nMenuItemDirective\n\nMenuItemDirective\n\n\n\nResponsiveMenuModule\n\nResponsiveMenuModule\n\nResponsiveMenuModule -->\n\nMenuItemDirective->ResponsiveMenuModule\n\n\n\n\n\nMenuToggleDirective\n\nMenuToggleDirective\n\nResponsiveMenuModule -->\n\nMenuToggleDirective->ResponsiveMenuModule\n\n\n\n\n\nOverflowContentDirective\n\nOverflowContentDirective\n\nResponsiveMenuModule -->\n\nOverflowContentDirective->ResponsiveMenuModule\n\n\n\n\n\nResponsiveMenuComponent\n\nResponsiveMenuComponent\n\nResponsiveMenuModule -->\n\nResponsiveMenuComponent->ResponsiveMenuModule\n\n\n\n\n\nMenuItemDirective \n\nMenuItemDirective \n\nMenuItemDirective  -->\n\nResponsiveMenuModule->MenuItemDirective \n\n\n\n\n\nMenuToggleDirective \n\nMenuToggleDirective \n\nMenuToggleDirective  -->\n\nResponsiveMenuModule->MenuToggleDirective \n\n\n\n\n\nOverflowContentDirective \n\nOverflowContentDirective \n\nOverflowContentDirective  -->\n\nResponsiveMenuModule->OverflowContentDirective \n\n\n\n\n\nResponsiveMenuComponent \n\nResponsiveMenuComponent \n\nResponsiveMenuComponent  -->\n\nResponsiveMenuModule->ResponsiveMenuComponent \n\n\n\n\n\nOverflowControl\n\nOverflowControl\n\nResponsiveMenuModule -->\n\nOverflowControl->ResponsiveMenuModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            lib/ngx-responsivemenu/ngx-responsivemenu.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            MenuItemDirective\n                        \n                        \n                            MenuToggleDirective\n                        \n                        \n                            OverflowContentDirective\n                        \n                        \n                            ResponsiveMenuComponent\n                        \n                    \n                \n                \n                    Providers\n                    \n                        \n                            OverflowControl\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MenuItemDirective\n                        \n                        \n                            MenuToggleDirective\n                        \n                        \n                            OverflowContentDirective\n                        \n                        \n                            ResponsiveMenuComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from \"@angular/core\";\nimport { MenuItemDirective } from \"./directives/menu-item.directive\";\nimport { ResponsiveMenuComponent } from \"./components/responsive-menu.component\";\nimport { CommonModule } from \"@angular/common\";\nimport { OverflowContentDirective } from \"./directives/overflow.directive\";\nimport { OverflowControl } from \"./provider/overflow.control\";\nimport { MenuToggleDirective } from \"./directives/menu-toggle.directive\";\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    exports: [\n        MenuItemDirective,\n        MenuToggleDirective,\n        OverflowContentDirective,\n        ResponsiveMenuComponent,\n    ],\n    providers: [ OverflowControl ],\n    declarations: [\n        MenuItemDirective,\n        MenuToggleDirective,\n        OverflowContentDirective,\n        ResponsiveMenuComponent,\n    ]\n})\nexport class ResponsiveMenuModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                lib/ngx-responsivemenu/components/responsive-menu.component.ts\n            \n            component\n            ResponsiveMenuComponent\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                lib/ngx-responsivemenu/directives/menu-item.directive.ts\n            \n            directive\n            MenuItemDirective\n            \n                66 %\n                (4/6)\n            \n        \n        \n            \n                \n                lib/ngx-responsivemenu/directives/menu-toggle.directive.ts\n            \n            directive\n            MenuToggleDirective\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/ngx-responsivemenu/directives/overflow.directive.ts\n            \n            directive\n            OverflowContentDirective\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                lib/ngx-responsivemenu/model/overflow.model.ts\n            \n            class\n            OverflowModel\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                lib/ngx-responsivemenu/provider/async-event.ts\n            \n            class\n            AsyncEvent\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                lib/ngx-responsivemenu/provider/overflow.control.ts\n            \n            injectable\n            OverflowControl\n            \n                83 %\n                (5/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^8.0.0\n        \n            @angular/cdk : ^8.0.0\n        \n            @angular/common : ^8.0.0\n        \n            @angular/compiler : ^8.0.0\n        \n            @angular/core : ^8.0.0\n        \n            @angular/forms : ^8.0.0\n        \n            @angular/material : ^8.0.0\n        \n            @angular/platform-browser : ^8.0.0\n        \n            @angular/platform-browser-dynamic : ^8.0.0\n        \n            @angular/router : ^8.0.0\n        \n            @compodoc/compodoc : ^1.1.9\n        \n            angular-resizable-element : ^3.2.4\n        \n            bluebird : 3.5.5\n        \n            core-js : ^3.1.3\n        \n            font-awesome : ^4.7.0\n        \n            generate-changelog : ^1.7.1\n        \n            highlight.js : ^9.15.8\n        \n            ngx-highlightjs : ^3.0.3\n        \n            ngx-markdown : ^8.0.2\n        \n            rxjs : ~6.5.2\n        \n            tslib : ^1.9.0\n        \n            zone.js : ~0.9.1\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BtnAlign   (lib/.../responsive-menu.component.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/ngx-responsivemenu/components/responsive-menu.component.ts\n    \n        \n            \n                \n                    \n                        \n                        BtnAlign\n                    \n                \n                    \n                        \n                            possible toggle button alignments\n\n                        \n                    \n                        \n                            \n                                 LEFT\n                            \n                        \n                        \n                            \n                                Value : left\n                            \n                        \n                        \n                            \n                                 RIGHT\n                            \n                        \n                        \n                            \n                                Value : right\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ResponsiveMenuModule\n\n\n\ncluster_ResponsiveMenuModule_declarations\n\n\n\ncluster_ResponsiveMenuModule_exports\n\n\n\ncluster_ResponsiveMenuModule_providers\n\n\n\n\nMenuItemDirective\n\nMenuItemDirective\n\n\n\nResponsiveMenuModule\n\nResponsiveMenuModule\n\nResponsiveMenuModule -->\n\nMenuItemDirective->ResponsiveMenuModule\n\n\n\n\n\nMenuToggleDirective\n\nMenuToggleDirective\n\nResponsiveMenuModule -->\n\nMenuToggleDirective->ResponsiveMenuModule\n\n\n\n\n\nOverflowContentDirective\n\nOverflowContentDirective\n\nResponsiveMenuModule -->\n\nOverflowContentDirective->ResponsiveMenuModule\n\n\n\n\n\nResponsiveMenuComponent\n\nResponsiveMenuComponent\n\nResponsiveMenuModule -->\n\nResponsiveMenuComponent->ResponsiveMenuModule\n\n\n\n\n\nMenuItemDirective \n\nMenuItemDirective \n\nMenuItemDirective  -->\n\nResponsiveMenuModule->MenuItemDirective \n\n\n\n\n\nMenuToggleDirective \n\nMenuToggleDirective \n\nMenuToggleDirective  -->\n\nResponsiveMenuModule->MenuToggleDirective \n\n\n\n\n\nOverflowContentDirective \n\nOverflowContentDirective \n\nOverflowContentDirective  -->\n\nResponsiveMenuModule->OverflowContentDirective \n\n\n\n\n\nResponsiveMenuComponent \n\nResponsiveMenuComponent \n\nResponsiveMenuComponent  -->\n\nResponsiveMenuModule->ResponsiveMenuComponent \n\n\n\n\n\nOverflowControl\n\nOverflowControl\n\nResponsiveMenuModule -->\n\nOverflowControl->ResponsiveMenuModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Component\n                \n            \n        \n        \n            \n                \n                    \n                    3 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    1 Injectable\n                \n            \n        \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ResponsiveMenuModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
